langstring
==========

.. py:module:: langstring

.. autoapi-nested-parse::

   The langstring package provides classes and utilities for handling multilingual text.

   This package is designed to support the management and manipulation of strings in multiple languages, providing a
   framework for applications that require multilingual support.

   Modules and Classes:
   --------------------
   - controller:
       Handles the control mechanisms for language strings.

   - converter:
       Provides utilities for converting language strings between different formats.

   - flags:
       Defines various flag classes used for global settings and specific types of language strings.

       - GlobalFlag:
           A flag for global settings affecting all language string types.

       - LangStringFlag:
           A flag specific to single language strings.

       - SetLangStringFlag:
           A flag specific to sets of language strings.

       - MultiLangStringFlag:
           A flag specific to multi-language strings.

   - langstring:
       Represents a single language string, encapsulating its properties and behaviors.

   - multilangstring:
       Represents a string in multiple langs, providing methods to manage and manipulate the different language variants.

   - setlangstring:
       Represents a set of language strings, facilitating operations on groups of multilingual texts.

   Package Contents:
   -----------------
   The package exports the following classes and flags for use in external modules:

   - LangString
   - SetLangString
   - MultiLangString
   - Controller
   - GlobalFlag
   - LangStringFlag
   - SetLangStringFlag
   - MultiLangStringFlag
   - Converter

   Usage:
   ------
   To use this package, import the necessary classes and flags as follows:

       from langstring import (
           LangString, MultiLangString, SetLangString, Controller,
           GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag, Converter
       )



Subpackages
-----------

.. toctree::
   :maxdepth: 1

   /autoapi/langstring/utils/index


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/langstring/controller/index
   /autoapi/langstring/converter/index
   /autoapi/langstring/flags/index
   /autoapi/langstring/langstring/index
   /autoapi/langstring/multilangstring/index
   /autoapi/langstring/setlangstring/index


Classes
-------

.. autoapisummary::

   langstring.Controller
   langstring.Converter
   langstring.GlobalFlag
   langstring.LangStringFlag
   langstring.MultiLangStringFlag
   langstring.SetLangStringFlag
   langstring.LangString
   langstring.MultiLangString
   langstring.SetLangString


Package Contents
----------------

.. py:class:: Controller

   Control class for managing configuration flags, designed to be non-instantiable.

   This class uses class methods to set and retrieve configuration flags for the behavior of the `LangString`,
   `SetLangString`, and `MultiLangString` classes, ensuring a consistent global configuration state. It is made
   non-instantiable by using the `NonInstantiable` metaclass, emphasizing its role as a static configuration manager
   rather than an object to be instantiated.

   :cvar _DEFAULT_FLAGS: The default state of each flag.
   :vartype DEFAULT_FLAGS: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]
   :cvar flags: Stores the current state of each flag.
   :vartype flags: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]

   :Example:

   Set a flag:
   >>> Controller.set_flag(GlobalFlag.LOWERCASE_LANG, True)

   Get a flag:
   >>> print(Controller.get_flag(GlobalFlag.LOWERCASE_LANG))
   # Output: True

   Reset a flag to its default value:
   >>> Controller.reset_flag(GlobalFlag.LOWERCASE_LANG)
   >>> print(Controller.get_flag(GlobalFlag.LOWERCASE_LANG))
   # Output: False

   Print the state of a specific flag:
   >>> Controller.print_flag(GlobalFlag.LOWERCASE_LANG)
   # Output: GlobalFlag.LOWERCASE_LANG = False

   Print the states of all flags:
   >>> Controller.print_flags()
   # Output: (Output of all flags with their states)

   Reset all flags to their default values:
   >>> Controller.reset_flags()
   >>> Controller.print_flags()
   # Output: (Output of all flags reset to their default states)


   .. py:attribute:: _DEFAULT_FLAGS
      :type:  dict[Union[langstring.flags.GlobalFlag, langstring.flags.LangStringFlag, langstring.flags.SetLangStringFlag, langstring.flags.MultiLangStringFlag], bool]


   .. py:attribute:: flags
      :type:  dict[Union[langstring.flags.GlobalFlag, langstring.flags.LangStringFlag, langstring.flags.SetLangStringFlag, langstring.flags.MultiLangStringFlag], bool]


   .. py:method:: set_flag(flag, state)
      :classmethod:


      Set the state of a specified configuration flag for LangString, SetLangString, or MultiLangString.

      If a GlobalFlag is set, it also sets the corresponding flags in LangStringFlag, SetLangStringFlag,
      and MultiLangStringFlag to the same state.

      :param flag: The flag to be set, either an instance of one of the flag enums.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :param state: Setting this to True or False will enable or disable the flag, respectively.
      :type state: bool
      :raises TypeError: If 'flag' is not an instance of one of the flag enums, or if 'state' is not a boolean.

      :Example:

      >>> Controller.set_flag(GlobalFlag.LOWERCASE_LANG, True)
      >>> print(Controller.get_flag(GlobalFlag.LOWERCASE_LANG))  # Output: True



   .. py:method:: get_flag(flag)
      :classmethod:


      Retrieve the current state of a specified configuration flag.

      Available for GlobalFlag, LangString, SetLangString, or MultiLangString.

      This class method provides a way to access the state of a flag globally for LangString, SetLangString,
      and MultiLangString classes.

      :param flag: The flag whose state is to be retrieved, either an instance of GlobalFlag, LangStringFlag,
                   SetLangStringFlag, or MultiLangStringFlag.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :return: The current state of the flag.
      :rtype: bool
      :raises TypeError: If 'flag' is not a member of GlobalFlag, LangStringFlag, SetLangStringFlag,
                         or MultiLangStringFlag.

      :Example:

      >>> Controller.set_flag(GlobalFlag.LOWERCASE_LANG, True)
      >>> print(Controller.get_flag(GlobalFlag.LOWERCASE_LANG))  # Output: True



   .. py:method:: get_flags()
      :classmethod:


      Retrieve the current state of all configuration flags.

      This class method provides a way to access the states of all flags globally for LangString, SetLangString,
      and MultiLangString classes.
      It returns a copy of the flags dictionary, ensuring that the original data is not modified.

      :return: A dictionary mapping each flag to its boolean state.
      :rtype: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]

      :Example:

      >>> Controller.set_flag(GlobalFlag.LOWERCASE_LANG, True)
      >>> flags = Controller.get_flags()
      >>> print(flags[GlobalFlag.LOWERCASE_LANG])  # Output: True



   .. py:method:: print_flag(flag)
      :classmethod:


      Print the current state of a specific configuration flag.

      This class method prints the state of the specified flag to the console. It is useful for checking the state
      of an individual flag for LangString, SetLangString, MultiLangString, or GlobalFlag.

      :param flag: The flag whose state is to be printed.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :raises TypeError: If 'flag' is not an instance of one of the flag enums.

      :Example:

      >>> Controller.set_flag(GlobalFlag.LOWERCASE_LANG, True)
      >>> Controller.print_flag(GlobalFlag.LOWERCASE_LANG)  # Output: GlobalFlag.LOWERCASE_LANG = True



   .. py:method:: print_flags(flag_type = None)
      :classmethod:


      Print the current state of configuration flags in alphabetical order.

      If a flag type is specified, only flags of that type are printed.
      If no flag type is specified, all flags are printed.

      :param flag_type: The type of flags to print (e.g., GlobalFlag, LangStringFlag). If None, all flags are printed.
      :type flag_type: Optional[type]
      :raises TypeError: If 'flag_type' is not a valid flag type.

      :Example:

      >>> Controller.set_flag(GlobalFlag.LOWERCASE_LANG, True)
      >>> Controller.print_flags()
      # Output: Prints all flags and their current state.



   .. py:method:: reset_flag(flag)
      :classmethod:


      Reset a specific flag to its default value.

      If the flag is of type GlobalFlag, reset all equivalent flags of other types.
      For example, reset_flag(GlobalFlag.VALID_TEXT) will reset GlobalFlag.VALID_TEXT, LangStringFlag.VALID_TEXT,
      SetLangStringFlag.VALID_TEXT, and MultiLangStringFlag.VALID_TEXT.

      :param flag: The flag to be reset.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :raises TypeError: If 'flag' is not an instance of one of the flag enums.

      :Example:

      >>> Controller.set_flag(GlobalFlag.LOWERCASE_LANG, True)
      >>> Controller.reset_flag(GlobalFlag.LOWERCASE_LANG)
      >>> print(Controller.get_flag(GlobalFlag.LOWERCASE_LANG))  # Output: False



   .. py:method:: reset_flags(flag_type = GlobalFlag)
      :classmethod:


      Reset all flags of a specific type to their default values.

      :param flag_type: The type of flags to reset (e.g., GlobalFlag, LangStringFlag). If None, all flags are reset.
      :type flag_type: Optional[type]
      :raises TypeError: If 'flag_type' is not a valid flag type.

      :Example:

      >>> Controller.set_flag(GlobalFlag.LOWERCASE_LANG, True)
      >>> Controller.reset_flags(GlobalFlag)
      >>> print(Controller.get_flag(GlobalFlag.LOWERCASE_LANG))  # Output: False



.. py:class:: Converter

   A utility class for converting between different string types used in language processing.

   This class provides methods to convert between `LangString`, `SetLangString`, and `MultiLangString` types.
   It is designed to be non-instantiable as it serves as a utility class with class methods only.

   Examples:
       # Convert a string to a LangString using the 'manual' method:
       >>> langstring = Converter.from_string_to_langstring("manual", "Hello", "en")
       >>> print(langstring)  #Output: "Hello"@en

       # Convert a list of strings to a list of LangStrings using the 'parse' method:
       >>> langstrings = Converter.from_strings_to_langstrings("parse", ["Hello@en", "Bonjour@fr"], separator="@")
       >>> for ls in langstrings:
       >>>     print(ls)  #Output: "Hello"@en
       >>>                #        "Bonjour"@fr

       # Convert a SetLangString to a MultiLangString:
       >>> setlangstring = SetLangString({"Hello", "Hi"}, "en")
       >>> multilangstring = Converter.from_setlangstring_to_multilangstring(setlangstring)
       >>> print(multilangstring)  #Output: {'Hello', 'Hi'}@en


   .. py:method:: from_string_to_langstring(method, input_string, lang = None, separator = '@')
      :classmethod:


      Convert a string to a LangString using the specified method.

      :param method: The method to use for conversion ('manual' or 'parse').
      :type method: str
      :param input_string: The text to be converted.
      :type input_string: str
      :param lang: The language code (used only with 'manual' method).
      :type lang: Optional[str]
      :param separator: The separator used to split the text and language (used only with 'parse' method).
      :type separator: str
      :return: A LangString object with the converted text and language.
      :rtype: LangString
      :raises ValueError: If the method is unknown.

      Examples:
          # Convert a string to a LangString using the 'manual' method:
          >>> langstring = Converter.from_string_to_langstring("manual", "Hello", "en")
          >>> print(langstring)  # Output: "Hello"@en

          # Convert a string to a LangString using the 'parse' method:
          >>> langstring = Converter.from_string_to_langstring("parse", "Hello@en")
          >>> print(langstring)  # Output: "Hello"@en



   .. py:method:: from_string_to_langstring_manual(input_string, lang)
      :staticmethod:


      Convert a string to a LangString with the specified language.

      :param input_string: The text to be converted.
      :type input_string: str
      :param lang: The language code.
      :type lang: Optional[str]
      :return: A LangString object with the provided text and language.
      :rtype: LangString

      Examples:
          # Convert a string to a LangString with the specified language:
          >>> langstring = Converter.from_string_to_langstring_manual("Hello", "en")
          >>> print(langstring)  # Output: "Hello"@en



   .. py:method:: from_string_to_langstring_parse(input_string, separator = '@')
      :staticmethod:


      Convert a string to a LangString by parsing it with the given separator.

      This function splits the input string into text and language components based on the last occurrence of the
      specified separator. If the separator is not found, the entire string is considered as text and lang is set
      to "" (empty string).

      :param input_string: The text to be converted.
      :type input_string: str
      :param separator: The separator used to split the text and language.
      :type separator: str
      :return: A LangString object with the parsed text and language.
      :rtype: LangString

      Examples:
          # Convert a string to a LangString by parsing it with the given separator:
          >>> langstring = Converter.from_string_to_langstring_parse("Hello@en", "@")
          >>> print(langstring)  # Output: "Hello"@en

          # Convert a string to a LangString with no separator found:
          >>> langstring = Converter.from_string_to_langstring_parse("Hello", "@")
          >>> print(langstring)  # Output: "Hello"@



   .. py:method:: from_strings_to_langstrings(method, strings, lang = None, separator = '@')
      :classmethod:


      Convert a list of strings to a list of LangStrings using the specified method.

      :param method: The method to use for conversion ('manual' or 'parse').
      :type method: str
      :param strings: List of strings to be converted.
      :type strings: list[str]
      :param lang: The language code for 'manual' method.
      :type lang: Optional[str]
      :param separator: The separator used in 'parse' method.
      :type separator: str
      :return: A list of LangString objects.
      :rtype: list[LangString]
      :raises ValueError: If an unknown method is specified.
      :raises TypeError: If the input types are incorrect.

      Examples:
          # Convert a list of strings to a list of LangStrings using the 'manual' method:
          >>> langstrings = Converter.from_strings_to_langstrings("manual", ["Hello", "Hi"], "en")
          >>> for ls in langstrings:
          >>>     print(ls)  # Output: "Hello"@en
          >>>                #         "Hi"@en

          # Convert a list of strings to a list of LangStrings using the 'parse' method:
          >>> langstrings = Converter.from_strings_to_langstrings("parse", ["Hello@en", "Bonjour@fr"], separator="@")
          >>> for ls in langstrings:
          >>>     print(ls)  # Output: "Hello"@en
          >>>                #         "Bonjour"@fr



   .. py:method:: from_strings_to_setlangstring(strings, lang = None)
      :classmethod:


      Convert a list of strings to a SetLangString using the 'manual' method.

      :param strings: List of strings to be converted.
      :type strings: list[str]
      :param lang: Language code for the 'manual' method. Optional.
      :type lang: Optional[str]
      :return: A SetLangString object.
      :rtype: SetLangString

      Examples:
          # Convert a list of strings to a SetLangString using the 'manual' method:
          >>> setlangstring = Converter.from_strings_to_setlangstring(["Hello", "Hi"], "en")
          >>> print(setlangstring)  # Output: {'Hello', 'Hi'}@en



   .. py:method:: from_strings_to_multilangstring(method, strings, lang = None, separator = '@')
      :classmethod:


      Convert a list of strings to a MultiLangString using the specified method.

      :param method: Method to use for conversion ("manual", or "parse").
      :type method: str
      :param strings: List of strings to be converted.
      :type strings: list[str]
      :param lang: Language code for the "manual" method. Optional.
      :type lang: Optional[str]
      :param separator: Separator for the "parse" method. Default is "@".
      :type separator: str
      :return: A MultiLangString object.
      :rtype: MultiLangString

      Examples:
          # Convert a list of strings to a MultiLangString using the 'manual' method:
          >>> multilangstring = Converter.from_strings_to_multilangstring("manual", ["Hello", "Hi"], "en")
          >>> print(multilangstring)  # Output: {'Hello', 'Hi'}@en

          # Convert a list of strings to a MultiLangString using the 'parse' method:
          >>> multilangstring = Converter.from_strings_to_multilangstring("parse", ["Hello@en", "Bonjour@fr"],
                                                                                                      separator="@")
          >>> print(multilangstring)  # Output: {'Hello', 'Bonjour'}@en,fr



   .. py:method:: from_langstring_to_string(arg, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:


      Convert a LangString to a string.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :param print_quotes: Whether to include quotes around the text in the output.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between text and language.
      :type separator: str
      :param print_lang: Whether to include the language in the output.
      :type print_lang: Optional[bool]
      :return: The string representation of the LangString.
      :rtype: str

      Examples:
          # Convert a LangString to a string with quotes and language:
          >>> langstring = LangString("Hello", "en")
          >>> string = Converter.from_langstring_to_string(langstring, print_quotes=True, separator="@")
          >>> print(string)  # Output: "Hello"@en

          # Convert a LangString to a string without quotes and language:
          >>> string = Converter.from_langstring_to_string(langstring, print_quotes=False, separator="@",
                                                                                                  print_lang=False)
          >>> print(string)  # Output: "Hello"



   .. py:method:: from_langstrings_to_strings(arg, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:


      Convert a list of LangStrings to a list of strings.

      :param arg: List of LangStrings to be converted.
      :type arg: list[LangString]
      :param print_quotes: Whether to include quotes around the text in the output.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between text and language.
      :type separator: str
      :param print_lang: Whether to include the language in the output.
      :type print_lang: Optional[bool]
      :return: A list of string representations of the LangStrings.
      :rtype: list[str]

      Examples:
          # Convert a list of LangStrings to a list of strings with quotes and language:
          >>> langstrings = [LangString("Hello", "en"), LangString("Bonjour", "fr")]
          >>> strings = Converter.from_langstrings_to_strings(langstrings, print_quotes=True, separator="@")
          >>> for s in strings:
          >>>     print(s)  # Output: "Hello"@en
          >>>                #         "Bonjour"@fr

          # Convert a list of LangStrings to a list of strings without quotes and language:
          >>> strings = Converter.from_langstrings_to_strings(langstrings, print_quotes=False, separator="@",
                                                                                                  print_lang=False)
          >>> for s in strings:
          >>>     print(s)  # Output: "Hello"
          >>>                #         "Bonjour"



   .. py:method:: from_langstring_to_setlangstring(arg)
      :staticmethod:


      Convert a LangString to a SetLangString.

      This method creates a SetLangString from a LangString. The resulting SetLangString contains the text of the
      LangString in a set and retains its language.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :return: A SetLangString containing the text from the arg LangString.
      :rtype: SetLangString
      :raises TypeError: If the arg is not of type LangString.

      Examples:
          # Convert a LangString to a SetLangString:
          >>> langstring = LangString("Hello", "en")
          >>> setlangstring = Converter.from_langstring_to_setlangstring(langstring)
          >>> print(setlangstring)  # Output: {'Hello'}@en



   .. py:method:: from_langstrings_to_setlangstring(arg)
      :staticmethod:


      Convert a list of LangStrings to a SetLangString.

      This method merges a list of LangStrings into a single SetLangString. The resulting SetLangString contains
      all the unique texts from the LangStrings and retains a common language if all LangStrings have the same
      language.

      :param arg: The list of LangStrings to be converted.
      :type arg: list[LangString]
      :return: A SetLangString containing the texts from the list of LangStrings.
      :rtype: SetLangString
      :raises ValueError: If the LangStrings have different languages.
      :raises TypeError: If the input types are incorrect.

      Examples:
          # Convert a list of LangStrings to a SetLangString:
          >>> langstrings = [LangString("Hello", "en"), LangString("Hi", "en")]
          >>> setlangstring = Converter.from_langstrings_to_setlangstring(langstrings)
          >>> print(setlangstring)  # Output: {'Hello', 'Hi'}@en



   .. py:method:: from_langstrings_to_setlangstrings(arg)
      :classmethod:


      Convert a list of LangStrings to a list of SetLangStrings.

      This method merges a list of LangStrings into multiple SetLangStrings based on their languages. Each
      SetLangString contains all the unique texts for a specific language from the LangStrings.

      :param arg: The list of LangStrings to be converted.
      :type arg: list[LangString]
      :return: A list of SetLangStrings, each containing texts of a specific language from the LangStrings.
      :rtype: list[SetLangString]
      :raises TypeError: If the input types are incorrect.

      Examples:
          # Convert a list of LangStrings to a list of SetLangStrings:
          >>> langstrings = [LangString("Hello", "en"), LangString("Bonjour", "fr")]
          >>> setlangstrings = Converter.from_langstrings_to_setlangstrings(langstrings)
          >>> for sls in setlangstrings:
          >>>     print(sls)  # Output: {'Hello'}@en
          >>>                 #         {'Bonjour'}@fr



   .. py:method:: from_langstring_to_multilangstring(arg)
      :staticmethod:


      Convert a LangString to a MultiLangString.

      This method takes a single LangString and converts it into a MultiLangString. The resulting MultiLangString
      contains the text and language of the arg LangString.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :return: A MultiLangString containing the text and language from the arg LangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type LangString.

      Examples:
          # Convert a LangString to a MultiLangString:
          >>> langstring = LangString("Hello", "en")
          >>> multilangstring = Converter.from_langstring_to_multilangstring(langstring)
          >>> print(multilangstring)  # Output: {'Hello'}@en



   .. py:method:: from_langstrings_to_multilangstring(arg)
      :staticmethod:


      Convert a list of LangStrings to a MultiLangString.

      This method merges a list of LangStrings into a single MultiLangString. The resulting MultiLangString
      contains all the unique texts and languages from the LangStrings.

      :param arg: The list of LangStrings to be converted.
      :type arg: list[LangString]
      :return: A MultiLangString containing the texts and languages from the list of LangStrings.
      :rtype: MultiLangString
      :raises TypeError: If the input types are incorrect.

      Examples:
          # Convert a list of LangStrings to a MultiLangString:
          >>> langstrings = [LangString("Hello", "en"), LangString("Bonjour", "fr")]
          >>> multilangstring = Converter.from_langstrings_to_multilangstring(langstrings)
          >>> print(multilangstring)  # Output: {'Hello'}@en, {'Bonjour'}@fr



   .. py:method:: from_setlangstring_to_string(arg)
      :staticmethod:


      Convert a SetLangString to a string.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: The string representation of the SetLangString.
      :rtype: str

      Examples:
          # Convert a SetLangString to a string:
          >>> setlangstring = SetLangString({"Hello", "Hi"}, "en")
          >>> string = Converter.from_setlangstring_to_string(setlangstring)
          >>> print(string)  # Output: {'Hello', 'Hi'}@en



   .. py:method:: from_setlangstring_to_strings(arg, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:


      Convert a SetLangString to a list of strings.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :param print_quotes: Whether to include quotes around the text in the output.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between text and language.
      :type separator: str
      :param print_lang: Whether to include the language in the output.
      :type print_lang: Optional[bool]
      :return: A list of string representations of the SetLangString.
      :rtype: list[str]

      Examples:
          # Convert a SetLangString to a list of strings with quotes and language:
          >>> setlangstring = SetLangString({"Hello", "Hi"}, "en")
          >>> strings = Converter.from_setlangstring_to_strings(setlangstring, print_quotes=True, separator="@")
          >>> for s in strings:
          >>>     print(s)  # Output: "Hello"@en
          >>>                #         "Hi"@en

          # Convert a SetLangString to a list of strings without quotes and language:
          >>> strings = Converter.from_setlangstring_to_strings(setlangstring, print_quotes=False, separator="@",
                                                                                                  print_lang=False)
          >>> for s in strings:
          >>>     print(s)  # Output: Hello
          >>>                #         Hi



   .. py:method:: from_setlangstrings_to_strings(arg, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:


      Convert a list of SetLangStrings to a list of strings.

      :param arg: List of SetLangStrings to be converted.
      :type arg: list[SetLangString]
      :param print_quotes: Whether to include quotes around the text in the output.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between text and language.
      :type separator: str
      :param print_lang: Whether to include the language in the output.
      :type print_lang: Optional[bool]
      :return: A list of string representations of the SetLangStrings.
      :rtype: list[str]

      Examples:
          # Convert a list of SetLangStrings to a list of strings with quotes and language:
          >>> setlangstrings = [SetLangString({"Hello"}, "en"), SetLangString({"Bonjour"}, "fr")]
          >>> strings = Converter.from_setlangstrings_to_strings(setlangstrings, print_quotes=True, separator="@")
          >>> for s in strings:
          >>>     print(s)  # Output: "Hello"@en
          >>>                #         "Bonjour"@fr

          # Convert a list of SetLangStrings to a list of strings without quotes and language:
          >>> strings = Converter.from_setlangstrings_to_strings(setlangstrings, print_quotes=False, separator="@",
                                                                                                  print_lang=False)
          >>> for s in strings:
          >>>     print(s)  # Output: Hello
          >>>                #         Bonjour



   .. py:method:: from_setlangstring_to_langstrings(arg)
      :staticmethod:


      Convert a SetLangString to a list of LangStrings.

      This method takes a SetLangString and converts it into a list of LangStrings, each containing one of the texts
      from the SetLangString and its associated language.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: A list of LangStrings, each corresponding to a text in the arg SetLangString.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type SetLangString.

      Examples:
          # Convert a SetLangString to a list of LangStrings:
          >>> setlangstring = SetLangString({"Hello", "Hi"}, "en")
          >>> langstrings = Converter.from_setlangstring_to_langstrings(setlangstring)
          >>> for ls in langstrings:
          >>>     print(ls)  # Output: "Hi"@en
          >>>                #         "Hello"@en

      Note:
          The order of elements in the output list is not guaranteed, as sets do not maintain order.



   .. py:method:: from_setlangstrings_to_langstrings(arg)
      :staticmethod:


      Convert a list of SetLangStrings to a list of LangStrings.

      This method merges a list of SetLangStrings into a single list of LangStrings. Each LangString in the output
      list corresponds to one of the texts in the SetLangStrings, retaining their associated languages.

      :param arg: The list of SetLangStrings to be converted.
      :type arg: list[SetLangString]
      :return: A list of LangStrings, each corresponding to a text in the SetLangStrings.
      :rtype: list[LangString]
      :raises TypeError: If the input types are incorrect.

      Examples:
          # Convert a list of SetLangStrings to a list of LangStrings:
          >>> setlangstrings = [SetLangString({"Hello"}, "en"), SetLangString({"Bonjour"}, "fr")]
          >>> langstrings = Converter.from_setlangstrings_to_langstrings(setlangstrings)
          >>> for ls in langstrings:
          >>>     print(ls)  # Output: "Hello"@en
          >>>                #         "Bonjour"@fr



   .. py:method:: from_setlangstring_to_multilangstring(arg)
      :staticmethod:


      Convert a SetLangString to a MultiLangString.

      This method creates a MultiLangString from a SetLangString. The resulting MultiLangString contains all texts
      from the SetLangString, associated with its language.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: A MultiLangString containing all texts from the arg SetLangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type SetLangString.

      Examples:
          # Convert a SetLangString to a MultiLangString:
          >>> setlangstring = SetLangString({"Hello", "Hi"}, "en")
          >>> multilangstring = Converter.from_setlangstring_to_multilangstring(setlangstring)
          >>> print(multilangstring)  # Output: {'Hello', 'Hi'}@en



   .. py:method:: from_setlangstrings_to_multilangstring(arg)
      :staticmethod:


      Convert a list of SetLangString objects to a MultiLangString object.

      If there are different casings for the same lang tag among the SetLangString objects in the input list,
      the casefolded version of the lang tag is used. If only a single case is used, that case is adopted.

      :param arg: List of SetLangString instances to be converted.
      :type arg: list[SetLangString]
      :return: A MultiLangString instance with aggregated texts under normalized language tags.
      :rtype: MultiLangString
      :raises TypeError: If the input types are incorrect.

      Examples:
          # Convert a list of SetLangStrings to a MultiLangString:
          >>> setlangstrings = [SetLangString({"Hello"}, "en"), SetLangString({"Bonjour"}, "fr")]
          >>> multilangstring = Converter.from_setlangstrings_to_multilangstring(setlangstrings)
          >>> print(multilangstring)  # Output: {'Hello'}@en, {'Bonjour'}@fr



   .. py:method:: from_multilangstring_to_string(arg)
      :staticmethod:


      Convert a MultiLangString to a string.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :return: The string representation of the MultiLangString.
      :rtype: str

      Examples:
          # Convert a MultiLangString to a string:
          >>> multilangstring = MultiLangString(mls_dict={"en": {"Hello", "Hi"}, "fr": {"Bonjour"}})
          >>> string = Converter.from_multilangstring_to_string(multilangstring)
          >>> print(string)  # Output: {'Hello', 'Hi'}@en, {'Bonjour'}@fr



   .. py:method:: from_multilangstring_to_strings(arg, langs = None, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:


      Convert a MultiLangString to a list of strings.

      The method sorts the output strings both by language and by text within each language.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :param langs: List of languages to include in the output. If None, all languages are included.
      :type langs: Optional[list[str]]
      :param print_quotes: Whether to include quotes around the text in the output.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between text and language.
      :type separator: str
      :param print_lang: Whether to include the language in the output.
      :type print_lang: Optional[bool]
      :return: A list of string representations of the MultiLangString.
      :rtype: list[str]

      Examples:
          # Convert a MultiLangString to a list of strings with quotes and language:
          >>> multilangstring = MultiLangString(mls_dict={"en": {"Hello", "Hi"}, "fr": {"Bonjour"}})
          >>> strings = Converter.from_multilangstring_to_strings(multilangstring, print_quotes=True, separator="@")
          >>> for s in strings:
          >>>     print(s)  # Output: "Bonjour"@fr
          >>>                #         "Hello"@en
          >>>                #         "Hi"@en

          # Convert a MultiLangString to a list of strings without quotes and language:
          >>> strings = Converter.from_multilangstring_to_strings(multilangstring, print_quotes=False, separator="@",
                                                                                                  print_lang=False)
          >>> for s in strings:
          >>>     print(s)  # Output: Bonjour
          >>>                #         Hello
          >>>                #         Hi

      Note:
          The output strings are sorted by language and by text within each language.



   .. py:method:: from_multilangstrings_to_strings(arg, languages = None, print_quotes = True, separator = '@', print_lang = True)
      :staticmethod:


      Convert a list of MultiLangStrings to a list of strings.

      The method sorts the output strings both by language and by text within each language.

      :param arg: List of MultiLangStrings to be converted.
      :type arg: list[MultiLangString]
      :param languages: List of languages to include in the output. If None, all languages are included.
      :type languages: Optional[list[str]]
      :param print_quotes: Whether to include quotes around the text in the output.
      :type print_quotes: bool
      :param separator: The separator to use between text and language.
      :type separator: str
      :param print_lang: Whether to include the language in the output.
      :type print_lang: bool
      :return: A list of string representations of the MultiLangStrings.
      :rtype: list[str]

      Examples:
          # Convert a list of MultiLangStrings to a list of strings with quotes and language:
          >>> mls1 = MultiLangString(mls_dict={"en": {"Hello"}, "fr": {"Bonjour"}})
          >>> mls2 = MultiLangString(mls_dict={"en": {"Hi"}, "fr": {"Salut"}})
          >>> strings = Converter.from_multilangstrings_to_strings([mls1, mls2], print_quotes=True, separator="@")
          >>> for s in strings:
          >>>     print(s)  # Output: "Bonjour"@fr
          >>>                #         "Hello"@en
          >>>                #         "Hi"@en
          >>>                #         "Salut"@fr

          # Convert a list of MultiLangStrings to a list of strings without quotes and language:
          >>> strings = Converter.from_multilangstrings_to_strings([mls1, mls2], print_quotes=False, separator="@",
                                                                                                  print_lang=False)
          >>> for s in strings:
          >>>     print(s)  # Output: Bonjour
          >>>                #         Hello
          >>>                #         Hi
          >>>                #         Salut

      Note:
          The output strings are sorted by language and by text within each language.



   .. py:method:: from_multilangstring_to_langstrings(arg, languages = None)
      :staticmethod:


      Convert a MultiLangString to a list of LangStrings.

      This method takes a MultiLangString and converts it into a list of LangStrings, each representing one of the
      texts in the MultiLangString along with its associated language.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :param languages: List of languages to include in the output. If None, all languages are included.
      :type languages: Optional[list[str]]
      :return: A list of LangStrings, each corresponding to a text in the arg MultiLangString.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type MultiLangString.

      Examples:
          # Convert a MultiLangString to a list of LangStrings:
          >>> multilangstring = MultiLangString(mls_dict={"en": {"Hi", "Hello"}, "fr": {"Bonjour"}})
          >>> langstrings = Converter.from_multilangstring_to_langstrings(multilangstring)
          >>> for ls in langstrings:
          >>>     print(ls)  # Output: "Hi"@en
          >>>                #         "Hello"@en
          >>>                #         "Bonjour"@fr

      Note:
          The output strings are in the order of insertion within each language.



   .. py:method:: from_multilangstrings_to_langstrings(arg, languages = None)
      :staticmethod:


      Convert a list of MultiLangStrings to a list of LangStrings.

      This method takes a list of MultiLangStrings and converts them into a list of LangStrings,
      each representing one of the texts in the MultiLangStrings along with its associated language.

      :param arg: List of MultiLangStrings to be converted.
      :type arg: list[MultiLangString]
      :param languages: List of languages to include in the output. If None, all languages are included.
      :type languages: Optional[list[str]]
      :return: A list of LangStrings, each corresponding to a text in the MultiLangStrings.
      :rtype: list[LangString]
      :raises TypeError: If any of the arguments are not of the expected type.

      Examples:
          # Convert a list of MultiLangStrings to a list of LangStrings:
          >>> mls1 = MultiLangString(mls_dict={"en": {"Hello", "Hi"}, "fr": {"Bonjour"}})
          >>> mls2 = MultiLangString(mls_dict={"en": {"Hey"}, "fr": {"Salut"}})
          >>> langstrings = Converter.from_multilangstrings_to_langstrings([mls1, mls2])
          >>> for ls in langstrings:
          >>>     print(ls)  # Output could vary as texts within each language may not be sorted. Possible outputs:
          >>>                #         "Hello"@en
          >>>                #         "Hi"@en
          >>>                #         "Hey"@en
          >>>                #         "Bonjour"@fr
          >>>                #         "Salut"@fr



   .. py:method:: from_multilangstring_to_setlangstrings(arg, languages = None)
      :staticmethod:


      Convert a MultiLangString to a list of SetLangStrings.

      This method creates a list of SetLangStrings from a MultiLangString. Each SetLangString in the list contains
      texts of a single language from the MultiLangString.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :param languages: List of languages to include in the output. If None, all languages are included.
      :type languages: Optional[list[str]]
      :return: A list of SetLangStrings, each containing texts of a single language from the arg MultiLangString.
      :rtype: list[SetLangString]
      :raises TypeError: If the arg is not of type MultiLangString.

      Examples:
          # Convert a MultiLangString to a list of SetLangStrings:
          >>> multilangstring = MultiLangString(mls_dict={"en": {"Hello", "Hi"}, "fr": {"Bonjour", "Salut"}})
          >>> setlangstrings = Converter.from_multilangstring_to_setlangstrings(multilangstring)
          >>> for sls in setlangstrings:
          >>>     print(sls)  # Output: {'Hello', 'Hi'}@en
          >>>                #         {'Bonjour', 'Salut'}@fr

      Note:
          The texts within each language are sorted.



   .. py:method:: from_multilangstrings_to_setlangstrings(arg, languages = None)
      :staticmethod:


      Convert a list of MultiLangString objects to a list of SetLangString objects.

      This method creates a list of SetLangStrings from multiple MultiLangStrings. Each SetLangString in the list
      contains texts of a single language from the merged MultiLangStrings.

      :param arg: List of MultiLangStrings to be converted.
      :type arg: list[MultiLangString]
      :param languages: List of languages to include in the output. If None, all languages are included.
      :type languages: Optional[list[str]]
      :return: A list of SetLangStrings, each containing texts of a single language from the merged MultiLangStrings.
      :rtype: list[SetLangString]
      :raises TypeError: If any of the arguments are not of the expected type.

      Examples:
          # Convert a list of MultiLangStrings to a list of SetLangStrings:
          >>> mls1 = MultiLangString(mls_dict={"en": {"Hello"}, "fr": {"Bonjour"}})
          >>> mls2 = MultiLangString(mls_dict={"en": {"Hi"}, "fr": {"Salut"}})
          >>> setlangstrings = Converter.from_multilangstrings_to_setlangstrings([mls1, mls2])
          >>> for sls in setlangstrings:
          >>>     print(sls)  # Output: {'Hello', 'Hi'}@en
          >>>                #         {'Bonjour', 'Salut'}@fr

      Note:
          The texts within each language are sorted.



.. py:class:: GlobalFlag(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enumeration for global control flags.

   This enum defines various flags that can be used to configure the behavior of all classes in the multilingual text
   handling system. These flags provide a flexible way to enforce constraints and manage behavior consistently across
   different classes.

   :cvar DEFINED_LANG: Ensures that a non-empty string is used for the 'lang' field of all classes.
   :vartype DEFINED_LANG: Enum
   :cvar DEFINED_TEXT: Ensures that a non-empty string is used for the 'text' field of all classes.
   :vartype DEFINED_TEXT: Enum
   :cvar ENFORCE_EXTRA_DEPEND: Enforces additional dependencies required by all classes.
   :vartype ENFORCE_EXTRA_DEPEND: Enum
   :cvar LOWERCASE_LANG: Converts all language codes to lowercase.
   :vartype LOWERCASE_LANG: Enum
   :cvar METHODS_MATCH_TYPES: Ensures that methods match the expected types for arguments and return values.
   :vartype METHODS_MATCH_TYPES: Enum
   :cvar PRINT_WITH_LANG: Includes language tags when printing multilingual text.
   :vartype PRINT_WITH_LANG: Enum
   :cvar PRINT_WITH_QUOTES: Wraps text entries in quotes when printing multilingual text.
   :vartype PRINT_WITH_QUOTES: Enum
   :cvar STRIP_LANG: Removes leading and trailing whitespace from language codes.
   :vartype STRIP_LANG: Enum
   :cvar STRIP_TEXT: Removes leading and trailing whitespace from text entries.
   :vartype STRIP_TEXT: Enum
   :cvar VALID_LANG: Ensures that a valid language code string is used for the 'lang' field of all classes.
   :vartype VALID_LANG: Enum


   .. py:attribute:: DEFINED_LANG


   .. py:attribute:: DEFINED_TEXT


   .. py:attribute:: ENFORCE_EXTRA_DEPEND


   .. py:attribute:: LOWERCASE_LANG


   .. py:attribute:: METHODS_MATCH_TYPES


   .. py:attribute:: PRINT_WITH_LANG


   .. py:attribute:: PRINT_WITH_QUOTES


   .. py:attribute:: STRIP_LANG


   .. py:attribute:: STRIP_TEXT


   .. py:attribute:: VALID_LANG


.. py:class:: LangStringFlag(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class. These flags
   provide a flexible way to enforce constraints and manage the behavior of multilingual text handling within the
   LangString class.

   :cvar DEFINED_LANG: Ensures that a non-empty string is used for the 'lang' field of a LangString.
   :vartype DEFINED_LANG: Enum
   :cvar DEFINED_TEXT: Ensures that a non-empty string is used for the 'text' field of a LangString.
   :vartype DEFINED_TEXT: Enum
   :cvar LOWERCASE_LANG: Converts all language codes to lowercase within a LangString.
   :vartype LOWERCASE_LANG: Enum
   :cvar METHODS_MATCH_TYPES: Ensures that methods match the expected types for arguments and return values within
                              a LangString.
   :vartype METHODS_MATCH_TYPES: Enum
   :cvar PRINT_WITH_LANG: Includes language tags when printing a LangString.
   :vartype PRINT_WITH_LANG: Enum
   :cvar PRINT_WITH_QUOTES: Wraps text entries in quotes when printing a LangString.
   :vartype PRINT_WITH_QUOTES: Enum
   :cvar STRIP_LANG: Removes leading and trailing whitespace from language codes within a LangString.
   :vartype STRIP_LANG: Enum
   :cvar STRIP_TEXT: Removes leading and trailing whitespace from text entries within a LangString.
   :vartype STRIP_TEXT: Enum
   :cvar VALID_LANG: Ensures that a valid language code string is used for the 'lang' field of a LangString.
   :vartype VALID_LANG: Enum


   .. py:attribute:: DEFINED_LANG


   .. py:attribute:: DEFINED_TEXT


   .. py:attribute:: LOWERCASE_LANG


   .. py:attribute:: METHODS_MATCH_TYPES


   .. py:attribute:: PRINT_WITH_LANG


   .. py:attribute:: PRINT_WITH_QUOTES


   .. py:attribute:: STRIP_LANG


   .. py:attribute:: STRIP_TEXT


   .. py:attribute:: VALID_LANG


.. py:class:: MultiLangStringFlag(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enumeration for MultiLangString control flags.

   This enum defines various flags that can be used to configure the behavior of the MultiLangString class. These flags
   provide a flexible way to enforce constraints and manage the behavior of multilingual text handling within the
   MultiLangString class.

   :cvar DEFINED_LANG: Ensures that a non-empty string is used for the 'lang' field of a MultiLangString.
   :vartype DEFINED_LANG: Enum
   :cvar DEFINED_TEXT: Ensures that a non-empty string is used for the 'text' field of a MultiLangString.
   :vartype DEFINED_TEXT: Enum
   :cvar LOWERCASE_LANG: Converts all language codes to lowercase within a MultiLangString.
   :vartype LOWERCASE_LANG: Enum
   :cvar PRINT_WITH_LANG: Includes language tags when printing a MultiLangString.
   :vartype PRINT_WITH_LANG: Enum
   :cvar PRINT_WITH_QUOTES: Wraps text entries in quotes when printing a MultiLangString.
   :vartype PRINT_WITH_QUOTES: Enum
   :cvar STRIP_LANG: Removes leading and trailing whitespace from language codes within a MultiLangString.
   :vartype STRIP_LANG: Enum
   :cvar STRIP_TEXT: Removes leading and trailing whitespace from text entries within a MultiLangString.
   :vartype STRIP_TEXT: Enum
   :cvar VALID_LANG: Ensures that a valid language code string is used for the 'lang' field of a MultiLangString.
   :vartype VALID_LANG: Enum


   .. py:attribute:: DEFINED_LANG


   .. py:attribute:: DEFINED_TEXT


   .. py:attribute:: LOWERCASE_LANG


   .. py:attribute:: PRINT_WITH_LANG


   .. py:attribute:: PRINT_WITH_QUOTES


   .. py:attribute:: STRIP_LANG


   .. py:attribute:: STRIP_TEXT


   .. py:attribute:: VALID_LANG


.. py:class:: SetLangStringFlag(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enumeration for SetLangString control flags.

   This enum defines various flags that can be used to configure the behavior of the SetLangString class. These flags
   provide a flexible way to enforce constraints and manage the behavior of multilingual text handling within the
   SetLangString class.

   :cvar DEFINED_LANG: Ensures that a non-empty string is used for the 'lang' field of a SetLangString.
   :vartype DEFINED_LANG: Enum
   :cvar DEFINED_TEXT: Ensures that a non-empty string is used for the 'text' field of a SetLangString.
   :vartype DEFINED_TEXT: Enum
   :cvar LOWERCASE_LANG: Converts all language codes to lowercase within a SetLangString.
   :vartype LOWERCASE_LANG: Enum
   :cvar METHODS_MATCH_TYPES: Ensures that methods match the expected types for arguments and return values within
                              a SetLangString.
   :vartype METHODS_MATCH_TYPES: Enum
   :cvar PRINT_WITH_LANG: Includes language tags when printing a SetLangString.
   :vartype PRINT_WITH_LANG: Enum
   :cvar PRINT_WITH_QUOTES: Wraps text entries in quotes when printing a SetLangString.
   :vartype PRINT_WITH_QUOTES: Enum
   :cvar STRIP_LANG: Removes leading and trailing whitespace from language codes within a SetLangString.
   :vartype STRIP_LANG: Enum
   :cvar STRIP_TEXT: Removes leading and trailing whitespace from text entries within a SetLangString.
   :vartype STRIP_TEXT: Enum
   :cvar VALID_LANG: Ensures that a valid language code string is used for the 'lang' field of a SetLangString.
   :vartype VALID_LANG: Enum


   .. py:attribute:: DEFINED_LANG


   .. py:attribute:: DEFINED_TEXT


   .. py:attribute:: LOWERCASE_LANG


   .. py:attribute:: METHODS_MATCH_TYPES


   .. py:attribute:: PRINT_WITH_LANG


   .. py:attribute:: PRINT_WITH_QUOTES


   .. py:attribute:: STRIP_LANG


   .. py:attribute:: STRIP_TEXT


   .. py:attribute:: VALID_LANG


.. py:class:: LangString(text = '', lang = '')

   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the Controller class, which can enforce non-empty text, valid language tags, and other constraints.

   Many standard string methods are overridden to return LangString objects, allowing seamless integration and
   extended functionality. This design ensures that users can work with LangString instances similarly to regular
   strings.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text.
   :vartype lang: str
   :raises ValueError: If control flags enforce non-empty text and the text is empty.
   :raises TypeError: If the types of parameters are incorrect based on validation.


   .. py:attribute:: _text
      :type:  str
      :value: ''



   .. py:attribute:: _lang
      :type:  str
      :value: ''



   .. py:property:: text
      :type: str

      Get the text string.

      :return: The text string.
      :rtype: str



   .. py:property:: lang
      :type: str

      Get the language tag.

      :return: The language tag.
      :rtype: str



   .. py:method:: capitalize()

      Return a copy of the LangString with its first character capitalized and the rest lowercased.

      This method mimics the behavior of the standard string's capitalize method but returns a LangString object.

      :return: A new LangString with the first character capitalized.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello, world!", "en")
      >>> capitalized_lang_str = lang_str.capitalize()
      >>> print(capitalized_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: casefold()

      Return a casefolded copy of the LangString. Casefolding is a more aggressive version of lowercasing.

      This method mimics the behavior of the standard string's casefold method but returns a LangString object.

      :return: A new LangString that is casefolded.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, WORLD!", "en")
      >>> casefolded_lang_str = lang_str.casefold()
      >>> print(casefolded_lang_str)  # Output: "hello, world!"@en



   .. py:method:: center(width, fillchar = ' ')

      Return a centered LangString of length width.

      Padding is done using the specified fill character (default is a space).

      This method mimics the behavior of the standard string's center method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :param fillchar: The character to fill the padding with.
      :type fillchar: str
      :return: A new LangString centered with padding.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> centered_lang_str = lang_str.center(11, "*")
      >>> print(centered_lang_str)  # Output: "***hello***"@en



   .. py:method:: count(sub, start = 0, end = None)

      Return the number of non-overlapping occurrences of substring sub in the LangString.

      This method mimics the behavior of the standard string's count method.

      :param sub: The substring to count.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The number of occurrences of the substring.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello, hello, hello!", "en")
      >>> count_hello = lang_str.count("hello")
      >>> print(count_hello)  # Output: 3



   .. py:method:: endswith(suffix, start = 0, end = None)

      Return True if the LangString ends with the specified suffix, otherwise return False.

      This method mimics the behavior of the standard string's endswith method.

      :param suffix: The suffix to check.
      :type suffix: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: True if the LangString ends with the suffix, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("hello, world!", "en")
      >>> ends_with_world = lang_str.endswith("world!")
      >>> print(ends_with_world)  # Output: True



   .. py:method:: expandtabs(tabsize = 8)

      Return a copy of the LangString where all tab characters are expanded using spaces.

      This method mimics the behavior of the standard string's expandtabs method but returns a LangString object.

      :param tabsize: The number of spaces to use for each tab character.
      :type tabsize: int
      :return: A new LangString with tabs expanded.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello\tworld", "en")
      >>> expanded_lang_str = lang_str.expandtabs(4)
      >>> print(expanded_lang_str)  # Output: "hello   world"@en



   .. py:method:: find(sub, start = 0, end = None)

      Return the lowest index in the LangString where substring sub is found.

      This method mimics the behavior of the standard string's find method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The lowest index where the substring is found, or -1 if not found.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello, world", "en")
      >>> index = lang_str.find("world")
      >>> print(index)  # Output: 7



   .. py:method:: format(*args, **kwargs)

      Perform a string formatting operation on the LangString.

      This method mimics the behavior of the standard string's format method but returns a LangString object.

      :param args: Positional arguments for formatting.
      :type args: Any
      :param kwargs: Keyword arguments for formatting.
      :type kwargs: Any
      :return: A new LangString with the formatted text.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, {}!", "en")
      >>> formatted_lang_str = lang_str.format("world")
      >>> print(formatted_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: format_map(mapping)

      Perform a string formatting operation using a dictionary.

      This method mimics the behavior of the standard string's format_map method but returns a LangString object.

      :param mapping: A dictionary for formatting.
      :type mapping: dict
      :return: A new LangString with the formatted text.
      :rtype: LangString
      :raises TypeError: If the provided mapping is not a dictionary.

      :Example:

      >>> lang_str = LangString("Hello, {name}!", "en")
      >>> formatted_lang_str = lang_str.format_map({"name": "world"})
      >>> print(formatted_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: index(sub, start = 0, end = None)

      Return the lowest index in the LangString where substring sub is found.

      This method mimics the behavior of the standard string's index method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The lowest index where the substring is found.
      :rtype: int
      :raises ValueError: If the substring is not found.

      :Example:

      >>> lang_str = LangString("hello, world", "en")
      >>> index = lang_str.index("world")
      >>> print(index)  # Output: 7



   .. py:method:: isalnum()

      Return True if all characters in the LangString are alphanumeric and there is at least one character.

      This method mimics the behavior of the standard string's isalnum method.

      :return: True if the LangString is alphanumeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello123", "en")
      >>> is_alnum = lang_str.isalnum()
      >>> print(is_alnum)  # Output: True

      >>> lang_str = LangString("Hello 123", "en")
      >>> is_alnum = lang_str.isalnum()
      >>> print(is_alnum)  # Output: False



   .. py:method:: isalpha()

      Return True if all characters in the LangString are alphabetic and there is at least one character.

      This method mimics the behavior of the standard string's isalpha method.

      :return: True if the LangString is alphabetic, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> is_alpha = lang_str.isalpha()
      >>> print(is_alpha)  # Output: True

      >>> lang_str = LangString("Hello123", "en")
      >>> is_alpha = lang_str.isalpha()
      >>> print(is_alpha)  # Output: False



   .. py:method:: isascii()

      Return True if all characters in the LangString are ASCII characters.

      This method mimics the behavior of the standard string's isascii method.

      :return: True if the LangString is ASCII, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> is_ascii = lang_str.isascii()
      >>> print(is_ascii)  # Output: True

      >>> lang_str = LangString("Héllo", "en")
      >>> is_ascii = lang_str.isascii()
      >>> print(is_ascii)  # Output: False



   .. py:method:: isdecimal()

      Return True if all characters in the LangString are decimal characters and there is at least one character.

      This method mimics the behavior of the standard string's isdecimal method.

      :return: True if the LangString is decimal, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_decimal = lang_str.isdecimal()
      >>> print(is_decimal)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_decimal = lang_str.isdecimal()
      >>> print(is_decimal)  # Output: False



   .. py:method:: isdigit()

      Return True if all characters in the LangString are digits and there is at least one character.

      This method mimics the behavior of the standard string's isdigit method.

      :return: True if the LangString is numeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_digit = lang_str.isdigit()
      >>> print(is_digit)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_digit = lang_str.isdigit()
      >>> print(is_digit)  # Output: False



   .. py:method:: isidentifier()

      Return True if the LangString is a valid identifier according to Python language definition.

      This method mimics the behavior of the standard string's isidentifier method.

      :return: True if the LangString is a valid identifier, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("variable_name", "en")
      >>> is_identifier = lang_str.isidentifier()
      >>> print(is_identifier)  # Output: True

      >>> lang_str = LangString("123variable", "en")
      >>> is_identifier = lang_str.isidentifier()
      >>> print(is_identifier)  # Output: False



   .. py:method:: islower()

      Return True if all cased characters in the LangString are lowercase and there is at least one cased character.

      This method mimics the behavior of the standard string's islower method.

      :return: True if the LangString is in lowercase, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> is_lower = lang_str.islower()
      >>> print(is_lower)  # Output: True

      >>> lang_str = LangString("Hello", "en")
      >>> is_lower = lang_str.islower()
      >>> print(is_lower)  # Output: False



   .. py:method:: isnumeric()

      Return True if all characters in the LangString are numeric characters and there is at least one character.

      This method mimics the behavior of the standard string's isnumeric method.

      :return: True if the LangString is numeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_numeric = lang_str.isnumeric()
      >>> print(is_numeric)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_numeric = lang_str.isnumeric()
      >>> print(is_numeric)  # Output: False



   .. py:method:: isprintable()

      Return True if all characters in the LangString are printable or the LangString is empty.

      This method mimics the behavior of the standard string's isprintable method.

      :return: True if the LangString is printable, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> is_printable = lang_str.isprintable()
      >>> print(is_printable)  # Output: True

      >>> lang_str = LangString("Hello,\tworld!", "en")
      >>> is_printable = lang_str.isprintable()
      >>> print(is_printable)  # Output: False



   .. py:method:: isspace()

      Return True if there are only whitespace characters in the LangString and there is at least one character.

      This method mimics the behavior of the standard string's isspace method.

      :return: True if the LangString is whitespace, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("   ", "en")
      >>> is_space = lang_str.isspace()
      >>> print(is_space)  # Output: True

      >>> lang_str = LangString("Hello, world!", "en")
      >>> is_space = lang_str.isspace()
      >>> print(is_space)  # Output: False



   .. py:method:: istitle()

      Return True if the LangString is a titlecased string and there is at least one character.

      This method mimics the behavior of the standard string's istitle method.

      :return: True if the LangString is titlecased, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> is_title = lang_str.istitle()
      >>> print(is_title)  # Output: True

      >>> lang_str = LangString("hello, world!", "en")
      >>> is_title = lang_str.istitle()
      >>> print(is_title)  # Output: False



   .. py:method:: isupper()

      Return True if all cased characters in the LangString are uppercase and there is at least one cased character.

      This method mimics the behavior of the standard string's isupper method.

      :return: True if the LangString is in uppercase, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("HELLO, WORLD!", "en")
      >>> is_upper = lang_str.isupper()
      >>> print(is_upper)  # Output: True

      >>> lang_str = LangString("Hello, World!", "en")
      >>> is_upper = lang_str.isupper()
      >>> print(is_upper)  # Output: False



   .. py:method:: join(iterable)

      Join an iterable of strings with the LangString's text.

      This method mimics the behavior of the standard string's join method but returns a LangString object.

      :param iterable: An iterable of strings to be joined.
      :type iterable: Iterable[str]
      :return: A new LangString with the joined text.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString(", ", "en")
      >>> joined_lang_str = lang_str.join(["Hello", "world"])
      >>> print(joined_lang_str)  # Output: "Hello, world"@en



   .. py:method:: ljust(width, fillchar = ' ')

      Return a left-justified LangString of length width.

      Padding is done using the specified fill character (default is a space).

      This method mimics the behavior of the standard string's ljust method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :param fillchar: The character to fill the padding with.
      :type fillchar: str
      :return: A new LangString left-justified with padding.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> left_justified_lang_str = lang_str.ljust(10, "*")
      >>> print(left_justified_lang_str)  # Output: "hello*****"@en



   .. py:method:: lower()

      Return a copy of the LangString with all the cased characters converted to lowercase.

      This method mimics the behavior of the standard string's lower method but returns a LangString object.

      :return: A new LangString with all characters in lowercase.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("HELLO, WORLD!", "en")
      >>> lower_lang_str = lang_str.lower()
      >>> print(lower_lang_str)  # Output: "hello, world!"@en



   .. py:method:: lstrip(chars = None)

      Return a copy of the LangString with leading characters removed.

      This method mimics the behavior of the standard string's lstrip method but returns a LangString object.

      :param chars: A string specifying the set of characters to be removed.
      If None, whitespace characters are removed.
      :type chars: Optional[str]
      :return: A new LangString with leading characters removed.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("   Hello, world!", "en")
      >>> stripped_lang_str = lang_str.lstrip()
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en

      >>> lang_str = LangString("...Hello, world!", "en")
      >>> stripped_lang_str = lang_str.lstrip(".")
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: partition(sep)

      Split the LangString at the first occurrence of sep, and return a 3-tuple containing the part         before the separator, the separator itself, and the part after the separator.

      This method mimics the behavior of the standard string's partition method but returns LangString objects.

      :param sep: The separator to split the LangString.
      :type sep: str
      :return: A 3-tuple containing the part before the separator, the separator itself,
               and the part after the separator.
      :rtype: tuple[LangString, LangString, LangString]

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> before, sep, after = lang_str.partition(", ")
      >>> print(before)  # Output: "Hello"@en
      >>> print(sep)     # Output: ", "@en
      >>> print(after)   # Output: "world!"@en



   .. py:method:: replace(old, new, count = -1)

      Return a copy of the LangString with all occurrences of substring old replaced by new.

      This method mimics the behavior of the standard string's replace method but returns a LangString object.

      :param old: The substring to be replaced.
      :type old: str
      :param new: The substring to replace with.
      :type new: str
      :param count: The maximum number of occurrences to replace. If -1, all occurrences are replaced.
      :type count: int
      :return: A new LangString with the replacements.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> replaced_lang_str = lang_str.replace("world", "Python")
      >>> print(replaced_lang_str)  # Output: "Hello, Python!"@en

      >>> lang_str = LangString("abababab", "en")
      >>> replaced_lang_str = lang_str.replace("ab", "cd", 2)
      >>> print(replaced_lang_str)  # Output: "cdcdabab"@en



   .. py:method:: removeprefix(prefix)

      Remove the specified prefix from the LangString's text.

      If the text starts with the prefix string, return a new LangString with the prefix string removed.
      Otherwise, return a copy of the original LangString.

      This method mimics the behavior of the standard string's removeprefix method but returns a LangString object.

      :param prefix: The prefix to remove from the text.
      :type prefix: str
      :return: A new LangString with the prefix removed, or the original LangString if the prefix is not found.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> removed_prefix_lang_str = lang_str.removeprefix("Hello, ")
      >>> print(removed_prefix_lang_str)  # Output: "world!"@en

      >>> lang_str = LangString("Hello, world!", "en")
      >>> removed_prefix_lang_str = lang_str.removeprefix("Goodbye, ")
      >>> print(removed_prefix_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: removesuffix(suffix)

      Remove the specified suffix from the LangString's text.

      If the text ends with the suffix string, return a new LangString with the suffix string removed.
      Otherwise, return a copy of the original LangString.

      This method mimics the behavior of the standard string's removesuffix method but returns a LangString object.

      :param suffix: The suffix to remove from the text.
      :type suffix: str
      :return: A new LangString with the suffix removed, or the original LangString if the suffix is not found.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> removed_suffix_lang_str = lang_str.removesuffix(", world!")
      >>> print(removed_suffix_lang_str)  # Output: "Hello"@en

      >>> lang_str = LangString("Hello, world!", "en")
      >>> removed_suffix_lang_str = lang_str.removesuffix("planet")
      >>> print(removed_suffix_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: rfind(sub, start = 0, end = None)

      Return the highest index in the LangString where substring sub is found, such that sub is contained within         [start, end].

      Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is
      not found.

      This method mimics the behavior of the standard string's rfind method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The highest index where the substring is found, or -1 if not found.
      :rtype: int

      :Example:

      >>> lang_str = LangString("Hello, world! Hello, universe!", "en")
      >>> index = lang_str.rfind("Hello")
      >>> print(index)  # Output: 14



   .. py:method:: rindex(sub, start = 0, end = None)

      Return the highest index in the LangString where substring sub is found, such that sub is contained within         [start, end].

      Optional arguments start and end are interpreted as in slice notation. Raises ValueError when
      the substring is not found.

      This method mimics the behavior of the standard string's rindex method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The highest index where the substring is found.
      :rtype: int
      :raises ValueError: If the substring is not found.

      :Example:

      >>> lang_str = LangString("Hello, world! Hello, universe!", "en")
      >>> index = lang_str.rindex("Hello")
      >>> print(index)  # Output: 14

      >>> lang_str = LangString("Hello, world!", "en")
      >>> index = lang_str.rindex("Hi")
      >>> print(index)  # Output: ValueError



   .. py:method:: rjust(width, fillchar = ' ')

      Return a right-justified LangString of length width.

      Padding is done using the specified fill character (default is a space).

      This method mimics the behavior of the standard string's rjust method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :param fillchar: The character to fill the padding with.
      :type fillchar: str
      :return: A new LangString right-justified with padding.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> right_justified_lang_str = lang_str.rjust(10, "*")
      >>> print(right_justified_lang_str)  # Output: "*****hello"@en



   .. py:method:: rpartition(sep)

      Split the LangString at the last occurrence of sep, and return a 3-tuple containing the         part before the separator, the separator itself, and the part after the separator.

      This method mimics the behavior of the standard string's rpartition method but returns LangString objects.

      :param sep: The separator to split the LangString.
      :type sep: str
      :return: A 3-tuple containing the part before the separator, the separator itself,
               and the part after the separator.
      :rtype: tuple[LangString, LangString, LangString]

      :Example:

      >>> lang_str = LangString("Hello, world! Hello, universe!", "en")
      >>> before, sep, after = lang_str.rpartition("Hello")
      >>> print(before)  # Output: "Hello, world! "@en
      >>> print(sep)     # Output: "Hello"@en
      >>> print(after)   # Output: ", universe!"@en



   .. py:method:: rsplit(sep = None, maxsplit = -1)

      Return a list of the words in the LangString, using sep as the delimiter string.

      The list is split from the right starting from the end of the string.

      This method mimics the behavior of the standard string's rsplit method but returns a list of LangString objects.

      :param sep: The delimiter string. If None, any whitespace string is a separator.
      :type sep: Optional[str]
      :param maxsplit: Maximum number of splits. If -1, there is no limit.
      :type maxsplit: int
      :return: A list of LangString objects.
      :rtype: list[LangString]

      :Example:

      >>> lang_str = LangString("one two three", "en")
      >>> split_lang_str = lang_str.rsplit()
      >>> for part in split_lang_str:
      ...     print(part)
      ...
      >>> # Output: "one"@en
      >>> #         "two"@en
      >>> #         "three"@en

      >>> lang_str = LangString("one,two,three", "en")
      >>> split_lang_str = lang_str.rsplit(",", 1)
      >>> for part in split_lang_str:
      ...     print(part)
      ...
      >>> # Output: "one,two"@en
      >>> #         "three"@en



   .. py:method:: rstrip(chars = None)

      Return a copy of the LangString with trailing characters removed.

      This method mimics the behavior of the standard string's rstrip method but returns a LangString object.

      :param chars: A string specifying the set of characters to be removed.
                    If None, whitespace characters are removed.
      :type chars: Optional[str]
      :return: A new LangString with trailing characters removed.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, world!   ", "en")
      >>> stripped_lang_str = lang_str.rstrip()
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en

      >>> lang_str = LangString("Hello, world!!!", "en")
      >>> stripped_lang_str = lang_str.rstrip("!")
      >>> print(stripped_lang_str)  # Output: "Hello, world"@en



   .. py:method:: split(sep = None, maxsplit = -1)

      Return a list of the words in the LangString, using sep as the delimiter string.

      This method mimics the behavior of the standard string's split method but returns a list of LangString objects.

      :param sep: The delimiter string. If None, any whitespace string is a separator.
      :type sep: Optional[str]
      :param maxsplit: Maximum number of splits. If -1, there is no limit.
      :type maxsplit: int
      :return: A list of LangString objects.
      :rtype: list[LangString]

      :Example:

      >>> lang_str = LangString("one two three", "en")
      >>> split_lang_str = lang_str.split()
      >>> for part in split_lang_str:
      ...     print(part)
      ...
      >>> # Output: "one"@en
      >>> #         "two"@en
      >>> #         "three"@en

      >>> lang_str = LangString("one,two,three", "en")
      >>> split_lang_str = lang_str.split(",")
      >>> for part in split_lang_str:
      ...     print(part)
      ...
      >>> # Output: "one"@en
      >>> #         "two"@en
      >>> #         "three"@en



   .. py:method:: splitlines(keepends = False)

      Return a list of the lines in the LangString, breaking at line boundaries.

      This method mimics the behavior of the standard string's splitlines method but returns
      a list of LangString objects.

      :param keepends: If True, line breaks are included in the resulting list.
      :type keepends: bool
      :return: A list of LangString objects.
      :rtype: list[LangString]

      :Example:

      >>> lang_str = LangString("Hello\\nworld", "en") # For the test, remove one escape char before the line break.
      >>> split_lang_str = lang_str.splitlines()
      >>> print(split_lang_str)
      # Output:
      # [LangString(text='Hello', lang='en'), LangString(text='world', lang='en')]

      >>> lang_str = LangString("Hello\\nworld", "en") # For the test, remove one escape char before the line break.
      >>> split_lang_str = lang_str.splitlines(True)
      >>> print(split_lang_str)
      # Output:
      # [LangString(text='Hello\n', lang='en'), LangString(text='world', lang='en')]



   .. py:method:: startswith(prefix, start = 0, end = None)

      Return True if the LangString starts with the specified prefix, otherwise return False.

      This method mimics the behavior of the standard string's startswith method.

      :param prefix: The prefix to check.
      :type prefix: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: True if the LangString starts with the prefix, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> starts_with_hello = lang_str.startswith("Hello")
      >>> print(starts_with_hello)  # Output: True

      >>> lang_str = LangString("Hello, world!", "en")
      >>> starts_with_hello = lang_str.startswith("world")
      >>> print(starts_with_hello)  # Output: False



   .. py:method:: strip(chars = None)

      Return a copy of the LangString with leading and trailing characters removed.

      This method mimics the behavior of the standard string's strip method but returns a LangString object.

      :param chars: A string specifying the set of characters to be removed.
                    If None, whitespace characters are removed.
      :type chars: Optional[str]
      :return: A new LangString with leading and trailing characters removed.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("   Hello, world!   ", "en")
      >>> stripped_lang_str = lang_str.strip()
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en

      >>> lang_str = LangString("***Hello, world!***", "en")
      >>> stripped_lang_str = lang_str.strip("*")
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: swapcase()

      Return a copy of the LangString with uppercase characters converted to lowercase and vice versa.

      This method mimics the behavior of the standard string's swapcase method but returns a LangString object.

      :return: A new LangString with swapped case.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, WORLD!", "en")
      >>> swapcase_lang_str = lang_str.swapcase()
      >>> print(swapcase_lang_str)  # Output: "hELLO, world!"@en



   .. py:method:: title()

      Return a titlecased version of the LangString where words start with an uppercase character and the remaining         characters are lowercase.

      This method mimics the behavior of the standard string's title method but returns a LangString object.

      :return: A new LangString that is titlecased.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello world", "en")
      >>> title_lang_str = lang_str.title()
      >>> print(title_lang_str)  # Output: "Hello World"@en



   .. py:method:: translate(table)

      Return a copy of the LangString in which each character has been mapped through the given translation table.

      This method mimics the behavior of the standard string's translate method but returns a LangString object.

      :param table: A translation table mapping Unicode ordinals to Unicode ordinals, strings, or None.
      :type table: dict[int, str]
      :return: A new LangString with the characters translated.
      :rtype: LangString

      :Example:

      >>> translation_table = str.maketrans("aeiou", "12345")
      >>> lang_str = LangString("hello world", "en")
      >>> translated_lang_str = lang_str.translate(translation_table)
      >>> print(translated_lang_str) # Output: "h2ll4 w4rld"@en



   .. py:method:: upper()

      Return a copy of the LangString with all the characters converted to uppercase.

      This method mimics the behavior of the standard string's upper method but returns a LangString object.

      :return: A new LangString with all characters in uppercase.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello world", "en")
      >>> upper_lang_str = lang_str.upper()
      >>> print(upper_lang_str)  # Output: "HELLO WORLD"@en



   .. py:method:: zfill(width)

      Return a copy of the LangString left filled with ASCII '0' digits to make a string of length width.

      This method mimics the behavior of the standard string's zfill method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :return: A new LangString left filled with '0' digits.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("42", "en")
      >>> zfilled_lang_str = lang_str.zfill(5)
      >>> print(zfilled_lang_str)  # Output: "00042"@en



   .. py:method:: to_string(print_quotes = None, separator = '@', print_lang = None)

      Return a string representation of the LangString with options for including quotes and language tag.

      :param print_quotes: If True, wrap the text in quotes. If None, use the default setting from the Controller.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between the text and language tag.
      :type separator: str
      :param print_lang: If True, include the language tag. If None, use the default setting from the Controller.
      :type print_lang: Optional[bool]
      :return: A string representation of the LangString.
      :rtype: str

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> print(lang_str.to_string())  # Output: '"Hello, World!"@en'
      >>> print(lang_str.to_string(print_quotes=False))  # Output: 'Hello, World!@en'
      >>> print(lang_str.to_string(print_lang=False))  # Output: '"Hello, World!"'



   .. py:method:: equals_str(other)

      Compare the LangString's text with a given string for equality.

      :param other: The string to compare with.
      :type other: str
      :return: True if the text matches the given string, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> print(lang_str.equals_str("Hello, World!"))  # Output: True
      >>> print(lang_str.equals_str("hello, world!"))  # Output: False



   .. py:method:: equals_langstring(other)

      Compare the LangString with another LangString for equality of text and language tag (case-insensitive).

      :param other: The LangString to compare with.
      :type other: LangString
      :return: True if both text and language tag match (case-insensitive), otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str1 = LangString("Hello, World!", "en")
      >>> lang_str2 = LangString("Hello, World!", "EN")
      >>> print(lang_str1.equals_langstring(lang_str2))  # Output: True
      >>> lang_str3 = LangString("Hello, World!", "fr")
      >>> print(lang_str1.equals_langstring(lang_str3))  # Output: False



   .. py:method:: __add__(other)

      Add another LangString or a string to this LangString.

      The operation can only be performed if:
      - Both are LangString objects with the same language tag.
      - The other is a string, which will be concatenated to the text of this LangString.

      :param other: The LangString or string to add.
      :type other: Union[LangString, str]
      :return: A new LangString with the concatenated text.
      :rtype: LangString
      :raises TypeError: If the objects are not compatible for addition.

      :Example:

      >>> lang_str1 = LangString("Hello", "en")
      >>> lang_str2 = LangString(" World", "en")
      >>> result = lang_str1 + lang_str2
      >>> print(result)  # Output: "Hello World"@en

      >>> lang_str3 = LangString("Hello", "en")
      >>> result = lang_str3 + " World"
      >>> print(result)  # Output: "Hello World"@en



   .. py:method:: __contains__(item)

      Check if a substring exists within the LangString's text.

      :param item: The substring to check.
      :type item: str
      :return: True if the substring exists within the text, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> contains = "World" in lang_str
      >>> print(contains)  # Output: True

      >>> contains = "Python" in lang_str
      >>> print(contains)  # Output: False



   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return: True if the objects are equal, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str1 = LangString("Hello, World!", "en")
      >>> lang_str2 = LangString("Hello, World!", "en")
      >>> is_equal = lang_str1 == lang_str2
      >>> print(is_equal)  # Output: True

      >>> lang_str3 = LangString("Hello, World!", "fr")
      >>> is_equal = lang_str1 == lang_str3
      >>> print(is_equal)  # Output: False

      >>> is_equal = lang_str1 == "Hello, World!"
      >>> print(is_equal)  # Output: True

      >>> is_equal = lang_str1 == "Bonjour, Monde!"
      >>> print(is_equal)  # Output: False



   .. py:method:: __ge__(other)

      Check if this LangString is greater than or equal to another str or LangString object.

      :param other: The str or LangString object to compare with.
      :type other: object
      :return: True if this LangString is greater than or equal to the other, otherwise False.
      :rtype: bool
      :raises TypeError: If the objects are not compatible for comparison.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("banana", "en")
      >>> lang_str2 = LangString("apple", "en")
      >>> is_ge = lang_str1 >= lang_str2
      >>> print(is_ge)  # Output: True

      >>> lang_str3 = LangString("apple", "en")
      >>> is_ge = lang_str2 >= lang_str3
      >>> print(is_ge)  # Output: True

      >>> is_ge = lang_str1 >= "banana"
      >>> print(is_ge)  # Output: True

      >>> is_ge = lang_str2 >= "cherry"
      >>> print(is_ge)  # Output: False



   .. py:method:: __getitem__(key)

      Retrieve a substring or a reversed string from the LangString's text.

      :param key: The index or slice to access.
      :type key: Union[int, slice]
      :return: A new LangString with the substring or single character.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello, world", "en")
      >>> substring = lang_str[0:5]
      >>> print(substring)  # Output: "hello"@en

      >>> single_char = lang_str[1]
      >>> print(single_char)  # Output: "e"@en



   .. py:method:: __gt__(other)

      Check if this LangString is greater than another LangString object.

      :param other: The str or LangString object to compare with.
      :type other: object
      :return: True if this LangString is greater than the other, otherwise False.
      :rtype: bool
      :raises TypeError: If the objects are not compatible for comparison.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("banana", "en")
      >>> lang_str2 = LangString("apple", "en")
      >>> is_gt = lang_str1 > lang_str2
      >>> print(is_gt)  # Output: True

      >>> lang_str3 = LangString("apple", "en")
      >>> is_gt = lang_str2 > lang_str3
      >>> print(is_gt)  # Output: False

      >>> is_gt = lang_str1 > "apple"
      >>> print(is_gt)  # Output: True

      >>> is_gt = lang_str2 > "cherry"
      >>> print(is_gt)  # Output: False



   .. py:method:: __hash__()

      Generate a hash value for a LangString object.

      The hash value is computed based on the text and a casefolded version of the language tag.

      :return: The hash value of the LangString object, based on its text and language tag.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> hash_value = hash(lang_str)
      >>> print(hash_value)  # Output: A unique integer representing the hash value



   .. py:method:: __iadd__(other)

      Implement in-place addition for LangString objects.

      This method allows the LangString's text to be concatenated with another LangString's text or a regular string.
      The operation is only allowed if both LangString objects have the same language tag or if the other operand
      is a string.

      :param other: The LangString or string to add.
      :type other: Union[LangString, str]
      :return: A new LangString instance with the concatenated text.
      :rtype: LangString
      :raises TypeError: If the objects are not compatible for addition.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("Hello", "en")
      >>> lang_str2 = LangString(" World", "en")
      >>> lang_str1 += lang_str2
      >>> print(lang_str1)  # Output: "Hello World"@en

      >>> lang_str1 += "!"
      >>> print(lang_str1)  # Output: "Hello World!"@en



   .. py:method:: __imul__(other)

      Implement in-place multiplication of the LangString's text.

      This method allows the LangString's text to be repeated a specified number of times.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: The same LangString instance with the text repeated.
      :rtype: LangString
      :raises TypeError: If the operand is not an integer.

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> lang_str *= 3
      >>> print(lang_str)  # Output: "HelloHelloHello"@en



   .. py:method:: __iter__()

      Enable iteration over the text part of the LangString.

      This method allows the LangString to be iterable, returning each character in the text part one by one.

      :return: An iterator over the characters in the text.
      :rtype: Iterator[str]

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> for char in lang_str:
      ...     print(char)
      ...
      # Output:   H
      #           e
      #           l
      #           l
      #           o



   .. py:method:: __le__(other)

      Check if this LangString is less than or equal to another LangString object or string.

      This method compares the LangString's text with another LangString's text or a regular string.

      :param other: The LangString or string to compare with.
      :type other: object
      :return: True if this LangString's text is less than or equal to the other text, otherwise False.
      :rtype: bool
      :raises TypeError: If the objects are not compatible for comparison.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("apple", "en")
      >>> lang_str2 = LangString("banana", "en")
      >>> print(lang_str1 <= lang_str2)  # Output: True
      >>> print(lang_str1 <= "apple")  # Output: True



   .. py:method:: __len__()

      Return the length of the LangString's text.

      :return: The length of the text.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> length = len(lang_str)
      >>> print(length)  # Output: 5



   .. py:method:: __lt__(other)

      Check if this LangString is less than another LangString object or string.

      This method compares the LangString's text with another LangString's text or a regular string.

      :param other: The LangString or string to compare with.
      :type other: object
      :return: True if this LangString's text is less than the other text, otherwise False.
      :rtype: bool
      :raises TypeError: If the objects are not compatible for comparison.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("apple", "en")
      >>> lang_str2 = LangString("banana", "en")
      >>> print(lang_str1 < lang_str2)  # Output: True
      >>> print(lang_str1 < "banana")  # Output: True



   .. py:method:: __mul__(other)

      Multiply the LangString's text a specified number of times.

      This method repeats the LangString's text a specified number of times and returns a new LangString.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString
      :raises TypeError: If the operand is not an integer.

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> multiplied_lang_str = lang_str * 3
      >>> print(multiplied_lang_str)  # Output: "hellohellohello"@en



   .. py:method:: __radd__(other)

      Handle concatenation when LangString is on the right side of the '+' operator.

      This method is only defined for 'other' of type string because the __add__ method is used when 'other'
      is a LangString. It concatenates the other's text to the LangString's text (in this order) and returns a
      string, which loses its language tag.

      :param other: The string to concatenate with.
      :type other: str
      :return: A new string with the concatenated text.
      :rtype: str
      :raises TypeError: If 'other' is not a string.

      :Example:

      >>> lang_str = LangString("world", "en")
      >>> result = "hello " + lang_str
      >>> print(result)  # Output: 'hello world'



   .. py:method:: __repr__()

      Return an unambiguous string representation of the LangString.

      :return: The unambiguous string representation of the LangString.
      :rtype: str

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> print(repr(lang_str))  # Output: 'LangString(text="hello", lang="en")'



   .. py:method:: __rmul__(other)

      Implement right multiplication.

      This method is called for the reversed operation of multiplication, i.e., when LangString is on the right side.
      It is typically used for repeating the LangString's text a specified number of times.

      :param other: The number of times the LangString's text should be repeated.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString
      :raises TypeError: If 'other' is not an integer.

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> multiplied_lang_str = 3 * lang_str
      >>> print(multiplied_lang_str)  # Output: "hellohellohello"@en



   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> print(lang_str)  # Output: '"hello"@en'



   .. py:method:: merge_langstrings(langstrings)
      :staticmethod:


      Merge duplicated LangStrings in a list based on content and language tags.

      This method processes a list of LangString instances, identifying and merging duplicates
      based on their text and language tags. If there are multiple LangStrings with the same text
      but different language tag casings, the resulting LangString will use a casefolded version
      of the language tag.

      :param langstrings: List of LangString instances to be merged.
      :type langstrings: list[LangString]
      :return: A list of merged LangString instances without duplicates.
      :rtype: list[LangString]

      :Example:

      >>> lang_str1 = LangString("Hello", "en")
      >>> lang_str2 = LangString("Hello", "EN")
      >>> lang_str3 = LangString("Bonjour", "fr")
      >>> merged_list = LangString.merge_langstrings([lang_str1, lang_str2, lang_str3])
      >>> for ls in merged_list:
      ...     print(ls)
      ...
      >>> # Output: '"Hello"@en'
      >>> #         '"Bonjour"@fr'



   .. py:method:: print_list(langstring_list, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:


      Print a string representation of a list of LangString instances using the to_string method         with specified formatting options.

      :param langstring_list: The list of LangString instances.
      :type langstring_list: list[LangString]
      :param print_quotes: If True, wrap the text in quotes. If None, use the default setting from the Controller.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between the text and language tag.
      :type separator: str
      :param print_lang: If True, include the language tag. If None, use the default setting from the Controller.
      :type print_lang: Optional[bool]

      :Example:

      >>> lang_str1 = LangString("a", "b")
      >>> lang_str2 = LangString("c", "d")
      >>> ls_list = [lang_str1, lang_str2]
      >>> LangString.print_list(ls_list)  # Output: ['"a"@b', '"c"@d']



   .. py:method:: _validate_match_types(other, overwrite_strict = False)

      Validate that the type of the other operand matches the expected type.

      This method checks if the operand type is valid based on the control flag for type matching.
      If strict type matching is enabled, only LangString type is allowed. The strict mode can be
      overridden by passing the `overwrite_strict` parameter.

      :param other: The operand to be validated.
      :type other: Union[object, str, LangString]
      :param overwrite_strict: If True, enforces strict type matching regardless of the control flag.
      :type overwrite_strict: bool
      :raises TypeError: If strict mode is enabled and the operand is not of type LangString.

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> lang_str._validate_match_types(lang_str, False)  # No exception
      >>> lang_str._validate_match_types(lang_str, True)  # Raises TypeError



   .. py:method:: _validate_match_langs(other)

      Validate that the language of the other LangString operand matches the current LangString's language.

      This method checks if the language tags of both LangString objects are compatible. If the languages
      do not match, a ValueError is raised.

      :param other: The operand to be validated.
      :type other: object
      :raises ValueError: If the languages of both LangString objects do not match.

      :Example:

      >>> lang_str1 = LangString("Hello", "en")
      >>> lang_str2 = LangString("Bonjour", "fr")
      >>> lang_str1._validate_match_langs(LangString("world", "en"))  # No exception
      >>> lang_str1._validate_match_langs(lang_str2)  # Raises ValueError due to incompatible languages



.. py:class:: MultiLangString(mls_dict = None, pref_lang = 'en')

   A class for managing multilingual text strings with various language tags.

   This class provides functionality for storing, retrieving, and manipulating text strings in multiple languages.
   It uses a dictionary to maintain text entries associated with language tags, allowing efficient handling of
   multilingual content. The MultiLangString class supports operations like adding new entries, removing entries,
   and retrieving entries in specific languages or across all languages. Additionally, it allows setting a preferred
   language, which can be used as a default for text retrieval operations.

   The behavior of this class is influenced by control flags set in the Controller, which can enforce constraints
   like valid language tags and non-empty text entries. The class integrates seamlessly with other components like
   LangString and SetLangString, providing a comprehensive solution for managing multilingual text data.

   :ivar mls_dict: A dictionary representing the internal structure of the MultiLangString, where keys are language
                   codes and values are sets of text entries.
   :vartype mls_dict: Optional[dict[str, set[str]]]
   :ivar pref_lang: The preferred language for this MultiLangString. Defaults to "en".
   :vartype pref_lang: str


   .. py:property:: mls_dict
      :type: dict[str, set[str]]

      Get the dictionary representing the internal structure of the MultiLangString.

      :return: The dictionary where keys are language codes and values are sets of text entries.
      :rtype: dict[str, set[str]]



   .. py:property:: pref_lang
      :type: str

      Get the preferred language for this MultiLangString.

      :return: The preferred language as a string.
      :rtype: str



   .. py:method:: add(arg)

      Add an element to the MultiLangString.

      This method determines the type of the argument and calls the appropriate add method.

      :param arg: The element to add, which can be a tuple of (text, language), LangString, SetLangString,
                  or MultiLangString.
      :type arg: Union[tuple[str, str], LangString, SetLangString, MultiLangString]
      :raises TypeError: If the argument is not of a supported type.

      :Example:
      >>> mls = MultiLangString()
      >>> mls.add(("Hello", "en"))
      >>> mls.add(LangString("Bonjour", "fr"))
      >>> print(mls)  # Output: {'Hello'}@en, {'Bonjour'}@fr



   .. py:method:: add_entry(text, lang)

      Add a text entry to the MultiLangString under a specified language.

      Validates the provided text and language against the current flag settings before adding. If the specified
      language does not exist in the mls_dict, a new set for that language is created. The text is then added to
      this set. If the language already exists, the text is added to the existing set for that language.

      :param text: The text to be added to the MultiLangString.
      :type text: str
      :param lang: The language under which the text should be added. If not specified, defaults to an empty string.
      :type lang: str

      :Example:
      >>> mls = MultiLangString()
      >>> mls.add_entry("Hello", "en")
      >>> mls.add_entry("Bonjour", "fr")
      >>> print(mls)  # Output: {'Hello'}@en, {'Bonjour'}@fr



   .. py:method:: add_text_in_pref_lang(text)

      Add a text entry to the preferred language.

      :param text: The text to be added to the preferred language.
      :type text: str

      :Example:
      >>> mls = MultiLangString(pref_lang="en")
      >>> mls.add_text_in_pref_lang("Hello")
      >>> print(mls)  # Output: {'Hello'}@en



   .. py:method:: add_langstring(langstring)

      Add a LangString to the MultiLangString.

      :param langstring: The LangString object to be added, representing a text in a specific language.
      :type langstring: LangString

      :Example:
      >>> mls = MultiLangString()
      >>> langstring = LangString("Hello", "en")
      >>> mls.add_langstring(langstring)
      >>> print(mls)  # Output: {'Hello'}@en



   .. py:method:: add_setlangstring(setlangstring)

      Add a SetLangString to the MultiLangString.

      This method adds all text entries from a SetLangString to the MultiLangString under the specified language.

      :param setlangstring: The SetLangString object to be added, representing a text in a specific language.
      :type setlangstring: SetLangString

      :Example:
      >>> mls = MultiLangString()
      >>> setlangstring = SetLangString({"Hello", "Hi"}, "en")
      >>> mls.add_setlangstring(setlangstring)
      >>> print(mls)  # Output: {'Hello', 'Hi'}@en



   .. py:method:: add_multilangstring(multilangstring)

      Add a MultiLangString to the MultiLangString.

      This method adds all text entries from another MultiLangString to the current MultiLangString.

      :param multilangstring: The MultiLangString object to be added.
      :type multilangstring: MultiLangString

      :Example:
      >>> mls1 = MultiLangString()
      >>> mls2 = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> mls1.add_multilangstring(mls2)
      >>> print(mls1)  # Output: {'Hello'}@en, {'Bonjour'}@fr



   .. py:method:: add_empty_lang(lang)

      Add an empty language to the MultiLangString.

      This method adds an empty set for the specified language to the MultiLangString if it does not already exist.

      :param lang: The language to add.
      :type lang: str

      :Example:
      >>> mls = MultiLangString()
      >>> mls.add_empty_lang("en")
      >>> print(mls)  # Output: {}@en



   .. py:method:: discard(arg, clean_empty = False)

      Discard an entry, LangString, SetLangString, or MultiLangString from the MultiLangString.

      This method discards the specified entry from the MultiLangString. It can handle tuples, LangString,
      SetLangString, or MultiLangString objects. Optionally, it can remove empty language entries after discarding.

      :param arg: The entry to discard, which can be a tuple, LangString, SetLangString, or MultiLangString.
      :type arg: Union[tuple[str, str], LangString, SetLangString, MultiLangString]
      :param clean_empty: If True, remove empty language entries after discarding. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> mls.discard(("Hello", "en"))
      >>> print(mls)  # Output: {}@en, {'Bonjour'}@fr
      >>> lang_str = LangString("Bonjour", "fr")
      >>> mls.discard(lang_str)
      >>> print(mls)  # Output: {}@en, {}@fr



   .. py:method:: discard_entry(text, lang, clean_empty = False)

      Discard a text entry from a specified language in the MultiLangString.

      This method removes the specified text entry from the set associated with the given language.
      If the set becomes empty and clean_empty is True, the language entry is removed.

      :param text: The text to discard.
      :type text: str
      :param lang: The language of the text to discard.
      :type lang: str
      :param clean_empty: If True, remove the language entry if it becomes empty. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> mls.discard_entry("Hello", "en")
      >>> print(mls)  # Output: {'World'}@en, {'Bonjour'}@fr
      >>> mls.discard_entry("World", "en", clean_empty=True)
      >>> print(mls)  # Output: {'Bonjour'}@fr



   .. py:method:: discard_text_in_pref_lang(text, clean_empty = False)

      Discard a text entry from the preferred language.

      This method removes the specified text entry from the set associated with the preferred language.
      If the set becomes empty and clean_empty is True, the language entry is removed.

      :param text: The text to discard.
      :type text: str
      :param clean_empty: If True, remove the language entry if it becomes empty. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> mls.discard_text_in_pref_lang("Hello")
      >>> print(mls)  # Output: {'World'}@en, {'Bonjour'}@fr
      >>> mls.discard_text_in_pref_lang("World", clean_empty=True)
      >>> print(mls)  # Output: {'Bonjour'}@fr



   .. py:method:: discard_langstring(langstring, clean_empty = False)

      Discard a LangString from the MultiLangString.

      This method removes the specified LangString from the set associated with its language.
      If the set becomes empty and clean_empty is True, the language entry is removed.

      :param langstring: The LangString object to discard.
      :type langstring: LangString
      :param clean_empty: If True, remove the language entry if it becomes empty. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> lang_str = LangString("Hello", "en")
      >>> mls.discard_langstring(lang_str)
      >>> print(mls)  # Output: {'World'}@en, {'Bonjour'}@fr
      >>> lang_str = LangString("World", "en")
      >>> mls.discard_langstring(lang_str, clean_empty=True)
      >>> print(mls)  # Output: {'Bonjour'}@fr



   .. py:method:: discard_setlangstring(setlangstring, clean_empty = False)

      Discard a SetLangString from the MultiLangString.

      This method removes the specified SetLangString from the sets associated with its language.
      If the set becomes empty and clean_empty is True, the language entry is removed.

      :param setlangstring: The SetLangString object to discard.
      :type setlangstring: SetLangString
      :param clean_empty: If True, remove the language entry if it becomes empty. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> mls.discard_setlangstring(set_lang_str)
      >>> print(mls)  # Output: {}@en, {'Bonjour'}@fr
      >>> set_lang_str = SetLangString({"Bonjour"}, "fr")
      >>> mls.discard_setlangstring(set_lang_str, clean_empty=True)
      >>> print(mls)  # Output: {}@en



   .. py:method:: discard_multilangstring(multilangstring, clean_empty = False)

      Discard a MultiLangString from the current MultiLangString.

      This method removes the specified MultiLangString from the sets associated with its languages.
      If a set becomes empty and clean_empty is True, the language entry is removed.

      :param multilangstring: The MultiLangString object to discard.
      :type multilangstring: MultiLangString
      :param clean_empty: If True, remove empty language entries after discarding. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour", "Salut"}})
      >>> mls_to_discard = MultiLangString({"en": {"Hello"}, "fr": {"Salut"}})
      >>> mls.discard_multilangstring(mls_to_discard)
      >>> print(mls)  # Output: {'World'}@en, {'Bonjour'}@fr
      >>> mls_to_discard = MultiLangString({"en": {"World"}, "fr": {"Bonjour"}})
      >>> mls.discard_multilangstring(mls_to_discard, clean_empty=True)
      >>> print(mls)  # Output: {}



   .. py:method:: discard_lang(lang)

      Discard all entries for a specified language.

      This method removes all entries associated with the given language from the MultiLangString.

      :param lang: The language to discard.
      :type lang: str

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour", "Salut"}})
      >>> mls.discard_lang("en")
      >>> print(mls)  # Output: {'Bonjour', 'Salut'}@fr
      >>> mls.discard_lang("fr")
      >>> print(mls)  # Output: {}



   .. py:method:: remove(arg, clean_empty = False)

      Remove an entry, LangString, SetLangString, or MultiLangString from the MultiLangString.

      This method removes the specified entry from the MultiLangString. It can handle tuples, LangString,
      SetLangString, or MultiLangString objects. Optionally, it can remove empty language entries after removing.

      :param arg: The entry to remove, which can be a tuple, LangString, SetLangString, or MultiLangString.
      :type arg: Union[tuple[str, str], LangString, SetLangString, MultiLangString]
      :param clean_empty: If True, remove empty language entries after removing. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> mls.remove(("Hello", "en"))
      >>> print(mls)  # Output: {}@en, {'Bonjour'}@fr
      >>> lang_str = LangString("Bonjour", "fr")
      >>> mls.remove(lang_str)
      >>> print(mls)  # Output: {}@en, {}@fr



   .. py:method:: remove_entry(text, lang, clean_empty = False)

      Remove a single entry from the set of a given language key in the dictionary.

      If the specified language key exists and the text is in its set, the text is removed. If this results in an
      empty set for the language, the language key is also removed from the dictionary.

      :param text: The text to be removed.
      :type text: str
      :param lang: The language key from which the text should be removed.
      :type lang: str
      :param clean_empty: If True, remove the language entry if it becomes empty. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> mls.remove_entry("Hello", "en")
      >>> print(mls)  # Output: {'World'}@en, {'Bonjour'}@fr
      >>> mls.remove_entry("World", "en", clean_empty=True)
      >>> print(mls)  # Output: {'Bonjour'}@fr



   .. py:method:: remove_text_in_pref_lang(text, clean_empty = False)

      Remove a text entry from the preferred language.

      This method removes the specified text entry from the set associated with the preferred language.
      If the set becomes empty and clean_empty is True, the language entry is removed.

      :param text: The text to remove.
      :type text: str
      :param clean_empty: If True, remove the language entry if it becomes empty. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> mls.remove_text_in_pref_lang("Hello")
      >>> print(mls)  # Output: {'World'}@en, {'Bonjour'}@fr
      >>> mls.remove_text_in_pref_lang("World", clean_empty=True)
      >>> print(mls)  # Output: {'Bonjour'}@fr



   .. py:method:: remove_langstring(langstring, clean_empty = False)

      Remove a LangString from the MultiLangString.

      This method removes the specified LangString from the set associated with its language.
      If the set becomes empty and clean_empty is True, the language entry is removed.

      :param langstring: The LangString object to remove.
      :type langstring: LangString
      :param clean_empty: If True, remove the language entry if it becomes empty. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> lang_str = LangString("Hello", "en")
      >>> mls.remove_langstring(lang_str)
      >>> print(mls)  # Output: {'World'}@en, {'Bonjour'}@fr
      >>> lang_str = LangString("World", "en")
      >>> mls.remove_langstring(lang_str, clean_empty=True)
      >>> print(mls)  # Output: {'Bonjour'}@fr



   .. py:method:: remove_setlangstring(setlangstring, clean_empty = False)

      Remove a SetLangString from the MultiLangString.

      This method removes the specified SetLangString from the sets associated with its language.
      If the set becomes empty and clean_empty is True, the language entry is removed.

      :param setlangstring: The SetLangString object to remove.
      :type setlangstring: SetLangString
      :param clean_empty: If True, remove the language entry if it becomes empty. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> mls.remove_setlangstring(set_lang_str)
      >>> print(mls)  # Output: {}@en, {'Bonjour'}@fr
      >>> set_lang_str = SetLangString({"Bonjour"}, "fr")
      >>> mls.remove_setlangstring(set_lang_str, clean_empty=True)
      >>> print(mls)  # Output: {}@en



   .. py:method:: remove_multilangstring(multilangstring, clean_empty = False)

      Remove a MultiLangString from the current MultiLangString.

      This method removes the specified MultiLangString from the sets associated with its languages.
      If a set becomes empty and clean_empty is True, the language entry is removed.

      :param multilangstring: The MultiLangString object to remove.
      :type multilangstring: MultiLangString
      :param clean_empty: If True, remove empty language entries after removing. Defaults to False.
      :type clean_empty: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour", "Salut"}})
      >>> mls_to_remove = MultiLangString({"en": {"Hello"}, "fr": {"Salut"}})
      >>> mls.remove_multilangstring(mls_to_remove)
      >>> print(mls)  # Output: {'World'}@en, {'Bonjour'}@fr
      >>> mls_to_remove = MultiLangString({"en": {"World"}, "fr": {"Bonjour"}})
      >>> mls.remove_multilangstring(mls_to_remove, clean_empty=True)
      >>> print(mls)  # Output: {}



   .. py:method:: remove_lang(lang)

      Remove all entries of a given language from the dictionary.

      If the specified language key exists, it and all its associated texts are removed from the dictionary.

      :param lang: The language key to be removed along with all its texts.
      :type lang: str

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour", "Salut"}})
      >>> mls.remove_lang("en")
      >>> print(mls)  # Output: {'Bonjour', 'Salut'}@fr
      >>> mls.remove_lang("fr")
      >>> print(mls)  # Output: {}



   .. py:method:: remove_empty_langs()

      Remove all empty language entries from the dictionary.

      This method checks for languages that have no associated text entries and removes them from the dictionary.

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": set()})
      >>> mls.remove_empty_langs()
      >>> print(mls)  # Output: {'Hello'}@en



   .. py:method:: to_strings(langs = None, print_quotes = None, separator = '@', print_lang = None)

      Convert the MultiLangString to a list of formatted strings.

      This method converts the text entries of the MultiLangString into a list of strings,
      optionally formatted with quotes and language tags.
      The resulting list of strings is sorted to generate a deterministic output.

      :param langs: A list of languages to include in the output. If None, includes all languages.
      :type langs: Optional[list[str]]
      :param print_quotes: If True, wraps the text in quotes. Defaults to the controller flag.
      :type print_quotes: Optional[bool]
      :param separator: The separator between the text and the language tag. Defaults to "@".
      :type separator: str
      :param print_lang: If True, includes the language tag in the output. Defaults to the controller flag.
      :type print_lang: Optional[bool]
      :return: A sorted list of formatted strings.
      :rtype: list[str]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> strings = mls.to_strings()
      >>> print(strings)  # Output: ['"Bonjour"@fr', '"Hello"@en', '"World"@en']
      >>> strings = mls.to_strings(print_quotes=False, print_lang=False)
      >>> print(strings)  # Output: ['Bonjour', 'Hello', 'World']



   .. py:method:: to_langstrings(langs = None)

      Convert the MultiLangString to a list of LangString objects.

      This method converts the text entries of the MultiLangString into a list of LangString objects.

      :param langs: A list of languages to include in the output. If None, includes all languages.
      :type langs: Optional[list[str]]
      :return: A list of LangString objects.
      :rtype: list[LangString]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> langstrings = mls.to_langstrings()
      >>> for langstring in langstrings:
      ...     print(langstring)
      ...
      # Output:   "Hello"@en
      #           "World"@en
      #           "Bonjour"@fr



   .. py:method:: to_setlangstrings(langs = None)

      Convert the MultiLangString to a list of SetLangString objects.

      This method converts the text entries of the MultiLangString into a list of SetLangString objects.

      :param langs: A list of languages to include in the output. If None, includes all languages.
      :type langs: Optional[list[str]]
      :return: A list of SetLangString objects.
      :rtype: list[SetLangString]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> setlangstrings = mls.to_setlangstrings()
      >>> for setlangstring in setlangstrings:
      ...     print(setlangstring)
      ...
      >>> # Output:   {'Hello', 'World'}@en
      >>> #           {'Bonjour'}@fr



   .. py:method:: count_entries_of_lang(lang)

      Count the number of text entries for a given language.

      This method returns the number of text entries associated with the specified language.

      :param lang: The language to count the entries for.
      :type lang: str
      :return: The number of text entries for the specified language.
      :rtype: int

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> count = mls.count_entries_of_lang("en")
      >>> print(count)  # Output: 2
      >>> count = mls.count_entries_of_lang("fr")
      >>> print(count)  # Output: 1



   .. py:method:: count_entries_per_lang()

      Return the number of text entries for each language.

      This method returns a dictionary with language codes as keys and the counts of text entries as values.

      :return: A dictionary with language codes as keys and counts of text entries as values.
      :rtype: dict[str, int]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> counts = mls.count_entries_per_lang()
      >>> print(counts)  # Output: {'en': 2, 'fr': 1}



   .. py:method:: count_entries_total()

      Return the total number of text entries across all languages.

      This method returns the total count of text entries in the MultiLangString.

      :return: The total number of text entries.
      :rtype: int

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> total_count = mls.count_entries_total()
      >>> print(total_count)  # Output: 3



   .. py:method:: count_langs_total()

      Count the total number of languages in the MultiLangString.

      This method returns the number of unique languages in the MultiLangString.

      :return: The total number of languages.
      :rtype: int

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> total_langs = mls.count_langs_total()
      >>> print(total_langs)  # Output: 2



   .. py:method:: contains(arg)

      Check if the MultiLangString contains the specified entry, LangString, SetLangString, or MultiLangString.

      This method checks if the specified entry is present in the MultiLangString. It can handle tuples, LangString,
      SetLangString, or MultiLangString objects.

      :param arg: The entry to check, which can be a tuple, LangString, SetLangString, or MultiLangString.
      :type arg: Union[tuple[str, str], LangString, SetLangString, MultiLangString]
      :return: True if the entry is present, False otherwise.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> result = mls.contains(("Hello", "en"))
      >>> print(result)  # Output: True
      >>> lang_str = LangString("Bonjour", "fr")
      >>> result = mls.contains(lang_str)
      >>> print(result)  # Output: True
      >>> set_lang_str = SetLangString({"Hello"}, "en")
      >>> result = mls.contains(set_lang_str)
      >>> print(result)  # Output: True
      >>> mls_to_check = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> result = mls.contains(mls_to_check)
      >>> print(result)  # Output: True



   .. py:method:: contains_entry(text, lang)

      Check if a specific text entry exists in a given language.

      This method checks if the specified text entry is present in the set associated with the given language.

      :param text: The text entry to check.
      :type text: str
      :param lang: The language of the text entry.
      :type lang: str
      :return: True if the text entry is present, False otherwise.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> result = mls.contains_entry("Hello", "en")
      >>> print(result)  # Output: True
      >>> result = mls.contains_entry("Bonjour", "fr")
      >>> print(result)  # Output: True
      >>> result = mls.contains_entry("Hello", "fr")
      >>> print(result)  # Output: False



   .. py:method:: contains_lang(lang)

      Check if a specific language exists in the MultiLangString.

      This method checks if the specified language is present in the MultiLangString.

      :param lang: The language to check.
      :type lang: str
      :return: True if the language is present, False otherwise.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> result = mls.contains_lang("en")
      >>> print(result)  # Output: True
      >>> result = mls.contains_lang("fr")
      >>> print(result)  # Output: True
      >>> result = mls.contains_lang("es")
      >>> print(result)  # Output: False



   .. py:method:: contains_text_in_pref_lang(text)

      Check if a specific text exists in the preferred language.

      This method checks if the specified text entry is present in the set associated with the preferred language.

      :param text: The text entry to check.
      :type text: str
      :return: True if the text entry is present in the preferred language, False otherwise.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> result = mls.contains_text_in_pref_lang("Hello")
      >>> print(result)  # Output: True
      >>> result = mls.contains_text_in_pref_lang("Bonjour")
      >>> print(result)  # Output: False



   .. py:method:: contains_text_in_any_lang(text)

      Check if a specific text exists in any language.

      This method checks if the specified text entry is present in the sets associated with any language
      in the MultiLangString.

      :param text: The text entry to check.
      :type text: str
      :return: True if the text entry is present in any language, False otherwise.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> result = mls.contains_text_in_any_lang("Hello")
      >>> print(result)  # Output: True
      >>> result = mls.contains_text_in_any_lang("Bonjour")
      >>> print(result)  # Output: True
      >>> result = mls.contains_text_in_any_lang("Hola")
      >>> print(result)  # Output: False



   .. py:method:: contains_langstring(langstring)

      Check if the given LangString's text and language are part of this MultiLangString.

      This method checks if the specified LangString is present in the set associated with its language.

      :param langstring: A LangString object to check.
      :type langstring: LangString
      :return: True if the LangString's text is found within the specified language's set; otherwise, False.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> lang_str = LangString("Hello", "en")
      >>> result = mls.contains_langstring(lang_str)
      >>> print(result)  # Output: True
      >>> lang_str = LangString("Hola", "es")
      >>> result = mls.contains_langstring(lang_str)
      >>> print(result)  # Output: False



   .. py:method:: contains_setlangstring(setlangstring)

      Check if all texts and the language of a SetLangString are part of this MultiLangString.

      This method checks if the specified SetLangString's language exists and all its texts are found within the
      specified language's set.

      :param setlangstring: A SetLangString object to check.
      :type setlangstring: SetLangString
      :return: True if the SetLangString's language exists and all its texts are found within the specified
               language's set; otherwise, False.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> set_lang_str = SetLangString({"Hello"}, "en")
      >>> result = mls.contains_setlangstring(set_lang_str)
      >>> print(result)  # Output: True
      >>> set_lang_str = SetLangString({"Bonjour"}, "fr")
      >>> result = mls.contains_setlangstring(set_lang_str)
      >>> print(result)  # Output: True
      >>> set_lang_str = SetLangString({"Hola"}, "es")
      >>> result = mls.contains_setlangstring(set_lang_str)
      >>> print(result)  # Output: False



   .. py:method:: contains_multilangstring(multilangstring)

      Check if the current instance contains all languages and texts of another MultiLangString instance.

      This method checks if all languages and their respective texts in the specified MultiLangString are contained
      in this instance.

      :param multilangstring: The MultiLangString instance to check against.
      :type multilangstring: MultiLangString
      :return: True if all languages and their respective texts in `multilangstring` are contained in this instance,
               False otherwise.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> mls_to_check = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> result = mls.contains_multilangstring(mls_to_check)
      >>> print(result)  # Output: True
      >>> mls_to_check = MultiLangString({"en": {"Hello"}, "fr": {"Salut"}})
      >>> result = mls.contains_multilangstring(mls_to_check)
      >>> print(result)  # Output: False



   .. py:method:: get_langs(casefold = False)

      Return a list of all languages in the MultiLangString.

      This method returns a list of all language codes present in the MultiLangString. If casefold is True,
      the language codes are returned in lowercase.

      :param casefold: If True, return the language codes in lowercase. Defaults to False.
      :type casefold: bool
      :return: A list of language codes.
      :rtype: list[str]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> langs = mls.get_langs()
      >>> print(langs)  # Output: ['en', 'fr']
      >>> langs_casefolded = mls.get_langs(casefold=True)
      >>> print(langs_casefolded)  # Output: ['en', 'fr']



   .. py:method:: get_texts()

      Return a sorted list of all texts in the MultiLangString.

      This method returns a list of all text entries present in the MultiLangString, sorted in alphabetical order.

      :return: A sorted list of text entries.
      :rtype: list[str]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> texts = mls.get_texts()
      >>> print(texts)  # Output: ['Bonjour', 'Hello', 'World']



   .. py:method:: get_langstring(text, lang)

      Retrieve a LangString from the MultiLangString.

      This method returns a LangString object if the specified text and language are present in the MultiLangString.
      If the text and language are not found, it returns a LangString with only the language set.

      :param text: The text entry to retrieve.
      :type text: str
      :param lang: The language of the text entry.
      :type lang: str
      :return: A LangString object with the specified text and language, or a LangString with only the language if
               not found.
      :rtype: LangString

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> lang_str = mls.get_langstring("Hello", "en")
      >>> print(lang_str)  # Output: "Hello"@en
      >>> lang_str = mls.get_langstring("Hola", "es")
      >>> print(lang_str)  # Output: ""@es



   .. py:method:: get_setlangstring(lang)

      Retrieve a SetLangString from the MultiLangString.

      This method returns a SetLangString object if the specified language is present in the MultiLangString.
      If the language is not found, it returns an empty SetLangString with the language set.

      :param lang: The language to retrieve the SetLangString for.
      :type lang: str
      :return: A SetLangString object with the texts for the specified language, or an empty SetLangString
               if not found.
      :rtype: SetLangString

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> set_lang_str = mls.get_setlangstring("en")
      >>> print(set_lang_str)  # Output: {'Hello', 'World'}@en
      >>> set_lang_str = mls.get_setlangstring("es")
      >>> print(set_lang_str)  # Output: {}es



   .. py:method:: get_multilangstring(langs)

      Retrieve a MultiLangString containing only the specified languages.

      This method returns a new MultiLangString object containing only the specified languages and their texts
      from the current MultiLangString.

      :param langs: A list of languages to include in the new MultiLangString.
      :type langs: list[str]
      :return: A new MultiLangString object with the specified languages and their texts.
      :rtype: MultiLangString

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}, "es": {"Hola"}})
      >>> new_mls = mls.get_multilangstring(["en", "es"])
      >>> print(new_mls)  # Output: {'Hello', 'World'}@en, {'Hola'}@es



   .. py:method:: pop_langstring(text, lang)

      Remove and return a LangString from the MultiLangString.

      This method removes the specified text entry and its language from the MultiLangString,
      and returns it as a LangString object. If the entry is not found, it returns None.

      :param text: The text entry to remove.
      :type text: str
      :param lang: The language of the text entry.
      :type lang: str
      :return: The removed LangString object, or None if the entry was not found.
      :rtype: Optional[LangString]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> lang_str = mls.pop_langstring("Hello", "en")
      >>> print(lang_str)  # Output: "Hello"@en
      >>> print(mls)  # Output: {}@en, {'Bonjour'}@fr,
      >>> lang_str = mls.pop_langstring("Hola", "es")
      >>> print(lang_str)  # Output: None
      >>> print(mls)  # Output: {}@en, {'Bonjour'}@fr



   .. py:method:: pop_setlangstring(lang)

      Remove and return a SetLangString from the MultiLangString.

      This method removes all text entries associated with the specified language from the MultiLangString,
      and returns them as a SetLangString object. If the language is not found, it returns None.

      :param lang: The language to remove the SetLangString for.
      :type lang: str
      :return: The removed SetLangString object, or None if the language was not found.
      :rtype: Optional[SetLangString]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> set_lang_str = mls.pop_setlangstring("en")
      >>> print(set_lang_str)  # Output: {'Hello', 'World'}@en
      >>> print(mls)  # Output: {'Bonjour'}@fr
      >>> set_lang_str = mls.pop_setlangstring("es")
      >>> print(set_lang_str)  # Output: None
      >>> print(mls)  # Output: {'Bonjour'}@fr



   .. py:method:: pop_multilangstring(langs)

      Remove and return a MultiLangString containing the specified languages.

      This method removes all text entries associated with the specified languages from the MultiLangString,
      and returns them as a new MultiLangString object.

      :param langs: A list of languages to remove.
      :type langs: list[str]
      :return: A new MultiLangString object with the specified languages and their texts.
      :rtype: MultiLangString

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}, "es": {"Hola"}})
      >>> new_mls = mls.pop_multilangstring(["en", "es"])
      >>> print(new_mls)  # Output: {'Hello', 'World'}@en, {'Hola'}@es
      >>> print(mls)  # Output: {'Bonjour'}@fr



   .. py:method:: has_pref_lang_entries()

      Check if there are any entries in the preferred language.

      This method checks whether there are any text entries in the MultiLangString for the preferred language.

      :return: True if there are entries in the preferred language, False otherwise.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> has_entries = mls.has_pref_lang_entries()
      >>> print(has_entries)  # Output: True
      >>> mls.pop_setlangstring("en")
      >>> has_entries = mls.has_pref_lang_entries()
      >>> print(has_entries)  # Output: False



   .. py:method:: __contains__(lang)

      Check if a language is in the MultiLangString.

      This method mimics the behavior of the 'in' operator for dictionaries, allowing users to check if a language
      exists in the MultiLangString.

      :param lang: The language code to check for.
      :type lang: str
      :return: True if the language is present, False otherwise.
      :rtype: bool

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> print("en" in mls)  # Output: True
      >>> print("es" in mls)  # Output: False



   .. py:method:: __delitem__(lang)

      Allow deletion of language entries.

      This method mimics the behavior of the 'del' operator for dictionaries, allowing users to delete a language
      entry from the MultiLangString.

      :param lang: The language code to delete.
      :type lang: str
      :raises KeyError: If the language is not found in the MultiLangString.

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> del mls["en"]
      >>> print(mls)  # Output: {'Bonjour'}@fr
      >>> del mls["es"]  # Raises KeyError



   .. py:method:: __eq__(other)

      Check equality of this MultiLangString with another MultiLangString.

      This method mimics the behavior of the '==' operator for dictionaries, allowing users to compare two
      MultiLangString objects for equality based on their mls_dict attributes.
      The pref_lang attribute is not considered in the equality check.

      :param other: Another object to compare with.
      :type other: object
      :return: True if both MultiLangString objects have the same mls_dict, False otherwise.
      :rtype: bool

      :Example:
      >>> mls1 = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> mls2 = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> print(mls1 == mls2)  # Output: True
      >>> mls3 = MultiLangString({"en": {"Hi"}, "fr": {"Salut"}})
      >>> print(mls1 == mls3)  # Output: False



   .. py:method:: __getitem__(lang)

      Allow retrieval of entries by language.

      This method mimics the behavior of the dictionary 'getitem' method, allowing users to retrieve the set of
      text entries associated with a specified language code from the MultiLangString.
      Raises KeyError if the language is not found.

      :param lang: The language code to retrieve entries for.
      :type lang: str
      :return: A set of text entries associated with the specified language.
      :rtype: set[str]
      :raises KeyError: If the language is not found in the MultiLangString.

      :Example:
      >>> mls = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}})
      >>> print(mls["en"])  # Output: {'Hello', 'World'}
      >>> print(mls["es"])  # Raises KeyError



   .. py:method:: __hash__()

      Generate a hash value for a MultiLangString object.

      This method mimics the behavior of the dictionary 'hash' method, allowing users to obtain a hash value
      for the MultiLangString. The hash is computed based on the 'mls_dict' attribute, ensuring that
      MultiLangString objects with the same content will have the same hash value.
      I.e., the pref_lang attribute is not considered in the hash creation.

      :return: The hash value of the MultiLangString object.
      :rtype: int

      :Example:
      >>> mls1 = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}}, pref_lang="en")
      >>> mls2 = MultiLangString({"en": {"Hello", "World"}, "fr": {"Bonjour"}}, pref_lang="pt")
      >>> print(hash(mls1) == hash(mls2))  # Output: True



   .. py:method:: __iter__()

      Allow iteration over the dictionary keys (language codes).

      This method mimics the behavior of the dictionary 'iter' method, allowing users to iterate over the
      language codes present in the MultiLangString.

      :return: An iterator over the language codes.
      :rtype: iterator

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> for lang in mls:
      >>>     print(lang)
      >>> # Output:   en
      >>> #           fr



   .. py:method:: __len__()

      Return the number of languages in the dictionary.

      This method mimics the behavior of the dictionary 'len' method, allowing users to get the number of
      language entries present in the MultiLangString.

      :return: The number of language entries.
      :rtype: int

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> print(len(mls))  # Output: 2



   .. py:method:: __repr__()

      Return a detailed string representation of the MultiLangString object.

      This method provides a more verbose string representation of the MultiLangString, which includes the full
      dictionary of language strings and the preferred language, making it useful for debugging.

      :return: A detailed string representation of the MultiLangString.
      :rtype: str

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> print(repr(mls))  # Output: 'MultiLangString(mls_dict={'en': {'Hello'}, 'fr': {'Bonjour'}}, pref_lang='en')'



   .. py:method:: __reversed__()

      Return a reverse iterator over the dictionary keys.

      This method allows for iterating over the language codes in the MultiLangString in reverse order.

      :return: A reverse iterator over the dictionary keys.
      :rtype: reverse_iterator

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> reversed_langs = list(reversed(mls))
      >>> print(reversed_langs)  # Output: ['fr', 'en']



   .. py:method:: __setitem__(lang, texts)

      Allow setting entries by language.

      This method allows for setting the text entries for a given language in the MultiLangString, mimicking
      dictionary behavior. If the language does not exist, it is added.

      :param lang: The language code.
      :type lang: str
      :param texts: A set of text entries to associate with the language.
      :type texts: set[str]

      :Example:
      >>> mls = MultiLangString()
      >>> mls["en"] = {"Hello", "World"}
      >>> mls["es"] = {"Hola"}
      >>> print(mls)  # Output: {'Hello', 'World'}@en, {'Hola'}@es
      >>> mls["en"] = {"Bye"}
      >>> print(mls)  # Output: {'Bye'}@en, {'Hola'}@es



   .. py:method:: __str__()

      Return a string representation of the MultiLangString, including language tags.

      This method provides a concise string representation of the MultiLangString, listing each text entry with its
      associated language tag. The output is sorted alphabetically by language and then by text within each language.

      :return: A string representation of the MultiLangString with language tags.
      :rtype: str

      :Example:
      >>> mls = MultiLangString({"en": {"World", "Hello"}, "fr": {"Bonjour"}})
      >>> print(mls)  # Output: {'Hello', 'World'}@en, {'Bonjour'}@fr



   .. py:method:: merge_multilangstrings(multilangstrings)
      :staticmethod:


      Merge multiple MultiLangString instances into a single MultiLangString.

      This static method takes a list of MultiLangString instances and merges them into a single
      MultiLangString. The resulting MultiLangString contains all languages and texts from the provided
      instances. If the list is empty, an empty MultiLangString is returned.

      :param multilangstrings: A list of MultiLangString instances to merge.
      :type multilangstrings: list[MultiLangString]
      :return: A new MultiLangString containing all languages and texts from the provided instances.
      :rtype: MultiLangString

      :Example:
      >>> mls1 = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> mls2 = MultiLangString({"es": {"Hola"}, "en": {"World"}})
      >>> merged_mls = MultiLangString.merge_multilangstrings([mls1, mls2])
      >>> print(merged_mls)  # Output: {'Hello', 'World'}@en, {'Hola'}@es, {'Bonjour'}@fr



   .. py:method:: _get_registered_lang(lang)

      Retrieve the registered language key from the MultiLangString.

      This method performs a case-insensitive lookup to find and return the registered language key
      in the MultiLangString. If the language key is not found, it returns None.

      :param lang: The language key to look up.
      :type lang: str
      :return: The registered language key, or None if not found.
      :rtype: Union[str, None]

      :Example:
      >>> mls = MultiLangString({"en": {"Hello"}, "fr": {"Bonjour"}})
      >>> registered_lang = mls._get_registered_lang("EN")
      >>> print(registered_lang)  # Output: en



   .. py:method:: _merge_language_entries(mls_dict)
      :staticmethod:


      Merge language entries in a dictionary where the language codes match case-insensitively.

      This static method takes a dictionary with language codes as keys and sets of strings as values.
      It merges entries with case-insensitive language codes, combining their text sets. The original
      language codes are preserved if there are no case-insensitive duplicates.

      :param mls_dict: A dictionary with language codes as keys and sets of strings as values.
      :type mls_dict: dict[str, set[str]]
      :return: A dictionary with merged entries for case-insensitive duplicates, preserving original case otherwise.
      :rtype: dict[str, set[str]]

      :Example:
      >>> mls_dict = {"en": {"Hello"}, "EN": {"World"}, "fr": {"Bonjour"}}
      >>> merged_dict = MultiLangString._merge_language_entries(mls_dict)
      >>> print(merged_dict)  # Output: {'en': {'Hello', 'World'}, 'fr': {'Bonjour'}}



.. py:class:: SetLangString(texts = None, lang = '')

   A class to encapsulate a set of strings with a common language tag.

   This class provides functionality to associate a set of text strings with a single language tag, offering methods
   for set representation, element addition, removal, and various set operations. The behavior of this class is
   influenced by control flags from the Controller class, which can enforce non-empty text, valid language tags,
   and other constraints.

   Many standard set methods are overridden to return SetLangString objects, allowing seamless integration and
   extended functionality. This design ensures that users can work with SetLangString instances similarly to
   regular sets.

   :ivar texts: The set of text strings.
   :vartype texts: set[str]
   :ivar lang: The language tag for the set of texts.
   :vartype lang: str
   :raises ValueError: If control flags enforce non-empty text and any text in the set is empty.
   :raises TypeError: If the types of parameters are incorrect based on validation.


   .. py:property:: texts
      :type: set[str]

      Get the set of text strings.

      :return: The set of text strings.
      :rtype: set[str]



   .. py:property:: lang
      :type: str

      Get the language tag.

      :return: The language tag.
      :rtype: str



   .. py:method:: add_langstring(langstring)

      Add a LangString object to the set of texts.

      This method validates the type and language of the LangString object and adds its text to the set.
      The behavior is influenced by control flags set in the Controller.

      :param langstring: The LangString object to add.
      :type langstring: LangString
      :raises TypeError: If the provided langstring is not of type LangString.
      :raises ValueError: If the control flags enforce valid language tags and the langstring's language tag is
                          invalid, or if the language tag of the langstring does not match the set's language tag.

      :Example:

      >>> set_lang_str = SetLangString({"Hello"}, "en")
      >>> lang_str = LangString("World", "en")
      >>> set_lang_str.add_langstring(lang_str)
      >>> print(set_lang_str)  # Output: {'Hello', 'World'}@en



   .. py:method:: add_text(text)

      Add a text string to the set of texts.

      This method validates the type of the text string and adds it to the set.
      The behavior is influenced by control flags set in the Controller.

      :param text: The text string to add.
      :type text: str
      :raises TypeError: If the provided text is not of type str.
      :raises ValueError: If the control flags enforce non-empty text and the text string is empty.

      :Example:

      >>> set_lang_str = SetLangString({"Hello"}, "en")
      >>> set_lang_str.add_text("World")
      >>> print(set_lang_str)  # Output: {'Hello', 'World'}@en



   .. py:method:: discard_text(text)

      Discard a text string from the set of texts.

      This method removes the text string from the set if it is present. If the text string is not present,
      the set remains unchanged. The method does not raise an error if the text is not found.

      :param text: The text string to discard.
      :type text: str
      :raises TypeError: If the provided text is not of type str.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str.discard_text("World")
      >>> print(set_lang_str)  # Output: {'Hello'}@en
      >>> set_lang_str.discard_text("Python")
      >>> print(set_lang_str)  # Output: {'Hello'}@en



   .. py:method:: discard_langstring(langstring)

      Discard a LangString object from the set of texts.

      This method validates the type and language of the LangString object and removes its text from the set if it
      is present. If the text is not present, the set remains unchanged. The method does not raise an error if the
      text is not found.

      :param langstring: The LangString object to discard.
      :type langstring: LangString
      :raises TypeError: If the provided langstring is not of type LangString.
      :raises ValueError: If the language tag of the langstring does not match the set's language tag.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> lang_str = LangString("World", "en")
      >>> set_lang_str.discard_langstring(lang_str)
      >>> print(set_lang_str)  # Output: {'Hello'}@en
      >>> lang_str = LangString("Python", "en")
      >>> set_lang_str.discard_langstring(lang_str)
      >>> print(set_lang_str)  # Output: {'Hello'}@en



   .. py:method:: remove_langstring(langstring)

      Remove a text string from the set of texts.

      This method removes the text string from the set. If the text string is not present, a KeyError is raised.

      :param text: The text string to remove.
      :type text: str
      :raises TypeError: If the provided text is not of type str.
      :raises KeyError: If the text string is not found in the set.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str.remove_text("World")
      >>> print(set_lang_str)  # Output: {'Hello'}@en
      >>> set_lang_str.remove_text("Python")  # Raises KeyError



   .. py:method:: remove_text(text)

      Remove a LangString object from the set of texts.

      This method validates the type and language of the LangString object and removes its text from the set. If the
      text is not present, a KeyError is raised.

      :param langstring: The LangString object to remove.
      :type langstring: LangString
      :raises TypeError: If the provided langstring is not of type LangString.
      :raises ValueError: If the language tag of the langstring does not match the set's language tag.
      :raises KeyError: If the text string is not found in the set.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> lang_str = LangString("World", "en")
      >>> set_lang_str.remove_langstring(lang_str)
      >>> print(set_lang_str)  # Output: {'Hello'}@en
      >>> lang_str = LangString("Python", "en")
      >>> set_lang_str.remove_langstring(lang_str)  # Raises KeyError



   .. py:method:: to_langstrings()

      Convert the set of texts to a list of LangString objects.

      This method creates a LangString object for each text in the set, associating it with the set's language tag.

      :return: A list of LangString objects.
      :rtype: list[LangString]

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> langstrings = set_lang_str.to_langstrings()
      >>> for lang_str in langstrings:
      ...     print(lang_str)
      ...
      # Output:
      # "Hello"@en
      # "World"en



   .. py:method:: to_strings(print_quotes = None, separator = '@', print_lang = None)

      Convert the set of texts to a list of formatted strings.

      Converts each text in the set to a formatted string, optionally including quotes and the language tag.
      The behavior is influenced by control flags set in the Controller.
      The resulting list of strings is sorted to generate a deterministic output.

      :param print_quotes: If True, wrap the text in quotes. If None, use the default setting from the Controller.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between the text and language tag.
      :type separator: str
      :param print_lang: If True, include the language tag. If None, use the default setting from the Controller.
      :type print_lang: Optional[bool]
      :return: A sorted list of formatted strings.
      :rtype: list[str]

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> strings = set_lang_str.to_strings()
      >>> for s in strings:
      ...     print(s)
      ...
      # Output:
      # "Hello"@en
      # "World"@en
      >>> strings = set_lang_str.to_strings(print_quotes=False, print_lang=False)
      >>> for s in strings:
      ...     print(s)
      ...
      # Output:
      # Hello
      # World



   .. py:method:: add(new_element)

      Add a new element to the set of texts.

      This method adds a new element, which can be a string or a LangString object, to the set. It mimics the behavior
      of the standard set's add method, allowing for seamless integration and extended functionality. The behavior is
      influenced by control flags set in the Controller.

      :param new_element: The element to add, either a text string or a LangString object.
      :type new_element: Union[str, LangString]
      :raises TypeError: If the provided new_element is neither a str nor a LangString.
      :raises ValueError: If the control flags enforce valid language tags and the new_element's language tag is
                          invalid, or if the language tag of the new_element does not match the set's language tag.

      :Example:

      >>> set_lang_str = SetLangString({"Hello"}, "en")
      >>> set_lang_str.add("World")
      >>> print(set_lang_str)  # Output: {'Hello', 'World'}@en
      >>> lang_str = LangString("New String", "en")
      >>> set_lang_str.add(lang_str)
      >>> print(set_lang_str)  # Output: {'Hello', 'New String', 'World'}@en



   .. py:method:: clear()

      Remove all elements from the set of texts.

      This method clears all elements from the set, mimicking the behavior of the standard set's clear method,
      resulting in an empty set.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str.clear()
      >>> print(set_lang_str)  # Output: {}@en



   .. py:method:: copy()

      Create a shallow copy of the SetLangString.

      This method returns a new SetLangString object that is a shallow copy of the original, mimicking the behavior
      of the standard set's copy method.

      :return: A shallow copy of the SetLangString.
      :rtype: SetLangString

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> copied_set_lang_str = set_lang_str.copy()
      >>> print(copied_set_lang_str)  # Output: {'Hello', 'World'}@en



   .. py:method:: discard(element)

      Discard an element from the set of texts.

      This method removes the element from the set if it is present. If the element is not present, the set remains
      unchanged. It mimics the behavior of the standard set's discard method and does not raise an error if the
      element is not found.

      :param element: The element to discard, either a text string or a LangString object.
      :type element: Union[str, LangString]
      :raises TypeError: If the provided element is neither a str nor a LangString.
      :raises ValueError: If the language tag of the LangString does not match the set's language tag.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str.discard("World")
      >>> print(set_lang_str)  # Output: {'Hello'}@en
      >>> lang_str = LangString("Python", "en")
      >>> set_lang_str.discard(lang_str)
      >>> print(set_lang_str)  # Output: {'Hello'}@en



   .. py:method:: pop()

      Remove and return an arbitrary element from the set of texts.

      This method removes and returns an arbitrary element from the set, mimicking the behavior of the standard set's
      pop method. If the set is empty, a KeyError is raised.

      :return: An arbitrary element from the set.
      :rtype: str
      :raises KeyError: If the set is empty.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> element = set_lang_str.pop()
      >>> print(element)  # Output: 'Hello' or 'World'
      >>> print(set_lang_str)  # Output: {'World'}@en or {'Hello'}@en



   .. py:method:: remove(element)

      Remove an element from the set of texts.

      This method removes the specified element from the set. If the element is not present, a KeyError is raised.
      It mimics the behavior of the standard set's remove method.

      :param element: The element to remove, either a text string or a LangString object.
      :type element: Union[str, LangString]
      :raises TypeError: If the provided element is neither a str nor a LangString.
      :raises ValueError: If the language tag of the LangString does not match the set's language tag.
      :raises KeyError: If the element is not found in the set.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str.remove("World")
      >>> print(set_lang_str)  # Output: {'Hello'}@en
      >>> lang_str = LangString("Python", "en")
      >>> set_lang_str.remove(lang_str)  # Raises KeyError



   .. py:method:: difference(*others)

      Return the difference of the set and another set or sets.

      This method returns a new SetLangString containing elements that are in the set but not in the others. It
      mimics the behavior of the standard set's difference method.

      :param others: One or more sets or SetLangString objects to compute the difference with.
      :type others: Union[set[str], SetLangString]
      :return: A new SetLangString containing the difference of the sets.
      :rtype: SetLangString
      :raises ValueError: If the language tag of any SetLangString in others does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> diff_set_lang_str = set_lang_str1.difference(set_lang_str2)
      >>> print(diff_set_lang_str)  # Output: {'Hello'}@en



   .. py:method:: difference_update(*others)

      Update the set, removing elements found in others.

      This method updates the set, removing all elements that are also in another set or sets. It mimics the behavior
      of the standard set's difference_update method.

      :param others: One or more sets or SetLangString objects to compute the difference with.
      :type others: Union[set[str], SetLangString]
      :raises ValueError: If the language tag of any SetLangString in others does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> set_lang_str1.difference_update(set_lang_str2)
      >>> print(set_lang_str1)  # Output: {'Hello'}@en



   .. py:method:: isdisjoint(other)

      Return True if the set has no elements in common with another set.

      This method checks if the set has no elements in common with another set or SetLangString,
      mimicking the behavior of the standard set's isdisjoint method.

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :return: True if the sets are disjoint, False otherwise.
      :rtype: bool
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"Python", "Java"}, "en")
      >>> disjoint = set_lang_str1.isdisjoint(set_lang_str2)
      >>> print(disjoint)  # Output: True



   .. py:method:: issubset(other)

      Return True if the set is a subset of another set.

      This method checks if the set is a subset of another set or SetLangString, mimicking the behavior of the
      standard set's issubset method.

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :return: True if the set is a subset, False otherwise.
      :rtype: bool
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello"}, "en")
      >>> set_lang_str2 = SetLangString({"Hello", "World"}, "en")
      >>> subset = set_lang_str1.issubset(set_lang_str2)
      >>> print(subset)  # Output: True



   .. py:method:: issuperset(other)

      Return True if the set is a superset of another set.

      This method checks if the set is a superset of another set or SetLangString, mimicking the behavior of the
      standard set's issuperset method.

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :return: True if the set is a superset, False otherwise.
      :rtype: bool
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"Hello"}, "en")
      >>> superset = set_lang_str1.issuperset(set_lang_str2)
      >>> print(superset)  # Output: True



   .. py:method:: intersection(*others)

      Return the intersection of the set and other sets.

      This method returns a new SetLangString containing elements that are common to the set and all of the others.
      It mimics the behavior of the standard set's intersection method.

      :param others: One or more sets or SetLangString objects to compute the intersection with.
      :type others: Union[set[str], SetLangString]
      :return: A new SetLangString containing the intersection of the sets.
      :rtype: SetLangString
      :raises ValueError: If the language tag of any SetLangString in others does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> intersect_set_lang_str = set_lang_str1.intersection(set_lang_str2)
      >>> print(intersect_set_lang_str)  # Output: {'World'}@en



   .. py:method:: intersection_update(*others)

      Update the set, keeping only elements found in it and all others.

      This method updates the set, keeping only elements that are common to the set and all of the others. It mimics
      the behavior of the standard set's intersection_update method.

      :param others: One or more sets or SetLangString objects to compute the intersection with.
      :type others: Union[set[str], SetLangString]
      :raises ValueError: If the language tag of any SetLangString in others does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> set_lang_str1.intersection_update(set_lang_str2)
      >>> print(set_lang_str1)  # Output: {'World'}@en



   .. py:method:: symmetric_difference(other)

      Return the symmetric difference of the set and another set.

      This method returns a new SetLangString containing elements that are in either the set or the other set, but not
      in both. It mimics the behavior of the standard set's symmetric_difference method.

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :return: A new SetLangString containing the symmetric difference of the sets.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> sym_diff_set_lang_str = set_lang_str1.symmetric_difference(set_lang_str2)
      >>> print(sym_diff_set_lang_str)  # Output: {'Hello', 'Python'}@en



   .. py:method:: symmetric_difference_update(other)

      Update the set, keeping only elements found in either set, but not in both.

      This method updates the set, keeping only elements that are in either the set or the other set, but not in both.
      It mimics the behavior of the standard set's symmetric_difference_update method.

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> set_lang_str1.symmetric_difference_update(set_lang_str2)
      >>> print(set_lang_str1)  # Output: {'Hello', 'Python'}@en



   .. py:method:: union(*others)

      Return the union of the set and other sets.

      This method returns a new SetLangString containing all elements that are in the set, in others, or in both. It
      mimics the behavior of the standard set's union method.

      :param others: One or more sets or SetLangString objects to compute the union with.
      :type others: Union[set[str], SetLangString]
      :return: A new SetLangString containing the union of the sets.
      :rtype: SetLangString
      :raises ValueError: If the language tag of any SetLangString in others does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello"}, "en")
      >>> set_lang_str2 = SetLangString({"World"}, "en")
      >>> union_set_lang_str = set_lang_str1.union(set_lang_str2)
      >>> print(union_set_lang_str)  # Output: {'Hello', 'World'}@en



   .. py:method:: update(*others)

      Update the set, adding elements from all others.

      This method updates the set, adding all elements that are in others. It mimics the behavior of the standard
      set's update method.

      :param others: One or more sets or SetLangString objects to update the set with.
      :type others: Union[set[str], SetLangString]
      :raises ValueError: If the language tag of any SetLangString in others does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello"}, "en")
      >>> set_lang_str2 = SetLangString({"World"}, "en")
      >>> set_lang_str1.update(set_lang_str2)
      >>> print(set_lang_str1)  # Output: {'Hello', 'World'}@en



   .. py:method:: __and__(other)

      Return the intersection of the set and another set.

      This method returns a new SetLangString containing elements that are common to the set and the other set. It
      mimics the behavior of the standard set's __and__ method (set intersection operator `&`).

      :param other: The other set or SetLangString to intersect with.
      :type other: Union[set[str], SetLangString]
      :return: A new SetLangString containing the intersection of the sets.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> intersect_set_lang_str = set_lang_str1 & set_lang_str2
      >>> print(intersect_set_lang_str)  # Output: {'World'}@en



   .. py:method:: __contains__(element)

      Return True if the set contains the specified element.

      This method checks if the specified element is in the set, mimicking the behavior of the standard set's
      __contains__ method (membership test operator `in`).

      :param element: The element to check for membership, either a text string or a LangString object.
      :type element: Union[str, LangString]
      :return: True if the element is in the set, False otherwise.
      :rtype: bool
      :raises TypeError: If the provided element is neither a str nor a LangString.
      :raises ValueError: If the language tag of the LangString does not match the set's language tag.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> contains_hello = "Hello" in set_lang_str
      >>> print(contains_hello)  # Output: True
      >>> lang_str = LangString("Python", "en")
      >>> contains_python = lang_str in set_lang_str
      >>> print(contains_python)  # Output: False



   .. py:method:: __eq__(other)

      Return True if the set is equal to another set.

      This method checks if the set is equal to another SetLangString, mimicking the behavior of the standard set's
      __eq__ method (equality operator `==`).

      :param other: The other SetLangString to compare with.
      :type other: object
      :return: True if the sets are equal, False otherwise.
      :rtype: bool
      :raises NotImplementedError: If the other object is not a SetLangString.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Hello"}, "en")
      >>> is_equal = set_lang_str1 == set_lang_str2
      >>> print(is_equal)  # Output: True



   .. py:method:: __ge__(other)

      Return True if the set is a superset of another set.

      This method checks if the set is a superset of another set or SetLangString, mimicking the behavior of the
      standard set's __ge__ method (superset operator `>=`).

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :return: True if the set is a superset, False otherwise.
      :rtype: bool
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"Hello"}, "en")
      >>> is_superset = set_lang_str1 >= set_lang_str2
      >>> print(is_superset)  # Output: True



   .. py:method:: __gt__(other)

      Return True if the set is a proper superset of another set.

      This method checks if the set is a proper superset of another set or SetLangString, mimicking the behavior
      of the standard set's __gt__ method (proper superset operator `>`).

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :return: True if the set is a proper superset, False otherwise.
      :rtype: bool
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"Hello"}, "en")
      >>> is_proper_superset = set_lang_str1 > set_lang_str2
      >>> print(is_proper_superset)  # Output: True



   .. py:method:: __hash__()

      Generate a hash for a SetLangString object.

      This method generates a hash value for the SetLangString object, mimicking the behavior of the standard set's
      __hash__ method. The set of texts is converted to a frozenset for hashing, as sets are mutable and unhashable.

      :return: The hash value of the SetLangString object.
      :rtype: int

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> hash_value = hash(set_lang_str)
      >>> print(hash_value)  # Output: A unique integer representing the hash value



   .. py:method:: __iand__(other)

      Update the set, keeping only elements found in it and another set.

      This method updates the set, keeping only elements that are common to the set and the other set, mimicking the
      behavior of the standard set's __iand__ method (in-place intersection operator `&=`).

      :param other: The other set or SetLangString to intersect with.
      :type other: Union[set[str], SetLangString]
      :return: The updated SetLangString.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> set_lang_str1 &= set_lang_str2
      >>> print(set_lang_str1)  # Output: {'World'}@en



   .. py:method:: __ior__(other)

      Update the set, adding elements from another set.

      This method updates the set, adding all elements that are in the other set, mimicking the behavior of the
      standard set's __ior__ method (in-place union operator `|=`).

      :param other: The other set or SetLangString to union with.
      :type other: Union[set[str], SetLangString]
      :return: The updated SetLangString.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello"}, "en")
      >>> set_lang_str2 = SetLangString({"World"}, "en")
      >>> set_lang_str1 |= set_lang_str2
      >>> print(set_lang_str1)  # Output: {'Hello', 'World'}@en



   .. py:method:: __isub__(other)

      Update the set, removing elements found in another set.

      This method updates the set, removing all elements that are also in the other set, mimicking the behavior of the
      standard set's __isub__ method (in-place difference operator `-=`).

      :param other: The other set or SetLangString to difference with.
      :type other: Union[set[str], SetLangString]
      :return: The updated SetLangString.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World"}, "en")
      >>> set_lang_str1 -= set_lang_str2
      >>> print(set_lang_str1)  # Output: {'Hello'}@en



   .. py:method:: __iter__()

      Return an iterator over the elements of the set.

      This method returns an iterator over the elements of the set, mimicking the behavior of the standard set's
      __iter__ method.

      :return: An iterator over the elements of the set.
      :rtype: Iterator[str]

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> for text in set_lang_str:
      ...     print(text)
      ...
      >>> # Output: 'Hello'
      >>> #         'World'



   .. py:method:: __ixor__(other)

      Update the set, keeping only elements found in either set, but not in both.

      This method updates the set, keeping only elements that are in either the set or the other set, but not in both,
      mimicking the behavior of the standard set's __ixor__ method (in-place symmetric difference operator `^=`).

      :param other: The other set or SetLangString to symmetric difference with.
      :type other: Union[set[str], SetLangString]
      :return: The updated SetLangString.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> set_lang_str1 ^= set_lang_str2
      >>> print(set_lang_str1)  # Output: {'Hello', 'Python'}@en



   .. py:method:: __le__(other)

      Return True if the set is a subset of another set.

      This method checks if the set is a subset of another set or SetLangString, mimicking the behavior of the
      standard set's __le__ method (subset operator `<=`).

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :return: True if the set is a subset, False otherwise.
      :rtype: bool
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello"}, "en")
      >>> set_lang_str2 = SetLangString({"Hello", "World"}, "en")
      >>> is_subset = set_lang_str1 <= set_lang_str2
      >>> print(is_subset)  # Output: True



   .. py:method:: __len__()

      Return the number of elements in the set.

      This method returns the number of elements in the set,
      mimicking the behavior of the standard set's __len__ method.

      :return: The number of elements in the set.
      :rtype: int

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> length = len(set_lang_str)
      >>> print(length)  # Output: 2



   .. py:method:: __lt__(other)

      Return True if the set is a proper subset of another set.

      This method checks if the set is a proper subset of another set or SetLangString, mimicking the behavior of the
      standard set's __lt__ method (proper subset operator `<`).

      :param other: The other set or SetLangString to compare with.
      :type other: Union[set[str], SetLangString]
      :return: True if the set is a proper subset, False otherwise.
      :rtype: bool
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello"}, "en")
      >>> set_lang_str2 = SetLangString({"Hello", "World"}, "en")
      >>> is_proper_subset = set_lang_str1 < set_lang_str2
      >>> print(is_proper_subset)  # Output: True



   .. py:method:: __or__(other)

      Return the union of the set and another set.

      This method returns a new SetLangString containing all elements that are in the set,
      in the other set, or in both. It mimics the behavior of the standard set's __or__ method (union operator `|`).

      :param other: The other set or SetLangString to union with.
      :type other: Union[set[str], SetLangString]
      :return: A new SetLangString containing the union of the sets.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello"}, "en")
      >>> set_lang_str2 = SetLangString({"World"}, "en")
      >>> union_set_lang_str = set_lang_str1 | set_lang_str2
      >>> print(union_set_lang_str)  # Output: {'Hello', 'World'}@en



   .. py:method:: __repr__()

      Return the official string representation of the SetLangString object.

      This method returns an official string representation of the SetLangString object, mimicking the behavior of the
      standard set's __repr__ method. This representation can be used for debugging and logging.

      :return: The official string representation of the SetLangString object.
      :rtype: str

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> repr_str = repr(set_lang_str)
      >>> print(repr_str)  # Output: SetLangString(texts={'Hello', 'World'}, lang='en')



   .. py:method:: __str__()

      Return the string representation of the SetLangString object.

      This method provides a concise string representation of the SetLangString, listing each text entry with its
      associated language tag if the corresponding flags are set. It mimics the behavior of the standard set's
      __str__ method.
      The method provide a deterministic output by sorting the elements before printing.

      :return: The string representation of the SetLangString object.
      :rtype: str

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> print(str(set_lang_str))  # Output: {'Hello', 'World'}@en



   .. py:method:: __sub__(other)

      Return the difference of the set and another set.

      This method returns a new SetLangString containing elements that are in the set but not in the other set. It
      mimics the behavior of the standard set's __sub__ method (difference operator `-`).

      :param other: The other set or SetLangString to difference with.
      :type other: Union[set[str], SetLangString]
      :return: A new SetLangString containing the difference of the sets.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> diff_set_lang_str = set_lang_str1 - set_lang_str2
      >>> print(diff_set_lang_str)  # Output: {'Hello'}@en



   .. py:method:: __xor__(other)

      Return the symmetric difference of the set and another set.

      This method returns a new SetLangString containing elements that are in either the set or the other set, but not
      in both. It mimics the behavior of the standard set's __xor__ method (symmetric difference operator `^`).

      :param other: The other set or SetLangString to symmetric difference with.
      :type other: Union[set[str], SetLangString]
      :return: A new SetLangString containing the symmetric difference of the sets.
      :rtype: SetLangString
      :raises ValueError: If the language tag of the SetLangString in other does not match the set's language tag.

      :Example:

      >>> set_lang_str1 = SetLangString({"Hello", "World"}, "en")
      >>> set_lang_str2 = SetLangString({"World", "Python"}, "en")
      >>> sym_diff_set_lang_str = set_lang_str1 ^ set_lang_str2
      >>> print(sym_diff_set_lang_str)  # Output: {'Hello', 'Python'}@en



   .. py:method:: merge_setlangstrings(setlangstrings)
      :staticmethod:


      Merge duplicated SetLangStrings based on their language tags using the union method.

      This method processes a list of SetLangString instances, identifying and merging duplicates based on their
      language tags.
      If there's no case variation in the language tags among duplicates, the original casing is preserved.
      If case variations are found, the casefolded version of the language tag is used in the merged SetLangString.

      :param setlangstrings: The list of SetLangString instances to be merged.
      :type setlangstrings: list[SetLangString]
      :return: A list of merged SetLangString instances without duplicates.
      :rtype: list[SetLangString]
      :raises TypeError: If the input is not a list of SetLangString instances.

      :Example:

      >>> setlangstr1 = SetLangString({"Hello"}, "en")
      >>> setlangstr2 = SetLangString({"World"}, "en")
      >>> setlangstr3 = SetLangString({"Bonjour"}, "fr")
      >>> setlangstr4 = SetLangString({"Hello"}, "EN")
      >>> merged_list = SetLangString.merge_setlangstrings([setlangstr1, setlangstr2, setlangstr3, setlangstr4])
      >>> for s in merged_list:
      ...     print(s)
      ...
      >>> # Output: {'Hello', 'World'}@en
      >>> #         {'Bonjour'}@fr



   .. py:method:: _validate_match_types_and_langs(other, overwrite_strict = False)

      Validate that the type and language of the other operand match the expected type and language.

      This method checks if the operand type is valid based on the control flag for type matching. If strict type
      matching is enabled, only SetLangString or LangString types are allowed. Additionally, it checks if the language
      tags of both LangString and SetLangString objects are compatible.

      :param other: The operand to be validated.
      :type other: Union[str, set[str], SetLangString, LangString]
      :param overwrite_strict: If True, enforces strict type matching regardless of the control flag.
      :type overwrite_strict: bool
      :raises TypeError: If strict mode is enabled and the operand is not of type SetLangString or LangString.
      :raises ValueError: If the languages of both objects do not match.

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> lang_str = LangString("Python", "en")
      >>> set_lang_str._validate_match_types_and_langs(lang_str, True)  # No exception
      >>> lang_str_fr = LangString("Bonjour", "fr")
      >>> set_lang_str._validate_match_types_and_langs(lang_str_fr, True)
      # Raises ValueError due to incompatible languages
      >>> set_lang_str._validate_match_types_and_langs(123, True)
      # Raises TypeError due to strict mode



   .. py:method:: _extract_texts(other)

      Extract the set of texts from the other operand.

      This method extracts the set of texts from the other operand, which can be either a regular set of strings or
      a SetLangString object.

      :param other: The operand from which to extract the texts.
      :type other: Union[set[str], SetLangString]
      :return: The set of texts extracted from the operand.
      :rtype: set[str]

      :Example:

      >>> set_lang_str = SetLangString({"Hello", "World"}, "en")
      >>> texts = set_lang_str._extract_texts({"Python", "Java"})
      >>> print(texts)  # Output: {'Python', 'Java'}
      >>> texts = set_lang_str._extract_texts(set_lang_str)
      >>> print(texts)  # Output: {'Hello', 'World'}



