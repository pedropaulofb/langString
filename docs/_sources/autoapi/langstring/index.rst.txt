:py:mod:`langstring`
====================

.. py:module:: langstring

.. autoapi-nested-parse::

   The langstring package provides classes and utilities for handling multilingual text.

   It includes classes for single and multiple language strings, along with their control and validation mechanisms.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   utils/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   controller/index.rst
   converter/index.rst
   flags/index.rst
   langstring/index.rst
   multilangstring/index.rst
   setlangstring/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.Controller
   langstring.GlobalFlag
   langstring.LangStringFlag
   langstring.MultiLangStringFlag
   langstring.SetLangStringFlag
   langstring.LangString
   langstring.SetLangString




.. py:class:: Controller


   Control class for managing configuration flags, designed to be non-instantiable.

   This class uses class methods to set and retrieve configuration flags for language classes' behavior, ensuring a
   consistent global configuration state. It is made non-instantiable by using the NonInstantiable metaclass,
   emphasizing its role as a static configuration manager rather than an object to be instantiated.

   :cvar DEFAULT_FLAGS: The default state of each flag.
   :vartype DEFAULT_FLAGS: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]
   :cvar flags: Stores the current state of each flag.
   :vartype flags: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]

   .. py:attribute:: DEFAULT_FLAGS
      :type: dict[Union[langstring.flags.GlobalFlag, langstring.flags.LangStringFlag, langstring.flags.SetLangStringFlag, langstring.flags.MultiLangStringFlag], bool]

      

   .. py:attribute:: flags
      :type: dict[Union[langstring.flags.GlobalFlag, langstring.flags.LangStringFlag, langstring.flags.SetLangStringFlag, langstring.flags.MultiLangStringFlag], bool]

      

   .. py:method:: set_flag(flag, state)
      :classmethod:

      Set the state of a specified configuration flag for LangString, SetLangString, or MultiLangString.

      If a GlobalFlag is set, it also sets the corresponding flags in LangStringFlag, SetLangStringFlag,
      and MultiLangStringFlag to the same state.

      :param flag: The flag to be set, either an instance of one of the flag enums.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :param state: Setting this to True or False will enable or disable the flag, respectively.
      :type state: bool
      :raises TypeError: If 'flag' is not an instance of one of the flag enums, or if 'state' is not a Boolean.


   .. py:method:: get_flag(flag)
      :classmethod:

      Retrieve the current state of a specified configuration flag.

      Available for GlobalFlag, LangString, SetLangString, or MultiLangString.

      This class method provides a way to access the state of a flag globally for both LangString and
      MultiLangString classes.

      :param flag: The flag whose state is to be retrieved,
      either an instance of LangStringFlag or MultiLangStringFlag.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :return: The current state of the flag.
      :rtype: bool
      :raises TypeError: If 'flag' is not a member of LangStringFlag or MultiLangStringFlag.


   .. py:method:: get_flags()
      :classmethod:

      Retrieve the current state of all configuration flags.

      Available for GlobalFlag, LangString, SetLangString, or MultiLangString.

      This class method provides a way to access the states of all flags globally for both LangString and
      MultiLangString classes. It returns a copy of the flags dictionary, ensuring that the original data is not
      modified.

      :return: A dictionary mapping each flag to its boolean state, either for LangStringFlag or MultiLangStringFlag.
      :rtype: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]


   .. py:method:: print_flag(flag)
      :classmethod:

      Print the current state of a specific configuration flag.

      This class method prints the state of the specified flag to the console. It is useful for checking the state of
      an individual flag for LangString, SetLangString, MultiLangString, or GlobalFlag.

      :param flag: The flag whose state is to be printed.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]

      Note:
          This method is typically used for debugging or quick monitoring, to display the state of a specific flag.


   .. py:method:: print_flags(flag_type = None)
      :classmethod:

      Print the current state of configuration flags in alphabetical order.

      If a flag type is specified, only flags of that type are printed.
      If no flag type is specified, all flags are printed.

      :param flag_type: The type of flags to print (e.g., GlobalFlag, LangStringFlag).
                        If None, all flags are printed.
      :type flag_type: Optional[Type]


   .. py:method:: reset_flag(flag)
      :classmethod:

      Reset a specific flag to its default value.

      If the flag is of type GlobalFlag, reset all equivalent flags of other types.
      E.g., reset_flag(GlobalFlag.VALID_TEXT) will reset GlobalFlag.VALID_TEXT,
      LangStringFlag.VALID_TEXT, SetLangStringFlag.VALID_TEXT, and MultiLangStringFlag.VALID_TEXT.


   .. py:method:: reset_flags(flag_type = GlobalFlag)
      :classmethod:

      Reset all flags of a specific type to their default values.



.. py:class:: GlobalFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for global control flags.

   This enum defines various flags that can be used to configure the behavior of all classes.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of all classes.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of all classes.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for all classes' field 'lang'.
   :vartype VALID_LANG: Enum

   .. py:attribute:: CLEAR_EMPTY_LANG

      

   .. py:attribute:: DEFINED_LANG

      

   .. py:attribute:: DEFINED_TEXT

      

   .. py:attribute:: ENFORCE_EXTRA_DEPEND

      

   .. py:attribute:: LOWERCASE_LANG

      

   .. py:attribute:: METHODS_MATCH_TYPES

      

   .. py:attribute:: PRINT_WITH_LANG

      

   .. py:attribute:: PRINT_WITH_QUOTES

      

   .. py:attribute:: STRIP_LANG

      

   .. py:attribute:: STRIP_TEXT

      

   .. py:attribute:: VALID_LANG

      


.. py:class:: LangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a LangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a LangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the LangString's field 'lang'.
   :vartype VALID_LANG: Enum

   .. py:attribute:: DEFINED_LANG

      

   .. py:attribute:: DEFINED_TEXT

      

   .. py:attribute:: LOWERCASE_LANG

      

   .. py:attribute:: METHODS_MATCH_TYPES

      

   .. py:attribute:: PRINT_WITH_LANG

      

   .. py:attribute:: PRINT_WITH_QUOTES

      

   .. py:attribute:: STRIP_LANG

      

   .. py:attribute:: STRIP_TEXT

      

   .. py:attribute:: VALID_LANG

      


.. py:class:: MultiLangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for MultiLangString control flags.

   This enum defines various flags that can be used to configure the behavior of the MultiLangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a MultiLangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a MultiLangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the MultiLangString's field 'lang'.
   :vartype VALID_LANG: Enum

   .. py:attribute:: CLEAR_EMPTY_LANG

      

   .. py:attribute:: DEFINED_LANG

      

   .. py:attribute:: DEFINED_TEXT

      

   .. py:attribute:: LOWERCASE_LANG

      

   .. py:attribute:: PRINT_WITH_LANG

      

   .. py:attribute:: PRINT_WITH_QUOTES

      

   .. py:attribute:: STRIP_LANG

      

   .. py:attribute:: STRIP_TEXT

      

   .. py:attribute:: VALID_LANG

      


.. py:class:: SetLangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for SetLangString control flags.

   This enum defines various flags that can be used to configure the behavior of the SetLangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a SetLangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a SetLangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the SetLangString's field 'lang'.
   :vartype VALID_LANG: Enum

   .. py:attribute:: DEFINED_LANG

      

   .. py:attribute:: DEFINED_TEXT

      

   .. py:attribute:: LOWERCASE_LANG

      

   .. py:attribute:: METHODS_MATCH_TYPES

      

   .. py:attribute:: PRINT_WITH_LANG

      

   .. py:attribute:: PRINT_WITH_QUOTES

      

   .. py:attribute:: STRIP_LANG

      

   .. py:attribute:: STRIP_TEXT

      

   .. py:attribute:: VALID_LANG

      


.. py:class:: LangString(text = '', lang = '')


   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the Controller class, which can enforce non-empty text, valid language tags, and other constraints.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text.
   :vartype lang: str

   .. py:property:: text
      :type: str

      Getter for text.


   .. py:property:: lang
      :type: str

      Getter for lang.


   .. py:method:: capitalize()


   .. py:method:: casefold()


   .. py:method:: center(width, fillchar = ' ')


   .. py:method:: count(sub, start = 0, end = None)


   .. py:method:: endswith(suffix, start = 0, end = None)


   .. py:method:: expandtabs(tabsize = 8)


   .. py:method:: find(sub, start = 0, end = None)


   .. py:method:: format(*args, **kwargs)


   .. py:method:: format_map(mapping)


   .. py:method:: index(sub, start = 0, end = None)


   .. py:method:: isalnum()


   .. py:method:: isalpha()


   .. py:method:: isascii()


   .. py:method:: isdecimal()


   .. py:method:: isdigit()


   .. py:method:: isidentifier()


   .. py:method:: islower()


   .. py:method:: isnumeric()


   .. py:method:: isprintable()


   .. py:method:: isspace()


   .. py:method:: istitle()


   .. py:method:: isupper()


   .. py:method:: join(iterable)

      Join an iterable with the text of the LangString.


   .. py:method:: ljust(width, fillchar = ' ')

      Left justify the text.


   .. py:method:: lower()


   .. py:method:: lstrip(chars = None)


   .. py:method:: partition(sep)

      Partition the text.


   .. py:method:: replace(old, new, count = -1)


   .. py:method:: removeprefix(prefix)

      Remove the specified prefix from the LangString's text.

      If the text starts with the prefix string, return a new LangString with the prefix string removed.
      Otherwise, return a copy of the original LangString.

      :param prefix: The prefix to remove from the text.
      :return: A new LangString with the prefix removed.


   .. py:method:: removesuffix(suffix)

      Remove the specified suffix from the LangString's text.

      If the text ends with the suffix string, return a new LangString with the suffix string removed.
      Otherwise, return a copy of the original LangString.

      :param suffix: The suffix to remove from the text.
      :return: A new LangString with the suffix removed.


   .. py:method:: rfind(sub, start = 0, end = None)


   .. py:method:: rindex(sub, start = 0, end = None)


   .. py:method:: rjust(width, fillchar = ' ')

      Right justify the text.


   .. py:method:: rpartition(sep)

      Partition the text from the right.


   .. py:method:: rsplit(sep = None, maxsplit = -1)

      Split the text from the right.


   .. py:method:: rstrip(chars = None)


   .. py:method:: split(sep = None, maxsplit = -1)

      Split the text.


   .. py:method:: splitlines(keepends = False)

      Split the text into lines.


   .. py:method:: startswith(prefix, start = 0, end = None)


   .. py:method:: strip(chars = None)


   .. py:method:: swapcase()


   .. py:method:: title()


   .. py:method:: translate(table)

      Translate the text using a translation table.


   .. py:method:: upper()


   .. py:method:: zfill(width)


   .. py:method:: to_string(print_quotes = True, separator = '@', print_lang = True)


   .. py:method:: equals_str(other)


   .. py:method:: equals_langstring(other)


   .. py:method:: __add__(other)

      Add another LangString or a string to this LangString.

      The operation can only be performed if:
      - Both are LangString objects with the same language tag.
      - The other is a string, which will be concatenated to the text of this LangString.

      :param other: The LangString or string to add.
      :return: A new LangString with the concatenated text.
      :raises TypeError: If the objects are not compatible for addition.


   .. py:method:: __contains__(item)

      Check if a substring exists within the LangString's text.


   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return:
      :rtype: bool


   .. py:method:: __ge__(other)

      Check if this LangString is greater than or equal to another str or LangString object.


   .. py:method:: __getitem__(key)

      Retrieve a substring or a reversed string from the LangString's text.


   .. py:method:: __gt__(other)

      Check if this LangString is greater than another LangString object.


   .. py:method:: __hash__()

      Generate a hash new_text for a LangString object.

      :return: The hash new_text of the LangString object, based on its text and language tag.
      :rtype: int


   .. py:method:: __iadd__(other)

      Implement in-place addition.


   .. py:method:: __imul__(other)

      In-place multiplication of the LangString's text.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: The same LangString instance with the text repeated.
      :rtype: LangString


   .. py:method:: __iter__()

      Enable iteration over the text part of the LangString.


   .. py:method:: __le__(other)

      Check if this LangString is less than or equal to another LangString object.


   .. py:method:: __len__()

      Return the length of the LangString's text.


   .. py:method:: __lt__(other)

      Check if this LangString is less than another LangString object.


   .. py:method:: __mul__(other)

      Multiply the LangString's text a specified number of times.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString


   .. py:method:: __ne__(other)

      Check inequality of this LangString with another object.


   .. py:method:: __radd__(other)

      Handle concatenation when LangString is on the right side of the '+' operator.

      Only defined to 'other' of type string because the __add__ method is used when 'other' is a LangString.

      As it concatenates other's text to the LangString's text (in this order), it returns a string and, consequently,
      the result looses its language tag.


   .. py:method:: __repr__()

      Return an unambiguous string representation of the LangString.


   .. py:method:: __rmul__(other)

      Implement right multiplication.

      This method is called for the reversed operation of multiplication, i.e., when LangString is on the right side.
      It is typically used for repeating the LangString's text a specified number of times.

      :param other: The number of times the LangString's text should be repeated.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString
      :raises TypeError: If 'other' is not an integer.


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str


   .. py:method:: _validate_match_types(other, overwrite_strict = False)


   .. py:method:: _validate_match_langs(other)



.. py:class:: SetLangString(texts = None, lang = '')


   .. py:property:: texts
      :type: set[str]

      Getter for texts.


   .. py:property:: lang
      :type: str

      Getter for lang.


   .. py:method:: add(new_element)


   .. py:method:: clear()


   .. py:method:: copy()


   .. py:method:: discard(element)


   .. py:method:: pop()


   .. py:method:: remove(element)


   .. py:method:: difference(*others)


   .. py:method:: difference_update(*others)


   .. py:method:: isdisjoint(other)


   .. py:method:: issubset(other)


   .. py:method:: issuperset(other)


   .. py:method:: intersection(*others)


   .. py:method:: intersection_update(*others)


   .. py:method:: symmetric_difference(other)


   .. py:method:: symmetric_difference_update(other)


   .. py:method:: union(*others)


   .. py:method:: update(*others)


   .. py:method:: add_langstring(langstring)


   .. py:method:: add_text(text)


   .. py:method:: discard_langstring(langstring)


   .. py:method:: discard_text(text)


   .. py:method:: remove_langstring(langstring)


   .. py:method:: remove_text(text)


   .. py:method:: to_langstrings()


   .. py:method:: to_strings(print_quotes = True, separator = '@', print_lang = True)


   .. py:method:: __and__(other)


   .. py:method:: __contains__(element)


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __ge__(other)

      Check if self is a superset of another.


   .. py:method:: __gt__(other)

      Check if self is a proper superset of other.


   .. py:method:: __hash__()

      Generate a hash for a SetLangString object.


   .. py:method:: __iand__(other)


   .. py:method:: __ior__(other)


   .. py:method:: __isub__(other)


   .. py:method:: __iter__()


   .. py:method:: __ixor__(other)


   .. py:method:: __le__(other)

      Check if self is a subset of other.


   .. py:method:: __len__()


   .. py:method:: __lt__(other)

      Check if self is a proper subset of other.


   .. py:method:: __ne__(other)

      Return self!=value.


   .. py:method:: __or__(other)


   .. py:method:: __repr__()

      Return the official string representation of the SetLangString object.


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str


   .. py:method:: __sub__(other)


   .. py:method:: __xor__(other)


   .. py:method:: _validate_match_types_and_langs(other, overwrite_strict = False)


   .. py:method:: _extract_texts(other)



