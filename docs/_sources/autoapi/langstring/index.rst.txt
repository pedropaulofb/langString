:py:mod:`langstring`
====================

.. py:module:: langstring

.. autoapi-nested-parse::

   The langstring package provides classes and utilities for handling multilingual text.

   It includes classes for single and multiple language strings, along with their control and validation mechanisms.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   utils/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   controller/index.rst
   converter/index.rst
   flags/index.rst
   langstring/index.rst
   multilangstring/index.rst
   setlangstring/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.Controller
   langstring.Converter
   langstring.GlobalFlag
   langstring.LangStringFlag
   langstring.MultiLangStringFlag
   langstring.SetLangStringFlag
   langstring.LangString
   langstring.MultiLangString
   langstring.SetLangString




.. py:class:: Controller


   Control class for managing configuration flags, designed to be non-instantiable.

   This class uses class methods to set and retrieve configuration flags for language classes' behavior, ensuring a
   consistent global configuration state. It is made non-instantiable by using the NonInstantiable metaclass,
   emphasizing its role as a static configuration manager rather than an object to be instantiated.

   :cvar DEFAULT_FLAGS: The default state of each flag.
   :vartype DEFAULT_FLAGS: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]
   :cvar flags: Stores the current state of each flag.
   :vartype flags: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]

   .. py:attribute:: DEFAULT_FLAGS
      :type: dict[Union[langstring.flags.GlobalFlag, langstring.flags.LangStringFlag, langstring.flags.SetLangStringFlag, langstring.flags.MultiLangStringFlag], bool]

      

   .. py:attribute:: flags
      :type: dict[Union[langstring.flags.GlobalFlag, langstring.flags.LangStringFlag, langstring.flags.SetLangStringFlag, langstring.flags.MultiLangStringFlag], bool]

      

   .. py:method:: set_flag(flag, state)
      :classmethod:

      Set the state of a specified configuration flag for LangString, SetLangString, or MultiLangString.

      If a GlobalFlag is set, it also sets the corresponding flags in LangStringFlag, SetLangStringFlag,
      and MultiLangStringFlag to the same state.

      :param flag: The flag to be set, either an instance of one of the flag enums.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :param state: Setting this to True or False will enable or disable the flag, respectively.
      :type state: bool
      :raises TypeError: If 'flag' is not an instance of one of the flag enums, or if 'state' is not a Boolean.


   .. py:method:: get_flag(flag)
      :classmethod:

      Retrieve the current state of a specified configuration flag.

      Available for GlobalFlag, LangString, SetLangString, or MultiLangString.

      This class method provides a way to access the state of a flag globally for both LangString and
      MultiLangString classes.

      :param flag: The flag whose state is to be retrieved,
      either an instance of LangStringFlag or MultiLangStringFlag.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :return: The current state of the flag.
      :rtype: bool
      :raises TypeError: If 'flag' is not a member of LangStringFlag or MultiLangStringFlag.


   .. py:method:: get_flags()
      :classmethod:

      Retrieve the current state of all configuration flags.

      Available for GlobalFlag, LangString, SetLangString, or MultiLangString.

      This class method provides a way to access the states of all flags globally for both LangString and
      MultiLangString classes. It returns a copy of the flags dictionary, ensuring that the original data is not
      modified.

      :return: A dictionary mapping each flag to its boolean state, either for LangStringFlag or MultiLangStringFlag.
      :rtype: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]


   .. py:method:: print_flag(flag)
      :classmethod:

      Print the current state of a specific configuration flag.

      This class method prints the state of the specified flag to the console. It is useful for checking the state of
      an individual flag for LangString, SetLangString, MultiLangString, or GlobalFlag.

      :param flag: The flag whose state is to be printed.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]

      Note:
          This method is typically used for debugging or quick monitoring, to display the state of a specific flag.


   .. py:method:: print_flags(flag_type = None)
      :classmethod:

      Print the current state of configuration flags in alphabetical order.

      If a flag type is specified, only flags of that type are printed.
      If no flag type is specified, all flags are printed.

      :param flag_type: The type of flags to print (e.g., GlobalFlag, LangStringFlag).
                        If None, all flags are printed.
      :type flag_type: Optional[Type]


   .. py:method:: reset_flag(flag)
      :classmethod:

      Reset a specific flag to its default value.

      If the flag is of type GlobalFlag, reset all equivalent flags of other types.
      E.g., reset_flag(GlobalFlag.VALID_TEXT) will reset GlobalFlag.VALID_TEXT,
      LangStringFlag.VALID_TEXT, SetLangStringFlag.VALID_TEXT, and MultiLangStringFlag.VALID_TEXT.


   .. py:method:: reset_flags(flag_type = GlobalFlag)
      :classmethod:

      Reset all flags of a specific type to their default values.



.. py:class:: Converter


   A utility class for converting between different string types used in language processing.

   This class provides methods to convert between `LangString`, `SetLangString`, and `MultiLangString` types.
   It is designed to be non-instantiable as it serves as a utility class with class methods only.

   .. py:method:: to_string(arg)
      :classmethod:


   .. py:method:: to_strings(arg)
      :classmethod:


   .. py:method:: to_langstring(arg)
      :classmethod:

      Convert a SetLangString or MultiLangString to a list of LangStrings.

      :param arg: The SetLangString or MultiLangString to be converted.
      :type arg: Union[SetLangString, MultiLangString]
      :return: A list of LangStrings.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type SetLangString or MultiLangString.


   .. py:method:: to_setlangstring(arg)
      :classmethod:

      Convert a LangString or MultiLangString to a SetLangString or a list of SetLangStrings.

      :param arg: The LangString or MultiLangString to be converted.
      :type arg: Union[LangString, MultiLangString]
      :return: A SetLangString or a list of SetLangStrings.
      :rtype: Union[SetLangString, list[SetLangString]]
      :raises TypeError: If the arg is not of type LangString or MultiLangString.


   .. py:method:: to_multilangstring(arg)
      :classmethod:

      Convert a LangString or SetLangString to a MultiLangString.

      :param arg: The LangString or SetLangString to be converted.
      :type arg: Union[LangString, SetLangString]
      :return: A MultiLangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type LangString or SetLangString.


   .. py:method:: from_string_to_langstring(arg_string, ignore_at_sign = False)
      :staticmethod:

      Convert a string into a LangString.

      If the string contains '@', it splits the string into text (left part) and lang (right part).
      If there is no '@', the entire string is set as text and lang is set to an empty string.

      :param arg_string: The arg string to be converted.
      :return: A LangString


   .. py:method:: from_strings_to_langstrings(arg, lang)
      :staticmethod:


   .. py:method:: from_strings_to_setlangstring(arg, lang)
      :staticmethod:


   .. py:method:: from_strings_to_multilangstring(arg)
      :classmethod:


   .. py:method:: from_langstring_to_string(arg)
      :staticmethod:


   .. py:method:: from_langstring_to_setlangstring(arg)
      :staticmethod:

      Convert a LangString to a SetLangString.

      This method creates a SetLangString from a LangString. The resulting SetLangString contains the text of the
      LangString in a set and retains its language.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :return: A SetLangString containing the text from the arg LangString.
      :rtype: SetLangString
      :raises TypeError: If the arg is not of type LangString.


   .. py:method:: from_langstrings_to_setlangstring(arg)
      :staticmethod:


   .. py:method:: from_langstring_to_multilangstring(arg)
      :staticmethod:

      Convert a LangString to a MultiLangString.

      This method takes a single LangString and converts it into a MultiLangString. The resulting MultiLangString
      contains the text and language of the arg LangString.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :return: A MultiLangString containing the text and language from the arg LangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type LangString.


   .. py:method:: from_langstrings_to_multilangstring(arg)
      :staticmethod:


   .. py:method:: from_setlangstring_to_string(arg)
      :staticmethod:


   .. py:method:: from_setlangstring_to_strings(arg, print_quotes = True, separator = '@', print_lang = True)
      :staticmethod:


   .. py:method:: from_setlangstring_to_langstrings(arg)
      :staticmethod:

      Convert a SetLangString to a list of LangStrings.

      This method takes a SetLangString and converts it into a list of LangStrings, each containing one of the texts
      from the SetLangString and its associated language.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: A list of LangStrings, each corresponding to a text in the arg SetLangString.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type SetLangString.


   .. py:method:: from_setlangstring_to_multilangstring(arg)
      :staticmethod:

      Convert a SetLangString to a MultiLangString.

      This method creates a MultiLangString from a SetLangString. The resulting MultiLangString contains all texts
      from the SetLangString, associated with its language.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: A MultiLangString containing all texts from the arg SetLangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type SetLangString.


   .. py:method:: from_setlangstrings_to_multilangstring(arg)
      :staticmethod:


   .. py:method:: from_multilangstring_to_langstrings(arg, languages = None)
      :staticmethod:

      Convert a MultiLangString to a list of LangStrings.

      This method takes a MultiLangString and converts it into a list of LangStrings, each representing one of the
      texts in the MultiLangString along with its associated language.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :return: A list of LangStrings, each corresponding to a text in the arg MultiLangString.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type MultiLangString.


   .. py:method:: from_multilangstring_to_setlangstrings(arg, languages = None)
      :staticmethod:

      Convert a MultiLangString to a list of SetLangStrings.

      This method creates a list of SetLangStrings from a MultiLangString. Each SetLangString in the list contains
      texts of a single language from the MultiLangString.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :return: A list of SetLangStrings, each containing texts of a single language from the arg MultiLangString.
      :rtype: list[SetLangString]
      :raises TypeError: If the arg is not of type MultiLangString.


   .. py:method:: from_multilangstring_to_string(arg)
      :staticmethod:


   .. py:method:: from_multilangstring_to_strings(arg, languages = None, print_quotes = True, separator = '@', print_lang = True)
      :staticmethod:



.. py:class:: GlobalFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for global control flags.

   This enum defines various flags that can be used to configure the behavior of all classes.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of all classes.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of all classes.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for all classes' field 'lang'.
   :vartype VALID_LANG: Enum

   .. py:attribute:: DEFINED_LANG

      

   .. py:attribute:: DEFINED_TEXT

      

   .. py:attribute:: ENFORCE_EXTRA_DEPEND

      

   .. py:attribute:: LOWERCASE_LANG

      

   .. py:attribute:: METHODS_MATCH_TYPES

      

   .. py:attribute:: PRINT_WITH_LANG

      

   .. py:attribute:: PRINT_WITH_QUOTES

      

   .. py:attribute:: STRIP_LANG

      

   .. py:attribute:: STRIP_TEXT

      

   .. py:attribute:: VALID_LANG

      


.. py:class:: LangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a LangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a LangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the LangString's field 'lang'.
   :vartype VALID_LANG: Enum

   .. py:attribute:: DEFINED_LANG

      

   .. py:attribute:: DEFINED_TEXT

      

   .. py:attribute:: LOWERCASE_LANG

      

   .. py:attribute:: METHODS_MATCH_TYPES

      

   .. py:attribute:: PRINT_WITH_LANG

      

   .. py:attribute:: PRINT_WITH_QUOTES

      

   .. py:attribute:: STRIP_LANG

      

   .. py:attribute:: STRIP_TEXT

      

   .. py:attribute:: VALID_LANG

      


.. py:class:: MultiLangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for MultiLangString control flags.

   This enum defines various flags that can be used to configure the behavior of the MultiLangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a MultiLangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a MultiLangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the MultiLangString's field 'lang'.
   :vartype VALID_LANG: Enum

   .. py:attribute:: DEFINED_LANG

      

   .. py:attribute:: DEFINED_TEXT

      

   .. py:attribute:: LOWERCASE_LANG

      

   .. py:attribute:: PRINT_WITH_LANG

      

   .. py:attribute:: PRINT_WITH_QUOTES

      

   .. py:attribute:: STRIP_LANG

      

   .. py:attribute:: STRIP_TEXT

      

   .. py:attribute:: VALID_LANG

      


.. py:class:: SetLangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for SetLangString control flags.

   This enum defines various flags that can be used to configure the behavior of the SetLangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a SetLangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a SetLangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the SetLangString's field 'lang'.
   :vartype VALID_LANG: Enum

   .. py:attribute:: DEFINED_LANG

      

   .. py:attribute:: DEFINED_TEXT

      

   .. py:attribute:: LOWERCASE_LANG

      

   .. py:attribute:: METHODS_MATCH_TYPES

      

   .. py:attribute:: PRINT_WITH_LANG

      

   .. py:attribute:: PRINT_WITH_QUOTES

      

   .. py:attribute:: STRIP_LANG

      

   .. py:attribute:: STRIP_TEXT

      

   .. py:attribute:: VALID_LANG

      


.. py:class:: LangString(text = '', lang = '')


   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the Controller class, which can enforce non-empty text, valid language tags, and other constraints.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text.
   :vartype lang: str

   .. py:property:: text
      :type: str

      Getter for text.


   .. py:property:: lang
      :type: str

      Getter for lang.


   .. py:method:: capitalize()


   .. py:method:: casefold()


   .. py:method:: center(width, fillchar = ' ')


   .. py:method:: count(sub, start = 0, end = None)


   .. py:method:: endswith(suffix, start = 0, end = None)


   .. py:method:: expandtabs(tabsize = 8)


   .. py:method:: find(sub, start = 0, end = None)


   .. py:method:: format(*args, **kwargs)


   .. py:method:: format_map(mapping)


   .. py:method:: index(sub, start = 0, end = None)


   .. py:method:: isalnum()


   .. py:method:: isalpha()


   .. py:method:: isascii()


   .. py:method:: isdecimal()


   .. py:method:: isdigit()


   .. py:method:: isidentifier()


   .. py:method:: islower()


   .. py:method:: isnumeric()


   .. py:method:: isprintable()


   .. py:method:: isspace()


   .. py:method:: istitle()


   .. py:method:: isupper()


   .. py:method:: join(iterable)

      Join an iterable with the text of the LangString.


   .. py:method:: ljust(width, fillchar = ' ')

      Left justify the text.


   .. py:method:: lower()


   .. py:method:: lstrip(chars = None)


   .. py:method:: partition(sep)

      Partition the text.


   .. py:method:: replace(old, new, count = -1)


   .. py:method:: removeprefix(prefix)

      Remove the specified prefix from the LangString's text.

      If the text starts with the prefix string, return a new LangString with the prefix string removed.
      Otherwise, return a copy of the original LangString.

      :param prefix: The prefix to remove from the text.
      :return: A new LangString with the prefix removed.


   .. py:method:: removesuffix(suffix)

      Remove the specified suffix from the LangString's text.

      If the text ends with the suffix string, return a new LangString with the suffix string removed.
      Otherwise, return a copy of the original LangString.

      :param suffix: The suffix to remove from the text.
      :return: A new LangString with the suffix removed.


   .. py:method:: rfind(sub, start = 0, end = None)


   .. py:method:: rindex(sub, start = 0, end = None)


   .. py:method:: rjust(width, fillchar = ' ')

      Right justify the text.


   .. py:method:: rpartition(sep)

      Partition the text from the right.


   .. py:method:: rsplit(sep = None, maxsplit = -1)

      Split the text from the right.


   .. py:method:: rstrip(chars = None)


   .. py:method:: split(sep = None, maxsplit = -1)

      Split the text.


   .. py:method:: splitlines(keepends = False)

      Split the text into lines.


   .. py:method:: startswith(prefix, start = 0, end = None)


   .. py:method:: strip(chars = None)


   .. py:method:: swapcase()


   .. py:method:: title()


   .. py:method:: translate(table)

      Translate the text using a translation table.


   .. py:method:: upper()


   .. py:method:: zfill(width)


   .. py:method:: to_string(print_quotes = True, separator = '@', print_lang = True)


   .. py:method:: equals_str(other)


   .. py:method:: equals_langstring(other)


   .. py:method:: __add__(other)

      Add another LangString or a string to this LangString.

      The operation can only be performed if:
      - Both are LangString objects with the same language tag.
      - The other is a string, which will be concatenated to the text of this LangString.

      :param other: The LangString or string to add.
      :return: A new LangString with the concatenated text.
      :raises TypeError: If the objects are not compatible for addition.


   .. py:method:: __contains__(item)

      Check if a substring exists within the LangString's text.


   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return:
      :rtype: bool


   .. py:method:: __ge__(other)

      Check if this LangString is greater than or equal to another str or LangString object.


   .. py:method:: __getitem__(key)

      Retrieve a substring or a reversed string from the LangString's text.


   .. py:method:: __gt__(other)

      Check if this LangString is greater than another LangString object.


   .. py:method:: __hash__()

      Generate a hash new_text for a LangString object.

      :return: The hash new_text of the LangString object, based on its text and language tag.
      :rtype: int


   .. py:method:: __iadd__(other)

      Implement in-place addition.


   .. py:method:: __imul__(other)

      In-place multiplication of the LangString's text.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: The same LangString instance with the text repeated.
      :rtype: LangString


   .. py:method:: __iter__()

      Enable iteration over the text part of the LangString.


   .. py:method:: __le__(other)

      Check if this LangString is less than or equal to another LangString object.


   .. py:method:: __len__()

      Return the length of the LangString's text.


   .. py:method:: __lt__(other)

      Check if this LangString is less than another LangString object.


   .. py:method:: __mul__(other)

      Multiply the LangString's text a specified number of times.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString


   .. py:method:: __ne__(other)

      Check inequality of this LangString with another object.


   .. py:method:: __radd__(other)

      Handle concatenation when LangString is on the right side of the '+' operator.

      Only defined to 'other' of type string because the __add__ method is used when 'other' is a LangString.

      As it concatenates other's text to the LangString's text (in this order), it returns a string and, consequently,
      the result looses its language tag.


   .. py:method:: __repr__()

      Return an unambiguous string representation of the LangString.


   .. py:method:: __rmul__(other)

      Implement right multiplication.

      This method is called for the reversed operation of multiplication, i.e., when LangString is on the right side.
      It is typically used for repeating the LangString's text a specified number of times.

      :param other: The number of times the LangString's text should be repeated.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString
      :raises TypeError: If 'other' is not an integer.


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str


   .. py:method:: _validate_match_types(other, overwrite_strict = False)


   .. py:method:: _validate_match_langs(other)



.. py:class:: MultiLangString(mls_dict = None, pref_lang = 'en')


   A class for managing multilingual text strings with various language tags.

   Utilizes a global control strategy set in Controller to handle duplicate language tags. Supports
   operations like adding, removing, and retrieving language strings in multiple languages.

   :cvar mls_dict: A dictionary representing the internal structure of the MultiLangString.
   :vartype mls_dict: Optional[dict[str, set[str]]]
   :ivar pref_lang: The preferred language for this MultiLangString. Defaults to "en".
   :vartype pref_lang: str

   .. py:property:: mls_dict
      :type: dict[str, set[str]]

      Getter for texts.


   .. py:property:: pref_lang
      :type: str

      Get the preferred language for this MultiLangString.

      :return: The preferred language as a string.


   .. py:method:: add(arg)


   .. py:method:: add_entry(text, lang)

      Add a text entry to the MultiLangString under a specified language.

      Validates the provided text and language against the current flag settings before adding. If the specified
      language does not exist in the mls_dict, a new set for that language is created. The text is then added to
      this set. If the language already exists, the text is added to the existing set for that language.

      :param text: The text to be added to the MultiLangString.
      :type text: str
      :param lang: The language under which the text should be added. If not specified, defaults to an empty string.
      :type lang: str


   .. py:method:: add_text_in_pref_lang(text)

      Add a text entry to the preferred language.


   .. py:method:: add_langstring(langstring)

      Add a LangString to the MultiLangString.

      :param langstring: The LangString object to be added, representing a text in a specific language.
      :type langstring: LangString


   .. py:method:: add_setlangstring(setlangstring)

      Add a SetLangString to the MultiLangString.

      :param setlangstring: The SetLangString object to be added, representing a text in a specific language.
      :type setlangstring: SetLangString


   .. py:method:: add_multilangstring(multilangstring)


   .. py:method:: discard(arg, clean_empty = False)


   .. py:method:: discard_entry(text, lang, clean_empty = False)


   .. py:method:: discard_text_in_pref_lang(text, clean_empty = False)

      Discard a text entry from the preferred language.


   .. py:method:: discard_langstring(langstring, clean_empty = False)


   .. py:method:: discard_setlangstring(setlangstring, clean_empty = False)


   .. py:method:: discard_multilangstring(multilangstring, clean_empty = False)


   .. py:method:: discard_lang(lang)


   .. py:method:: remove(arg, clean_empty = False)


   .. py:method:: remove_entry(text, lang, clean_empty = False)

      Remove a single entry from the set of a given language key in the dictionary.

      If the specified language key exists and the text is in its set, the text is removed. If this results in an
      empty set for the language, the language key is also removed from the dictionary.

      :param text: The text to be removed.
      :type text: str
      :param lang: The language key from which the text should be removed.
      :type lang: str


   .. py:method:: remove_text_in_pref_lang(text, clean_empty = False)

      Remove a text entry from the preferred language.


   .. py:method:: remove_langstring(langstring, clean_empty = False)


   .. py:method:: remove_setlangstring(setlangstring, clean_empty = False)


   .. py:method:: remove_multilangstring(multilangstring, clean_empty = False)


   .. py:method:: remove_lang(lang)

      Remove all entries of a given language from the dictionary.

      If the specified language key exists, it and all its associated texts are removed from the dictionary.

      :param lang: The language key to be removed along with all its texts.
      :type lang: str


   .. py:method:: remove_empty_langs()


   .. py:method:: to_strings(languages = None, print_quotes = True, separator = '@', print_lang = True)


   .. py:method:: to_langstrings(langs = None)


   .. py:method:: to_setlangstrings(langs = None)


   .. py:method:: count_entries_by_lang(lang)


   .. py:method:: count_entries_per_lang()

      Return the number of text entries for each language.

      :return: A dictionary with language codes as keys and counts of text entries as values.


   .. py:method:: count_entries_total()

      Return the total number of text entries across all languages.


   .. py:method:: count_langs_total()


   .. py:method:: contains(arg)


   .. py:method:: contains_entry(text, lang)


   .. py:method:: contains_lang(lang)


   .. py:method:: contains_text_in_pref_lang(text)

      Check if a specific text exists in the preferred language.


   .. py:method:: contains_text_in_any_lang(text)

      Check if a specific text exists in the preferred language.


   .. py:method:: contains_langstring(langstring)

      Check if the given LangString's text and lang are part of this MultiLangString.

      :param langstring: A LangString object to check.
      :return: True if the LangString's text is found within the specified language's set; otherwise, False.


   .. py:method:: contains_setlangstring(setlangstring)

      Check if all texts and the language of a SetLangString are part of this MultiLangString.

      :param setlangstring: A SetLangString object to check.
      :return: True if the SetLangString's language exists and all its texts are found within the specified
      language's set; otherwise, False.


   .. py:method:: contains_multilangstring(multilangstring)

      Check if the current instance contains all languages and texts of another MultiLangString instance.

      :param multilangstring: The MultiLangString instance to check against.
      :return: True if all languages and their respective texts in `multilangstring` are contained in this instance,
      False otherwise.


   .. py:method:: get_langs(casefold = False)

      Return a list with all languages in the MultiLangString.


   .. py:method:: get_texts()

      Return a sorted list with all texts in the MultiLangString.


   .. py:method:: get_langstring(text, lang)


   .. py:method:: get_setlangstring(lang)


   .. py:method:: get_multilangstring(langs)


   .. py:method:: pop_langstring(text, lang)


   .. py:method:: pop_setlangstring(lang)


   .. py:method:: pop_multilangstring(langs)


   .. py:method:: has_pref_lang_entries()


   .. py:method:: __contains__(lang)

      Check if a language is in the MultiLangString.


   .. py:method:: __delitem__(lang)

      Allow deletion of language entries.


   .. py:method:: __eq__(other)

      Check equality of this MultiLangString with another MultiLangString.

      Equality is determined based on the mls_dict attribute. The pref_lang attribute is not considered in the
      equality check.

      :param other: Another object to compare with.
      :type other: object
      :return: True if both MultiLangString objects have the same mls_dict, False otherwise.
      :rtype: bool


   .. py:method:: __getitem__(lang)

      Allow retrieval of entries by language.


   .. py:method:: __hash__()

      Generate a hash new_text for a MultiLangString object.

      The hash is computed based on the 'mls_dict' attribute of the MultiLangString. This approach ensures that
      MultiLangString objects with the same content will have the same hash new_text.

      :return: The hash new_text of the MultiLangString object.
      :rtype: int


   .. py:method:: __iter__()

      Allow iteration over the dictionary keys (language codes).


   .. py:method:: __len__()

      Return the number of languages in the dictionary.


   .. py:method:: __ne__(other)

      Define behavior for the inequality operator, !=.


   .. py:method:: __repr__()

      Return a detailed string representation of the MultiLangString object.

      This method provides a more verbose string representation of the MultiLangString, which includes the full
      dictionary of language strings and the preferred language, making it useful for debugging.

      :return: A detailed string representation of the MultiLangString.
      :rtype: str


   .. py:method:: __reversed__()

      Return a reverse iterator over the dictionary keys.


   .. py:method:: __setitem__(lang, value)

      Allow setting entries by language.


   .. py:method:: __str__()

      Return a string representation of the MultiLangString, including language tags.

      This method provides a concise string representation of the MultiLangString, listing each text entry with its
      associated language tag.

      :return: A string representation of the MultiLangString with language tags.
      :rtype: str


   .. py:method:: _get_registered_lang(lang)


   .. py:method:: _merge_language_entries(mls_dict)

      Merge entries in the provided dictionary where the language codes match case-insensitively, only if
      duplicates exist. Preserves original language codes if no case-insensitive duplicates are found.

      :param mls_dict: Dictionary with language codes as keys and sets of strings as values.
      :return: A dictionary with merged entries for case-insensitive duplicates, preserving original case otherwise.


   .. py:method:: _validate_input_mls_dict(mls_dict)



.. py:class:: SetLangString(texts = None, lang = '')


   .. py:property:: texts
      :type: set[str]

      Getter for texts.


   .. py:property:: lang
      :type: str

      Getter for lang.


   .. py:method:: add_langstring(langstring)


   .. py:method:: add_text(text)


   .. py:method:: discard_text(text)


   .. py:method:: discard_langstring(langstring)


   .. py:method:: remove_langstring(langstring)


   .. py:method:: remove_text(text)


   .. py:method:: to_langstrings()


   .. py:method:: to_strings(print_quotes = True, separator = '@', print_lang = True)


   .. py:method:: add(new_element)


   .. py:method:: clear()


   .. py:method:: copy()


   .. py:method:: discard(element)


   .. py:method:: pop()


   .. py:method:: remove(element)


   .. py:method:: difference(*others)


   .. py:method:: difference_update(*others)


   .. py:method:: isdisjoint(other)


   .. py:method:: issubset(other)


   .. py:method:: issuperset(other)


   .. py:method:: intersection(*others)


   .. py:method:: intersection_update(*others)


   .. py:method:: symmetric_difference(other)


   .. py:method:: symmetric_difference_update(other)


   .. py:method:: union(*others)


   .. py:method:: update(*others)


   .. py:method:: __add__(other)


   .. py:method:: __and__(other)


   .. py:method:: __contains__(element)


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __ge__(other)

      Check if self is a superset of another.


   .. py:method:: __gt__(other)

      Check if self is a proper superset of other.


   .. py:method:: __hash__()

      Generate a hash for a SetLangString object.


   .. py:method:: __iand__(other)


   .. py:method:: __ior__(other)


   .. py:method:: __isub__(other)


   .. py:method:: __iter__()


   .. py:method:: __ixor__(other)


   .. py:method:: __le__(other)

      Check if self is a subset of other.


   .. py:method:: __len__()


   .. py:method:: __lt__(other)

      Check if self is a proper subset of other.


   .. py:method:: __ne__(other)

      Return self!=value.


   .. py:method:: __or__(other)


   .. py:method:: __repr__()

      Return the official string representation of the SetLangString object.


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str


   .. py:method:: __sub__(other)


   .. py:method:: __xor__(other)


   .. py:method:: _validate_match_types_and_langs(other, overwrite_strict = False)


   .. py:method:: _extract_texts(other)



