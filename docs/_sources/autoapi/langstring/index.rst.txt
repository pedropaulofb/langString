:py:mod:`langstring`
====================

.. py:module:: langstring

.. autoapi-nested-parse::

   This package contains modules related to handling language-specific strings using the LangString and MultiLangString classes.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   langstring/index.rst
   langstring_control/index.rst
   multilangstring/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.LangString
   langstring.LangStringControl
   langstring.LangStringFlag
   langstring.MultiLangString




.. py:class:: LangString(text = '', lang = None)


   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the LangStringControl class, which can enforce non-empty text, valid language tags, and other constraints.

   :ivar text: The actual text string.
   :vartype text: str
   :ivar lang: The language of the text, represented by a language tag or None if not specified.
   :vartype lang: str or None

   .. py:method:: to_string()

      Convert the LangString object to a string representation.

      This method is a convenience wrapper for the __str__ method.

      :return: The string representation of the LangString object, including language tag if present.
      :rtype: str


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object. Format: '"text"@lang' or '"text"' if lang is None.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this LangString with another LangString.

      :param other: Another LangString object to compare with.
      :type other: LangString
      :return: True if both LangString objects have the same text and language tag, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a LangString object.

      :return: The hash value of the LangString object, based on its text and language tag.
      :rtype: int


   .. py:method:: _validate_arguments_types()

      Validate the types of the 'text' and 'lang' arguments.

      Ensures that 'text' is a string and 'lang' is either a string or None. Raises a TypeError if the types do not
      match the expected types.

      :raises TypeError: If 'text' is not a string or if 'lang' is provided and is not a string or None.


   .. py:method:: _validate_ensure_text()

      Validate the 'text' argument based on the ENSURE_TEXT control flag.

      Checks if the 'text' field is empty and raises a ValueError or warning depending on the ENSURE_TEXT and
      VERBOSE_MODE flags set in LangStringControl.

      :raises ValueError: If ENSURE_TEXT is enabled and 'text' is an empty string.


   .. py:method:: _validate_ensure_any_lang()

      Validate the 'lang' argument based on the ENSURE_ANY_LANG and ENSURE_VALID_LANG control flags.

      Checks if the 'lang' field is empty and raises a ValueError or warning depending on the ENSURE_ANY_LANG,
      ENSURE_VALID_LANG, and VERBOSE_MODE flags set in LangStringControl.

      :raises ValueError: If ENSURE_ANY_LANG or ENSURE_VALID_LANG is enabled and 'lang' is an empty string.


   .. py:method:: _validate_ensure_valid_lang()

      Validate the language tag for its validity.

      This method checks if the language tag is valid. If the tag is invalid, it raises a warning or an error
      depending on the control flags set in LangStringControl.

      :raises ValueError: If ENSURE_VALID_LANG is enabled and the language tag is invalid.



.. py:class:: LangStringControl


   Control class for managing LangString configuration flags.

   This class uses class methods and class variables to set and retrieve configuration flags for LangString behavior.

   :cvar _flags: Dictionary storing the state of each LangStringFlag.
   :vartype _flags: dict[LangStringFlag, bool]

   .. py:attribute:: _flags

      

   .. py:method:: set_flag(flag, state)
      :classmethod:

      Set the state of a specified configuration flag.

      This class method allows setting the state of a flag globally for the LangString class.

      :param flag: The LangStringFlag to be set.
      :type flag: LangStringFlag
      :param state: Setting this to True or False will enable or disable the flag, respectively.
      :type state: bool
      :raises TypeError: If an invalid LangStringFlag is provided.


   .. py:method:: get_flag(flag)
      :classmethod:

      Retrieve the current state of a specified configuration flag.

      This class method provides a way to access the state of a flag globally for the LangString class.

      :param flag: The LangStringFlag whose state is to be retrieved.
      :type flag: LangStringFlag
      :return: The current state of the flag.
      :rtype: bool
      :raises TypeError: If an invalid LangStringFlag is provided.


   .. py:method:: get_flags()
      :classmethod:

      Retrieve the current state of all configuration flags.

      This class method provides a way to access the states of all flags globally for the LangString class.
      It returns a copy of the flags dictionary, ensuring that the original data is not modified.

      :return: A dictionary with LangStringFlag as keys and their corresponding boolean states as values.
      :rtype: dict[LangStringFlag, bool]


   .. py:method:: log_flags()
      :classmethod:

      Log the current state of all configuration flags.

      This class method uses the loguru logger to log the state of each flag in the _flags dictionary.



.. py:class:: LangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class.

   :cvar ENSURE_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a LangString.
   :vartype ENSURE_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a LangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar ENSURE_VALID_LANG: Makes mandatory the use of a valid language code string for the LangString's field 'lang'.
   :vartype ENSURE_VALID_LANG: Enum
   :cvar VERBOSE_MODE: Enables verbose mode for additional information during operations.
   :vartype VERBOSE_MODE: Enum

   .. py:attribute:: ENSURE_TEXT

      

   .. py:attribute:: ENSURE_ANY_LANG

      

   .. py:attribute:: ENSURE_VALID_LANG

      

   .. py:attribute:: VERBOSE_MODE

      


.. py:class:: MultiLangString(*args, control = 'ALLOW', preferred_lang = 'en')


   MultiLangString class for handling multilingual text strings.

   This class allows the management of multilingual text strings with different language tags.
   Depending on the specified control strategy, the behavior when encountering duplicate language tags can differ.
   The default behavior (using "ALLOW") prevents the addition of duplicate texts for the same language.
   That is, even if multiple identical `LangString` objects with the same text and language are added to
   a `MultiLangString`, the text for that language will not be duplicated in the internal representation.

   :ivar control: The control strategy for handling duplicate language tags.
   :vartype control: str
   :ivar langstrings: A dictionary of LangStrings indexed by language tag.
   :vartype langstrings: dict[str,list[str]]
   :ivar preferred_lang: The preferred language for this MultiLangString.
   :vartype preferred_lang: str

   Valid control strategies are:
       OVERWRITE: Overwrite existing entries with the same language tag.
       ALLOW: Allow multiple entries with the same language tag but prevent duplication of identical texts.
       BLOCK_WARN: Block and log a warning for duplicate language tags.
       BLOCK_ERROR: Block and raise an error for duplicate language tags.

   Example:
       If you have a `MultiLangString` initialized with control="ALLOW" and add two identical
       `LangString` objects (e.g., LangString("Hello", "en") twice), the internal representation
       will only have one "'Hello'@en".

   .. py:property:: control
      :type: str

      Get the control strategy for handling duplicate language tags.

      :return: The control strategy as a string.


   .. py:property:: preferred_lang
      :type: str

      Get the preferred language for this MultiLangString.

      :return: The preferred language as a string.


   .. py:attribute:: MULTIPLE_ENTRIES_CONTROLS
      :value: ('OVERWRITE', 'ALLOW', 'BLOCK_WARN', 'BLOCK_ERROR')

      Valid values are:
      OVERWRITE: Overwrite existing entries with the same language tag.
      ALLOW: Allow multiple entries with the same language tag.
      BLOCK_WARN: Block and log a warning for duplicate language tags.
      BLOCK_ERROR: Block and raise an error for duplicate language tags.


   .. py:method:: _validate_langstring_arg(arg)

      Private helper method to validate if the argument is a LangString.

      :param arg: Argument to be checked.
      :raises TypeError: If the passed argument is not an instance of LangString.


   .. py:method:: add_langstring(langstring)

      Add a LangString to the MultiLangString.

      :param langstring: The LangString to add.
      :type langstring: LangString


   .. py:method:: get_langstring(lang)

      Get LangStrings for a specific language tag.

      :param lang: The language tag to retrieve LangStrings for.
      :type lang: str
      :return: List of LangStrings for the specified language tag.
      :rtype: list


   .. py:method:: get_pref_langstring()

      Get the preferred language's LangString.

      :return: The LangString for the preferred language.
      :rtype: str


   .. py:method:: remove_langstring(langstring)

      Remove a LangString from the MultiLangString.

      :param langstring: The LangString to remove.
      :type langstring: LangString
      :return: True if the LangString was removed, False otherwise.
      :rtype: bool


   .. py:method:: remove_language(language_code)

      Remove all LangStrings associated with a specific language code.

      This method attempts to remove all LangStrings that match the given language code. If the
      language code is found and entries are removed, the method returns `True`. If the language
      code isn't found, the method returns `False`. For invalid language_code formats, a
      `ValueError` is raised.

      :param str language_code: The language code (e.g., "en", "fr") for which to remove LangStrings.
      :return: True if the language entries were removed, False otherwise.
      :rtype: bool
      :raises ValueError: If the provided language_code isn't valid or contains non-alphabetical chars.


   .. py:method:: to_string()

      Convert the MultiLangString to a string. Syntactical sugar for self.__str()__.

      :return: The string representation of the MultiLangString.
      :rtype: str


   .. py:method:: to_string_list()

      Convert the MultiLangString to a list of strings.

      :return: List of strings representing the MultiLangString.
      :rtype: list


   .. py:method:: __repr__()

      Return a string representation of the MultiLangString object.

      :return: A string representation of the MultiLangString.
      :rtype: str


   .. py:method:: __len__()

      Return the total number of LangStrings stored in the MultiLangString.

      :return: The total number of LangStrings.
      :rtype: int


   .. py:method:: __str__()

      Return a string representation of the MultiLangString, including language tags.

      :return: A string representation of the MultiLangString with language tags.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this MultiLangString with another MultiLangString.

      This method compares only the 'langstrings' attribute of the two MultiLangString objects.
      The 'control' and 'preferred_lang' attributes, which dictate the behavior for handling duplicate language tags
      and the preferred language, are not considered in this comparison. This design decision is based on the premise
      that two MultiLangString objects are considered equal if they contain the same multilingual content,
      irrespective of their internal handling of duplicates and preferred language.

      :param other: Another MultiLangString object to compare with.
      :type other: MultiLangString
      :return: True if both MultiLangString objects have the same content, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a MultiLangString object.

      The hash is computed based on the 'langstrings' attribute of the MultiLangString.
      The 'control' and 'preferred_lang' attributes are not included in the hash calculation. This ensures
      that the hash value reflects only the content of the MultiLangString, aligning with the
      equality comparison logic. This approach guarantees that MultiLangString objects with the same content
      will have the same hash value, even if they differ in their duplicate handling strategy and preferred language.

      :return: The hash value of the MultiLangString object.
      :rtype: int



