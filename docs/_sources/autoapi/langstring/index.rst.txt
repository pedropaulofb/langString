langstring
==========

.. py:module:: langstring

.. autoapi-nested-parse::

   The langstring package provides classes and utilities for handling multilingual text.

   It includes classes for single and multiple language strings, along with their control and validation mechanisms.



Subpackages
-----------

.. toctree::
   :maxdepth: 1

   /autoapi/langstring/utils/index


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/langstring/controller/index
   /autoapi/langstring/converter/index
   /autoapi/langstring/flags/index
   /autoapi/langstring/langstring/index
   /autoapi/langstring/multilangstring/index
   /autoapi/langstring/setlangstring/index


Classes
-------

.. autoapisummary::

   langstring.Controller
   langstring.Converter
   langstring.GlobalFlag
   langstring.LangStringFlag
   langstring.MultiLangStringFlag
   langstring.SetLangStringFlag
   langstring.LangString
   langstring.MultiLangString
   langstring.SetLangString


Package Contents
----------------

.. py:class:: Controller

   Control class for managing configuration flags, designed to be non-instantiable.

   This class uses class methods to set and retrieve configuration flags for language classes' behavior, ensuring a
   consistent global configuration state. It is made non-instantiable by using the NonInstantiable metaclass,
   emphasizing its role as a static configuration manager rather than an object to be instantiated.

   :cvar DEFAULT_FLAGS: The default state of each flag.
   :vartype DEFAULT_FLAGS: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]
   :cvar flags: Stores the current state of each flag.
   :vartype flags: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]


   .. py:attribute:: DEFAULT_FLAGS
      :type:  dict[Union[langstring.flags.GlobalFlag, langstring.flags.LangStringFlag, langstring.flags.SetLangStringFlag, langstring.flags.MultiLangStringFlag], bool]


   .. py:attribute:: flags
      :type:  dict[Union[langstring.flags.GlobalFlag, langstring.flags.LangStringFlag, langstring.flags.SetLangStringFlag, langstring.flags.MultiLangStringFlag], bool]


   .. py:method:: set_flag(flag, state)
      :classmethod:


      Set the state of a specified configuration flag for LangString, SetLangString, or MultiLangString.

      If a GlobalFlag is set, it also sets the corresponding flags in LangStringFlag, SetLangStringFlag,
      and MultiLangStringFlag to the same state.

      :param flag: The flag to be set, either an instance of one of the flag enums.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :param state: Setting this to True or False will enable or disable the flag, respectively.
      :type state: bool
      :raises TypeError: If 'flag' is not an instance of one of the flag enums, or if 'state' is not a Boolean.



   .. py:method:: get_flag(flag)
      :classmethod:


      Retrieve the current state of a specified configuration flag.

      Available for GlobalFlag, LangString, SetLangString, or MultiLangString.

      This class method provides a way to access the state of a flag globally for both LangString and
      MultiLangString classes.

      :param flag: The flag whose state is to be retrieved,
      either an instance of LangStringFlag or MultiLangStringFlag.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]
      :return: The current state of the flag.
      :rtype: bool
      :raises TypeError: If 'flag' is not a member of LangStringFlag or MultiLangStringFlag.



   .. py:method:: get_flags()
      :classmethod:


      Retrieve the current state of all configuration flags.

      Available for GlobalFlag, LangString, SetLangString, or MultiLangString.

      This class method provides a way to access the states of all flags globally for both LangString and
      MultiLangString classes. It returns a copy of the flags dictionary, ensuring that the original data is not
      modified.

      :return: A dictionary mapping each flag to its boolean state, either for LangStringFlag or MultiLangStringFlag.
      :rtype: dict[Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag], bool]



   .. py:method:: print_flag(flag)
      :classmethod:


      Print the current state of a specific configuration flag.

      This class method prints the state of the specified flag to the console. It is useful for checking the state of
      an individual flag for LangString, SetLangString, MultiLangString, or GlobalFlag.

      :param flag: The flag whose state is to be printed.
      :type flag: Union[GlobalFlag, LangStringFlag, SetLangStringFlag, MultiLangStringFlag]

      Note:
          This method is typically used for debugging or quick monitoring, to display the state of a specific flag.



   .. py:method:: print_flags(flag_type = None)
      :classmethod:


      Print the current state of configuration flags in alphabetical order.

      If a flag type is specified, only flags of that type are printed.
      If no flag type is specified, all flags are printed.

      :param flag_type: The type of flags to print (e.g., GlobalFlag, LangStringFlag).
                        If None, all flags are printed.
      :type flag_type: Optional[Type]



   .. py:method:: reset_flag(flag)
      :classmethod:


      Reset a specific flag to its default value.

      If the flag is of type GlobalFlag, reset all equivalent flags of other types.
      E.g., reset_flag(GlobalFlag.VALID_TEXT) will reset GlobalFlag.VALID_TEXT,
      LangStringFlag.VALID_TEXT, SetLangStringFlag.VALID_TEXT, and MultiLangStringFlag.VALID_TEXT.



   .. py:method:: reset_flags(flag_type = GlobalFlag)
      :classmethod:


      Reset all flags of a specific type to their default values.



.. py:class:: Converter

   A utility class for converting between different string types used in language processing.

   This class provides methods to convert between `LangString`, `SetLangString`, and `MultiLangString` types.
   It is designed to be non-instantiable as it serves as a utility class with class methods only.


   .. py:method:: from_string_to_langstring(method, input_string, lang = None, separator = '@')
      :classmethod:


      Convert a string to a LangString using the specified method.

      :param method: The method to use for conversion ('manual' or 'parse').
      :type method: str
      :param input_string: The text to be converted.
      :type input_string: str
      :param lang: The language code (used only with 'manual' method).
      :type lang: Optional[str]
      :param separator: The separator used to split the text and language (used only with 'parse' method).
      :type separator: str
      :return: A LangString object with the converted text and language.
      :rtype: LangString
      :raises ValueError: If the method is unknown.



   .. py:method:: from_string_to_langstring_manual(input_string, lang)
      :staticmethod:


      Convert a string to a LangString with the specified language.

      :param input_string: The text to be converted.
      :type input_string: str
      :param lang: The language code.
      :type lang: Optional[str]
      :return: A LangString object with the provided text and language.
      :rtype: LangString



   .. py:method:: from_string_to_langstring_parse(input_string, separator = '@')
      :staticmethod:


      Convert a string to a LangString by parsing it with the given separator.

      This function splits the input string into text and language components based on the last occurrence of the
      specified separator. If the separator is not found, the entire string is considered as text and lang is set
      to "" (empty string).

      :param input_string: The text to be converted.
      :type input_string: str
      :param separator: The separator used to split the text and language.
      :type separator: str
      :return: A LangString object with the parsed text and language.
      :rtype: LangString



   .. py:method:: from_strings_to_langstrings(method, strings, lang = None, separator = '@')
      :classmethod:


      Convert a list of strings to a list of LangStrings using the specified method.

      :param method: The method to use for conversion ('manual' or 'parse').
      :type method: str
      :param strings: List of strings to be converted.
      :type strings: list[str]
      :param lang: The language code for 'manual' method.
      :type lang: Optional[str]
      :param separator: The separator used in 'parse' method.
      :type separator: str
      :return: A list of LangString objects.
      :rtype: list[LangString]
      :raises ValueError: If an unknown method is specified.
      :raises TypeError: If the input types are incorrect.



   .. py:method:: from_strings_to_setlangstring(strings, lang = None)
      :classmethod:


      Convert a list of strings to a SetLangString using the 'manual' method.

      :param strings: List of strings to be converted.
      :param lang: Language code for the 'manual' method. Optional.
      :return: A SetLangString object.



   .. py:method:: from_strings_to_multilangstring(method, strings, lang = None, separator = '@')
      :classmethod:


      Convert a list of strings to a MultiLangString using the specified method.

      :param method: Method to use for conversion ("manual", or "parse").
      :param strings: List of strings to be converted.
      :param lang: Language code for the "manual" method. Optional.
      :param separator: Separator for the "parse" method. Default is "@".
      :return: A MultiLangString object.



   .. py:method:: from_langstring_to_string(arg, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:



   .. py:method:: from_langstrings_to_strings(arg, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:



   .. py:method:: from_langstring_to_setlangstring(arg)
      :staticmethod:


      Convert a LangString to a SetLangString.

      This method creates a SetLangString from a LangString. The resulting SetLangString contains the text of the
      LangString in a set and retains its language.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :return: A SetLangString containing the text from the arg LangString.
      :rtype: SetLangString
      :raises TypeError: If the arg is not of type LangString.



   .. py:method:: from_langstrings_to_setlangstring(arg)
      :staticmethod:



   .. py:method:: from_langstrings_to_setlangstrings(arg)
      :classmethod:



   .. py:method:: from_langstring_to_multilangstring(arg)
      :staticmethod:


      Convert a LangString to a MultiLangString.

      This method takes a single LangString and converts it into a MultiLangString. The resulting MultiLangString
      contains the text and language of the arg LangString.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :return: A MultiLangString containing the text and language from the arg LangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type LangString.



   .. py:method:: from_langstrings_to_multilangstring(arg)
      :staticmethod:



   .. py:method:: from_setlangstring_to_string(arg)
      :staticmethod:



   .. py:method:: from_setlangstring_to_strings(arg, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:



   .. py:method:: from_setlangstrings_to_strings(arg, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:



   .. py:method:: from_setlangstring_to_langstrings(arg)
      :staticmethod:


      Convert a SetLangString to a list of LangStrings.

      This method takes a SetLangString and converts it into a list of LangStrings, each containing one of the texts
      from the SetLangString and its associated language.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: A list of LangStrings, each corresponding to a text in the arg SetLangString.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type SetLangString.



   .. py:method:: from_setlangstrings_to_langstrings(arg)
      :staticmethod:



   .. py:method:: from_setlangstring_to_multilangstring(arg)
      :staticmethod:


      Convert a SetLangString to a MultiLangString.

      This method creates a MultiLangString from a SetLangString. The resulting MultiLangString contains all texts
      from the SetLangString, associated with its language.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: A MultiLangString containing all texts from the arg SetLangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type SetLangString.



   .. py:method:: from_setlangstrings_to_multilangstring(arg)
      :staticmethod:


      Convert a list of SetLangString objects to a MultiLangString object.

      If there are different casings for the same lang tag among the SetLangString objects in the input list,
      the casefolded version of the lang tag is used. If only a single case is used, that case is adopted.

      :param setlangstrings: List of SetLangString instances to be converted.
      :return: A MultiLangString instance with aggregated texts under normalized language tags.



   .. py:method:: from_multilangstring_to_string(arg)
      :staticmethod:



   .. py:method:: from_multilangstring_to_strings(arg, langs = None, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:



   .. py:method:: from_multilangstrings_to_strings(arg, languages = None, print_quotes = True, separator = '@', print_lang = True)
      :staticmethod:



   .. py:method:: from_multilangstring_to_langstrings(arg, languages = None)
      :staticmethod:


      Convert a MultiLangString to a list of LangStrings.

      This method takes a MultiLangString and converts it into a list of LangStrings, each representing one of the
      texts in the MultiLangString along with its associated language.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :return: A list of LangStrings, each corresponding to a text in the arg MultiLangString.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type MultiLangString.



   .. py:method:: from_multilangstrings_to_langstrings(arg, languages = None)
      :staticmethod:



   .. py:method:: from_multilangstring_to_setlangstrings(arg, languages = None)
      :staticmethod:


      Convert a MultiLangString to a list of SetLangStrings.

      This method creates a list of SetLangStrings from a MultiLangString. Each SetLangString in the list contains
      texts of a single language from the MultiLangString.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :return: A list of SetLangStrings, each containing texts of a single language from the arg MultiLangString.
      :rtype: list[SetLangString]
      :raises TypeError: If the arg is not of type MultiLangString.



   .. py:method:: from_multilangstrings_to_setlangstrings(arg, languages = None)
      :staticmethod:



.. py:class:: GlobalFlag(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enumeration for global control flags.

   This enum defines various flags that can be used to configure the behavior of all classes.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of all classes.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of all classes.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for all classes' field 'lang'.
   :vartype VALID_LANG: Enum


   .. py:attribute:: DEFINED_LANG


   .. py:attribute:: DEFINED_TEXT


   .. py:attribute:: ENFORCE_EXTRA_DEPEND


   .. py:attribute:: LOWERCASE_LANG


   .. py:attribute:: METHODS_MATCH_TYPES


   .. py:attribute:: PRINT_WITH_LANG


   .. py:attribute:: PRINT_WITH_QUOTES


   .. py:attribute:: STRIP_LANG


   .. py:attribute:: STRIP_TEXT


   .. py:attribute:: VALID_LANG


.. py:class:: LangStringFlag(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a LangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a LangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the LangString's field 'lang'.
   :vartype VALID_LANG: Enum


   .. py:attribute:: DEFINED_LANG


   .. py:attribute:: DEFINED_TEXT


   .. py:attribute:: LOWERCASE_LANG


   .. py:attribute:: METHODS_MATCH_TYPES


   .. py:attribute:: PRINT_WITH_LANG


   .. py:attribute:: PRINT_WITH_QUOTES


   .. py:attribute:: STRIP_LANG


   .. py:attribute:: STRIP_TEXT


   .. py:attribute:: VALID_LANG


.. py:class:: MultiLangStringFlag(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enumeration for MultiLangString control flags.

   This enum defines various flags that can be used to configure the behavior of the MultiLangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a MultiLangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a MultiLangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the MultiLangString's field 'lang'.
   :vartype VALID_LANG: Enum


   .. py:attribute:: DEFINED_LANG


   .. py:attribute:: DEFINED_TEXT


   .. py:attribute:: LOWERCASE_LANG


   .. py:attribute:: PRINT_WITH_LANG


   .. py:attribute:: PRINT_WITH_QUOTES


   .. py:attribute:: STRIP_LANG


   .. py:attribute:: STRIP_TEXT


   .. py:attribute:: VALID_LANG


.. py:class:: SetLangStringFlag(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Enumeration for SetLangString control flags.

   This enum defines various flags that can be used to configure the behavior of the SetLangString class.

   :cvar DEFINED_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a SetLangString.
   :vartype DEFINED_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a SetLangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar VALID_LANG: Makes mandatory the use of a valid language code string for the SetLangString's field 'lang'.
   :vartype VALID_LANG: Enum


   .. py:attribute:: DEFINED_LANG


   .. py:attribute:: DEFINED_TEXT


   .. py:attribute:: LOWERCASE_LANG


   .. py:attribute:: METHODS_MATCH_TYPES


   .. py:attribute:: PRINT_WITH_LANG


   .. py:attribute:: PRINT_WITH_QUOTES


   .. py:attribute:: STRIP_LANG


   .. py:attribute:: STRIP_TEXT


   .. py:attribute:: VALID_LANG


.. py:class:: LangString(text = '', lang = '')

   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the Controller class, which can enforce non-empty text, valid language tags, and other constraints.

   Many standard string methods are overridden to return LangString objects, allowing seamless integration and
   extended functionality. This design ensures that users can work with LangString instances similarly to regular
   strings.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text.
   :vartype lang: str
   :raises ValueError: If control flags enforce non-empty text and the text is empty.
   :raises TypeError: If the types of parameters are incorrect based on validation.


   .. py:property:: text
      :type: str

      Get the text string.

      :return: The text string.
      :rtype: str



   .. py:property:: lang
      :type: str

      Get the language tag.

      :return: The language tag.
      :rtype: str



   .. py:method:: capitalize()

      Return a copy of the LangString with its first character capitalized and the rest lowercased.

      This method mimics the behavior of the standard string's capitalize method but returns a LangString object.

      :return: A new LangString with the first character capitalized.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello, world!", "en")
      >>> capitalized_lang_str = lang_str.capitalize()
      >>> print(capitalized_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: casefold()

      Return a casefolded copy of the LangString. Casefolding is a more aggressive version of lowercasing.

      This method mimics the behavior of the standard string's casefold method but returns a LangString object.

      :return: A new LangString that is casefolded.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, WORLD!", "en")
      >>> casefolded_lang_str = lang_str.casefold()
      >>> print(casefolded_lang_str)  # Output: "hello, world!"@en



   .. py:method:: center(width, fillchar = ' ')

      Return a centered LangString of length width.

      Padding is done using the specified fill character (default is a space).

      This method mimics the behavior of the standard string's center method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :param fillchar: The character to fill the padding with.
      :type fillchar: str
      :return: A new LangString centered with padding.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> centered_lang_str = lang_str.center(11, "*")
      >>> print(centered_lang_str)  # Output: "***hello***"@en



   .. py:method:: count(sub, start = 0, end = None)

      Return the number of non-overlapping occurrences of substring sub in the LangString.

      This method mimics the behavior of the standard string's count method.

      :param sub: The substring to count.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The number of occurrences of the substring.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello, hello, hello!", "en")
      >>> count_hello = lang_str.count("hello")
      >>> print(count_hello)  # Output: 3



   .. py:method:: endswith(suffix, start = 0, end = None)

      Return True if the LangString ends with the specified suffix, otherwise return False.

      This method mimics the behavior of the standard string's endswith method.

      :param suffix: The suffix to check.
      :type suffix: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: True if the LangString ends with the suffix, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("hello, world!", "en")
      >>> ends_with_world = lang_str.endswith("world!")
      >>> print(ends_with_world)  # Output: True



   .. py:method:: expandtabs(tabsize = 8)

      Return a copy of the LangString where all tab characters are expanded using spaces.

      This method mimics the behavior of the standard string's expandtabs method but returns a LangString object.

      :param tabsize: The number of spaces to use for each tab character.
      :type tabsize: int
      :return: A new LangString with tabs expanded.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello        world", "en")
      >>> expanded_lang_str = lang_str.expandtabs(4)
      >>> print(expanded_lang_str)  # Output: "hello   world"@en



   .. py:method:: find(sub, start = 0, end = None)

      Return the lowest index in the LangString where substring sub is found.

      This method mimics the behavior of the standard string's find method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The lowest index where the substring is found, or -1 if not found.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello, world", "en")
      >>> index = lang_str.find("world")
      >>> print(index)  # Output: 7



   .. py:method:: format(*args, **kwargs)

      Perform a string formatting operation on the LangString.

      This method mimics the behavior of the standard string's format method but returns a LangString object.

      :param args: Positional arguments for formatting.
      :type args: Any
      :param kwargs: Keyword arguments for formatting.
      :type kwargs: Any
      :return: A new LangString with the formatted text.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, {}!", "en")
      >>> formatted_lang_str = lang_str.format("world")
      >>> print(formatted_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: format_map(mapping)

      Perform a string formatting operation using a dictionary.

      This method mimics the behavior of the standard string's format_map method but returns a LangString object.

      :param mapping: A dictionary for formatting.
      :type mapping: dict
      :return: A new LangString with the formatted text.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, {name}!", "en")
      >>> formatted_lang_str = lang_str.format_map({"name": "world"})
      >>> print(formatted_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: index(sub, start = 0, end = None)

      Return the lowest index in the LangString where substring sub is found.

      This method mimics the behavior of the standard string's index method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The lowest index where the substring is found.
      :rtype: int
      :raises ValueError: If the substring is not found.

      :Example:

      >>> lang_str = LangString("hello, world", "en")
      >>> index = lang_str.index("world")
      >>> print(index)  # Output: 7



   .. py:method:: isalnum()

      Return True if all characters in the LangString are alphanumeric and there is at least one character.

      This method mimics the behavior of the standard string's isalnum method.

      :return: True if the LangString is alphanumeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello123", "en")
      >>> is_alnum = lang_str.isalnum()
      >>> print(is_alnum)  # Output: True

      >>> lang_str = LangString("Hello 123", "en")
      >>> is_alnum = lang_str.isalnum()
      >>> print(is_alnum)  # Output: False



   .. py:method:: isalpha()

      Return True if all characters in the LangString are alphabetic and there is at least one character.

      This method mimics the behavior of the standard string's isalpha method.

      :return: True if the LangString is alphabetic, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> is_alpha = lang_str.isalpha()
      >>> print(is_alpha)  # Output: True

      >>> lang_str = LangString("Hello123", "en")
      >>> is_alpha = lang_str.isalpha()
      >>> print(is_alpha)  # Output: False



   .. py:method:: isascii()

      Return True if all characters in the LangString are ASCII characters.

      This method mimics the behavior of the standard string's isascii method.

      :return: True if the LangString is ASCII, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> is_ascii = lang_str.isascii()
      >>> print(is_ascii)  # Output: True

      >>> lang_str = LangString("Héllo", "en")
      >>> is_ascii = lang_str.isascii()
      >>> print(is_ascii)  # Output: False



   .. py:method:: isdecimal()

      Return True if all characters in the LangString are decimal characters and there is at least one character.

      This method mimics the behavior of the standard string's isdecimal method.

      :return: True if the LangString is decimal, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_decimal = lang_str.isdecimal()
      >>> print(is_decimal)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_decimal = lang_str.isdecimal()
      >>> print(is_decimal)  # Output: False



   .. py:method:: isdigit()

      Return True if all characters in the LangString are digits and there is at least one character.

      This method mimics the behavior of the standard string's isdigit method.

      :return: True if the LangString is numeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_digit = lang_str.isdigit()
      >>> print(is_digit)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_digit = lang_str.isdigit()
      >>> print(is_digit)  # Output: False



   .. py:method:: isidentifier()

      Return True if the LangString is a valid identifier according to Python language definition.

      This method mimics the behavior of the standard string's isidentifier method.

      :return: True if the LangString is a valid identifier, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("variable_name", "en")
      >>> is_identifier = lang_str.isidentifier()
      >>> print(is_identifier)  # Output: True

      >>> lang_str = LangString("123variable", "en")
      >>> is_identifier = lang_str.isidentifier()
      >>> print(is_identifier)  # Output: False



   .. py:method:: islower()

      Return True if all cased characters in the LangString are lowercase and there is at least one cased character.

      This method mimics the behavior of the standard string's islower method.

      :return: True if the LangString is in lowercase, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> is_lower = lang_str.islower()
      >>> print(is_lower)  # Output: True

      >>> lang_str = LangString("Hello", "en")
      >>> is_lower = lang_str.islower()
      >>> print(is_lower)  # Output: False



   .. py:method:: isnumeric()

      Return True if all characters in the LangString are numeric characters and there is at least one character.

      This method mimics the behavior of the standard string's isnumeric method.

      :return: True if the LangString is numeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_numeric = lang_str.isnumeric()
      >>> print(is_numeric)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_numeric = lang_str.isnumeric()
      >>> print(is_numeric)  # Output: False



   .. py:method:: isprintable()

      Return True if all characters in the LangString are printable or the LangString is empty.

      This method mimics the behavior of the standard string's isprintable method.

      :return: True if the LangString is printable, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> is_printable = lang_str.isprintable()
      >>> print(is_printable)  # Output: True

      >>> lang_str = LangString("Hello,       world!", "en")
      >>> is_printable = lang_str.isprintable()
      >>> print(is_printable)  # Output: False



   .. py:method:: isspace()

      Return True if there are only whitespace characters in the LangString and there is at least one character.

      This method mimics the behavior of the standard string's isspace method.

      :return: True if the LangString is whitespace, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("   ", "en")
      >>> is_space = lang_str.isspace()
      >>> print(is_space)  # Output: True

      >>> lang_str = LangString("Hello, world!", "en")
      >>> is_space = lang_str.isspace()
      >>> print(is_space)  # Output: False



   .. py:method:: istitle()

      Return True if the LangString is a titlecased string and there is at least one character.

      This method mimics the behavior of the standard string's istitle method.

      :return: True if the LangString is titlecased, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> is_title = lang_str.istitle()
      >>> print(is_title)  # Output: True

      >>> lang_str = LangString("hello, world!", "en")
      >>> is_title = lang_str.istitle()
      >>> print(is_title)  # Output: False



   .. py:method:: isupper()

      Return True if all cased characters in the LangString are uppercase and there is at least one cased character.

      This method mimics the behavior of the standard string's isupper method.

      :return: True if the LangString is in uppercase, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("HELLO, WORLD!", "en")
      >>> is_upper = lang_str.isupper()
      >>> print(is_upper)  # Output: True

      >>> lang_str = LangString("Hello, World!", "en")
      >>> is_upper = lang_str.isupper()
      >>> print(is_upper)  # Output: False



   .. py:method:: join(iterable)

      Join an iterable of strings with the LangString's text.

      This method mimics the behavior of the standard string's join method but returns a LangString object.

      :param iterable: An iterable of strings to be joined.
      :type iterable: Iterable[str]
      :return: A new LangString with the joined text.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString(", ", "en")
      >>> joined_lang_str = lang_str.join(["Hello", "world"])
      >>> print(joined_lang_str)  # Output: "Hello, world"@en



   .. py:method:: ljust(width, fillchar = ' ')

      Return a left-justified LangString of length width.

      Padding is done using the specified fill character (default is a space).

      This method mimics the behavior of the standard string's ljust method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :param fillchar: The character to fill the padding with.
      :type fillchar: str
      :return: A new LangString left-justified with padding.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> left_justified_lang_str = lang_str.ljust(10, "*")
      >>> print(left_justified_lang_str)  # Output: "hello*****"@en



   .. py:method:: lower()

      Return a copy of the LangString with all the cased characters converted to lowercase.

      This method mimics the behavior of the standard string's lower method but returns a LangString object.

      :return: A new LangString with all characters in lowercase.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("HELLO, WORLD!", "en")
      >>> lower_lang_str = lang_str.lower()
      >>> print(lower_lang_str)  # Output: "hello, world!"@en



   .. py:method:: lstrip(chars = None)

      Return a copy of the LangString with leading characters removed.

      This method mimics the behavior of the standard string's lstrip method but returns a LangString object.

      :param chars: A string specifying the set of characters to be removed. If None, whitespace characters are removed.
      :type chars: Optional[str]
      :return: A new LangString with leading characters removed.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("   Hello, world!", "en")
      >>> stripped_lang_str = lang_str.lstrip()
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en

      >>> lang_str = LangString("...Hello, world!", "en")
      >>> stripped_lang_str = lang_str.lstrip(".")
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: partition(sep)

      Split the LangString at the first occurrence of sep, and return a 3-tuple containing the part before the separator,
      the separator itself, and the part after the separator.

      This method mimics the behavior of the standard string's partition method but returns LangString objects.

      :param sep: The separator to split the LangString.
      :type sep: str
      :return: A 3-tuple containing the part before the separator, the separator itself, and the part after the separator.
      :rtype: tuple[LangString, LangString, LangString]

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> before, sep, after = lang_str.partition(", ")
      >>> print(before)  # Output: "Hello"@en
      >>> print(sep)     # Output: ", "@en
      >>> print(after)   # Output: "world!"@en



   .. py:method:: replace(old, new, count = -1)

      Return a copy of the LangString with all occurrences of substring old replaced by new.

      This method mimics the behavior of the standard string's replace method but returns a LangString object.

      :param old: The substring to be replaced.
      :type old: str
      :param new: The substring to replace with.
      :type new: str
      :param count: The maximum number of occurrences to replace. If -1, all occurrences are replaced.
      :type count: int
      :return: A new LangString with the replacements.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> replaced_lang_str = lang_str.replace("world", "Python")
      >>> print(replaced_lang_str)  # Output: "Hello, Python!"@en

      >>> lang_str = LangString("abababab", "en")
      >>> replaced_lang_str = lang_str.replace("ab", "cd", 2)
      >>> print(replaced_lang_str)  # Output: "cdcdabab"@en



   .. py:method:: removeprefix(prefix)

      Remove the specified prefix from the LangString's text.

      If the text starts with the prefix string, return a new LangString with the prefix string removed.
      Otherwise, return a copy of the original LangString.

      This method mimics the behavior of the standard string's removeprefix method but returns a LangString object.

      :param prefix: The prefix to remove from the text.
      :type prefix: str
      :return: A new LangString with the prefix removed, or the original LangString if the prefix is not found.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> removed_prefix_lang_str = lang_str.removeprefix("Hello, ")
      >>> print(removed_prefix_lang_str)  # Output: "world!"@en

      >>> lang_str = LangString("Hello, world!", "en")
      >>> removed_prefix_lang_str = lang_str.removeprefix("Goodbye, ")
      >>> print(removed_prefix_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: removesuffix(suffix)

      Remove the specified suffix from the LangString's text.

      If the text ends with the suffix string, return a new LangString with the suffix string removed.
      Otherwise, return a copy of the original LangString.

      This method mimics the behavior of the standard string's removesuffix method but returns a LangString object.

      :param suffix: The suffix to remove from the text.
      :type suffix: str
      :return: A new LangString with the suffix removed, or the original LangString if the suffix is not found.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> removed_suffix_lang_str = lang_str.removesuffix(", world!")
      >>> print(removed_suffix_lang_str)  # Output: "Hello"@en

      >>> lang_str = LangString("Hello, world!", "en")
      >>> removed_suffix_lang_str = lang_str.removesuffix("planet")
      >>> print(removed_suffix_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: rfind(sub, start = 0, end = None)

      Return the highest index in the LangString where substring sub is found, such that sub is contained within
      [start, end]. Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is
      not found.

      This method mimics the behavior of the standard string's rfind method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The highest index where the substring is found, or -1 if not found.
      :rtype: int

      :Example:

      >>> lang_str = LangString("Hello, world! Hello, universe!", "en")
      >>> index = lang_str.rfind("Hello")
      >>> print(index)  # Output: 14



   .. py:method:: rindex(sub, start = 0, end = None)

      Return the highest index in the LangString where substring sub is found, such that sub is contained within
      [start, end]. Optional arguments start and end are interpreted as in slice notation. Raises ValueError when
      the substring is not found.

      This method mimics the behavior of the standard string's rindex method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The highest index where the substring is found.
      :rtype: int
      :raises ValueError: If the substring is not found.

      :Example:

      >>> lang_str = LangString("Hello, world! Hello, universe!", "en")
      >>> index = lang_str.rindex("Hello")
      >>> print(index)  # Output: 14

      >>> lang_str = LangString("Hello, world!", "en")
      >>> index = lang_str.rindex("Hi")
      >>> print(index)  # Output: ValueError



   .. py:method:: rjust(width, fillchar = ' ')

      Return a right-justified LangString of length width.

      Padding is done using the specified fill character (default is a space).

      This method mimics the behavior of the standard string's rjust method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :param fillchar: The character to fill the padding with.
      :type fillchar: str
      :return: A new LangString right-justified with padding.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> right_justified_lang_str = lang_str.rjust(10, "*")
      >>> print(right_justified_lang_str)  # Output: "*****hello"@en



   .. py:method:: rpartition(sep)

      Split the LangString at the last occurrence of sep, and return a 3-tuple containing the part before the separator,
      the separator itself, and the part after the separator.

      This method mimics the behavior of the standard string's rpartition method but returns LangString objects.

      :param sep: The separator to split the LangString.
      :type sep: str
      :return: A 3-tuple containing the part before the separator, the separator itself, and the part after the separator.
      :rtype: tuple[LangString, LangString, LangString]

      :Example:

      >>> lang_str = LangString("Hello, world! Hello, universe!", "en")
      >>> before, sep, after = lang_str.rpartition("Hello")
      >>> print(before)  # Output: "Hello, world! "@en
      >>> print(sep)     # Output: "Hello"@en
      >>> print(after)   # Output: ", universe!"@en



   .. py:method:: rsplit(sep = None, maxsplit = -1)

      Return a list of the words in the LangString, using sep as the delimiter string. The list is split from the right
      starting from the end of the string.

      This method mimics the behavior of the standard string's rsplit method but returns a list of LangString objects.

      :param sep: The delimiter string. If None, any whitespace string is a separator.
      :type sep: Optional[str]
      :param maxsplit: Maximum number of splits. If -1, there is no limit.
      :type maxsplit: int
      :return: A list of LangString objects.
      :rtype: list[LangString]

      :Example:

      >>> lang_str = LangString("one two three", "en")
      >>> split_lang_str = lang_str.rsplit()
      >>> for part in split_lang_str:
      ...     print(part)
      ...
      >>> # Output: "one"@en
      >>> #         "two"@en
      >>> #         "three"@en

      >>> lang_str = LangString("one,two,three", "en")
      >>> split_lang_str = lang_str.rsplit(",", 1)
      >>> for part in split_lang_str:
      ...     print(part)
      ...
      >>> # Output: "one,two"@en
      >>> #         "three"@en



   .. py:method:: rstrip(chars = None)

      Return a copy of the LangString with trailing characters removed.

      This method mimics the behavior of the standard string's rstrip method but returns a LangString object.

      :param chars: A string specifying the set of characters to be removed. If None, whitespace characters are removed.
      :type chars: Optional[str]
      :return: A new LangString with trailing characters removed.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, world!   ", "en")
      >>> stripped_lang_str = lang_str.rstrip()
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en

      >>> lang_str = LangString("Hello, world!!!", "en")
      >>> stripped_lang_str = lang_str.rstrip("!")
      >>> print(stripped_lang_str)  # Output: "Hello, world"@en



   .. py:method:: split(sep = None, maxsplit = -1)

      Return a list of the words in the LangString, using sep as the delimiter string.

      This method mimics the behavior of the standard string's split method but returns a list of LangString objects.

      :param sep: The delimiter string. If None, any whitespace string is a separator.
      :type sep: Optional[str]
      :param maxsplit: Maximum number of splits. If -1, there is no limit.
      :type maxsplit: int
      :return: A list of LangString objects.
      :rtype: list[LangString]

      :Example:

      >>> lang_str = LangString("one two three", "en")
      >>> split_lang_str = lang_str.split()
      >>> for part in split_lang_str:
      ...     print(part)
      ...
      >>> # Output: "one"@en
      >>> #         "two"@en
      >>> #         "three"@en

      >>> lang_str = LangString("one,two,three", "en")
      >>> split_lang_str = lang_str.split(",")
      >>> for part in split_lang_str:
      ...     print(part)
      ...
      >>> # Output: "one"@en
      >>> #         "two"@en
      >>> #         "three"@en



   .. py:method:: splitlines(keepends = False)

              Return a list of the lines in the LangString, breaking at line boundaries.

              This method mimics the behavior of the standard string's splitlines method but returns a list of LangString objects.

              :param keepends: If True, line breaks are included in the resulting list.
              :type keepends: bool
              :return: A list of LangString objects.
              :rtype: list[LangString]

              :Example:

              >>> lang_str = LangString("Hello\nworld", "en") # For the test, remove one escape char before the line break.
              >>> split_lang_str = lang_str.splitlines()
              >>> print(split_lang_str)
              # Output:
              # [LangString(text='Hello', lang='en'), LangString(text='world', lang='en')]

              >>> lang_str = LangString("Hello\nworld", "en") # For the test, remove one escape char before the line break.
              >>> split_lang_str = lang_str.splitlines(True)
              >>> print(split_lang_str)
              # Output:
              # [LangString(text='Hello
      ', lang='en'), LangString(text='world', lang='en')]
              



   .. py:method:: startswith(prefix, start = 0, end = None)

      Return True if the LangString starts with the specified prefix, otherwise return False.

      This method mimics the behavior of the standard string's startswith method.

      :param prefix: The prefix to check.
      :type prefix: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: True if the LangString starts with the prefix, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> starts_with_hello = lang_str.startswith("Hello")
      >>> print(starts_with_hello)  # Output: True

      >>> lang_str = LangString("Hello, world!", "en")
      >>> starts_with_hello = lang_str.startswith("world")
      >>> print(starts_with_hello)  # Output: False



   .. py:method:: strip(chars = None)

      Return a copy of the LangString with leading and trailing characters removed.

      This method mimics the behavior of the standard string's strip method but returns a LangString object.

      :param chars: A string specifying the set of characters to be removed. If None, whitespace characters are removed.
      :type chars: Optional[str]
      :return: A new LangString with leading and trailing characters removed.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("   Hello, world!   ", "en")
      >>> stripped_lang_str = lang_str.strip()
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en

      >>> lang_str = LangString("***Hello, world!***", "en")
      >>> stripped_lang_str = lang_str.strip("*")
      >>> print(stripped_lang_str)  # Output: "Hello, world!"@en



   .. py:method:: swapcase()

      Return a copy of the LangString with uppercase characters converted to lowercase and vice versa.

      This method mimics the behavior of the standard string's swapcase method but returns a LangString object.

      :return: A new LangString with swapped case.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, WORLD!", "en")
      >>> swapcase_lang_str = lang_str.swapcase()
      >>> print(swapcase_lang_str)  # Output: "hELLO, world!"@en



   .. py:method:: title()

      Return a titlecased version of the LangString where words start with an uppercase character and the remaining
      characters are lowercase.

      This method mimics the behavior of the standard string's title method but returns a LangString object.

      :return: A new LangString that is titlecased.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello world", "en")
      >>> title_lang_str = lang_str.title()
      >>> print(title_lang_str)  # Output: "Hello World"@en



   .. py:method:: translate(table)

      Return a copy of the LangString in which each character has been mapped through the given translation table.

      This method mimics the behavior of the standard string's translate method but returns a LangString object.

      :param table: A translation table mapping Unicode ordinals to Unicode ordinals, strings, or None.
      :type table: dict[int, str]
      :return: A new LangString with the characters translated.
      :rtype: LangString

      :Example:

      >>> translation_table = str.maketrans("aeiou", "12345")
      >>> lang_str = LangString("hello world", "en")
      >>> translated_lang_str = lang_str.translate(translation_table)
      >>> print(translated_lang_str) # Output: "h2ll4 w4rld"@en



   .. py:method:: upper()

      Return a copy of the LangString with all the characters converted to uppercase.

      This method mimics the behavior of the standard string's upper method but returns a LangString object.

      :return: A new LangString with all characters in uppercase.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello world", "en")
      >>> upper_lang_str = lang_str.upper()
      >>> print(upper_lang_str)  # Output: "HELLO WORLD"@en



   .. py:method:: zfill(width)

      Return a copy of the LangString left filled with ASCII '0' digits to make a string of length width.

      This method mimics the behavior of the standard string's zfill method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :return: A new LangString left filled with '0' digits.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("42", "en")
      >>> zfilled_lang_str = lang_str.zfill(5)
      >>> print(zfilled_lang_str)  # Output: "00042"@en



   .. py:method:: to_string(print_quotes = None, separator = '@', print_lang = None)

      Return a string representation of the LangString with options for including quotes and language tag.

      :param print_quotes: If True, wrap the text in quotes. If None, use the default setting from the Controller.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between the text and language tag.
      :type separator: str
      :param print_lang: If True, include the language tag. If None, use the default setting from the Controller.
      :type print_lang: Optional[bool]
      :return: A string representation of the LangString.
      :rtype: str

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> print(lang_str.to_string())  # Output: '"Hello, World!"@en'
      >>> print(lang_str.to_string(print_quotes=False))  # Output: 'Hello, World!@en'
      >>> print(lang_str.to_string(print_lang=False))  # Output: '"Hello, World!"'



   .. py:method:: equals_str(other)

      Compare the LangString's text with a given string for equality.

      :param other: The string to compare with.
      :type other: str
      :return: True if the text matches the given string, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> print(lang_str.equals_str("Hello, World!"))  # Output: True
      >>> print(lang_str.equals_str("hello, world!"))  # Output: False



   .. py:method:: equals_langstring(other)

      Compare the LangString with another LangString for equality of text and language tag (case-insensitive).

      :param other: The LangString to compare with.
      :type other: LangString
      :return: True if both text and language tag match (case-insensitive), otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str1 = LangString("Hello, World!", "en")
      >>> lang_str2 = LangString("Hello, World!", "EN")
      >>> print(lang_str1.equals_langstring(lang_str2))  # Output: True
      >>> lang_str3 = LangString("Hello, World!", "fr")
      >>> print(lang_str1.equals_langstring(lang_str3))  # Output: False



   .. py:method:: __add__(other)

      Add another LangString or a string to this LangString.

      The operation can only be performed if:
      - Both are LangString objects with the same language tag.
      - The other is a string, which will be concatenated to the text of this LangString.

      :param other: The LangString or string to add.
      :type other: Union[LangString, str]
      :return: A new LangString with the concatenated text.
      :rtype: LangString
      :raises TypeError: If the objects are not compatible for addition.

      :Example:

      >>> lang_str1 = LangString("Hello", "en")
      >>> lang_str2 = LangString(" World", "en")
      >>> result = lang_str1 + lang_str2
      >>> print(result)  # Output: "Hello World"@en

      >>> lang_str3 = LangString("Hello", "en")
      >>> result = lang_str3 + " World"
      >>> print(result)  # Output: "Hello World"@en



   .. py:method:: __contains__(item)

      Check if a substring exists within the LangString's text.

      :param item: The substring to check.
      :type item: str
      :return: True if the substring exists within the text, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> contains = "World" in lang_str
      >>> print(contains)  # Output: True

      >>> contains = "Python" in lang_str
      >>> print(contains)  # Output: False



   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return: True if the objects are equal, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str1 = LangString("Hello, World!", "en")
      >>> lang_str2 = LangString("Hello, World!", "en")
      >>> is_equal = lang_str1 == lang_str2
      >>> print(is_equal)  # Output: True

      >>> lang_str3 = LangString("Hello, World!", "fr")
      >>> is_equal = lang_str1 == lang_str3
      >>> print(is_equal)  # Output: False

      >>> is_equal = lang_str1 == "Hello, World!"
      >>> print(is_equal)  # Output: True

      >>> is_equal = lang_str1 == "Bonjour, Monde!"
      >>> print(is_equal)  # Output: False



   .. py:method:: __ge__(other)

      Check if this LangString is greater than or equal to another str or LangString object.

      :param other: The str or LangString object to compare with.
      :type other: object
      :return: True if this LangString is greater than or equal to the other, otherwise False.
      :rtype: bool
      :raises TypeError: If the objects are not compatible for comparison.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("banana", "en")
      >>> lang_str2 = LangString("apple", "en")
      >>> is_ge = lang_str1 >= lang_str2
      >>> print(is_ge)  # Output: True

      >>> lang_str3 = LangString("apple", "en")
      >>> is_ge = lang_str2 >= lang_str3
      >>> print(is_ge)  # Output: True

      >>> is_ge = lang_str1 >= "banana"
      >>> print(is_ge)  # Output: True

      >>> is_ge = lang_str2 >= "cherry"
      >>> print(is_ge)  # Output: False



   .. py:method:: __getitem__(key)

      Retrieve a substring or a reversed string from the LangString's text.

      :param key: The index or slice to access.
      :type key: Union[int, slice]
      :return: A new LangString with the substring or single character.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello, world", "en")
      >>> substring = lang_str[0:5]
      >>> print(substring)  # Output: "hello"@en

      >>> single_char = lang_str[1]
      >>> print(single_char)  # Output: "e"@en



   .. py:method:: __gt__(other)

      Check if this LangString is greater than another LangString object.

      :param other: The str or LangString object to compare with.
      :type other: object
      :return: True if this LangString is greater than the other, otherwise False.
      :rtype: bool
      :raises TypeError: If the objects are not compatible for comparison.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("banana", "en")
      >>> lang_str2 = LangString("apple", "en")
      >>> is_gt = lang_str1 > lang_str2
      >>> print(is_gt)  # Output: True

      >>> lang_str3 = LangString("apple", "en")
      >>> is_gt = lang_str2 > lang_str3
      >>> print(is_gt)  # Output: False

      >>> is_gt = lang_str1 > "apple"
      >>> print(is_gt)  # Output: True

      >>> is_gt = lang_str2 > "cherry"
      >>> print(is_gt)  # Output: False



   .. py:method:: __hash__()

      Generate a hash value for a LangString object.

      The hash value is computed based on the text and a casefolded version of the language tag.

      :return: The hash value of the LangString object, based on its text and language tag.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> hash_value = hash(lang_str)
      >>> print(hash_value)  # Output: A unique integer representing the hash value



   .. py:method:: __iadd__(other)

      Implement in-place addition for LangString objects.

      This method allows the LangString's text to be concatenated with another LangString's text or a regular string.
      The operation is only allowed if both LangString objects have the same language tag or if the other operand is a string.

      :param other: The LangString or string to add.
      :type other: Union[LangString, str]
      :return: The same LangString instance with the concatenated text.
      :rtype: LangString
      :raises TypeError: If the objects are not compatible for addition.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("Hello", "en")
      >>> lang_str2 = LangString(" World", "en")
      >>> lang_str1 += lang_str2
      >>> print(lang_str1)  # Output: "Hello World"@en

      >>> lang_str1 += "!"
      >>> print(lang_str1)  # Output: "Hello World!"@en



   .. py:method:: __imul__(other)

      Implement in-place multiplication of the LangString's text.

      This method allows the LangString's text to be repeated a specified number of times.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: The same LangString instance with the text repeated.
      :rtype: LangString
      :raises TypeError: If the operand is not an integer.

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> lang_str *= 3
      >>> print(lang_str)  # Output: "HelloHelloHello"@en



   .. py:method:: __iter__()

      Enable iteration over the text part of the LangString.

      This method allows the LangString to be iterable, returning each character in the text part one by one.

      :return: An iterator over the characters in the text.
      :rtype: Iterator[str]

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> for char in lang_str:
      ...     print(char)
      ...
      # Output:   H
      #           e
      #           l
      #           l
      #           o



   .. py:method:: __le__(other)

      Check if this LangString is less than or equal to another LangString object or string.

      This method compares the LangString's text with another LangString's text or a regular string.

      :param other: The LangString or string to compare with.
      :type other: object
      :return: True if this LangString's text is less than or equal to the other text, otherwise False.
      :rtype: bool
      :raises TypeError: If the objects are not compatible for comparison.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("apple", "en")
      >>> lang_str2 = LangString("banana", "en")
      >>> print(lang_str1 <= lang_str2)  # Output: True
      >>> print(lang_str1 <= "apple")  # Output: True



   .. py:method:: __len__()

      Return the length of the LangString's text.

      :return: The length of the text.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> length = len(lang_str)
      >>> print(length)  # Output: 5



   .. py:method:: __lt__(other)

      Check if this LangString is less than another LangString object or string.

      This method compares the LangString's text with another LangString's text or a regular string.

      :param other: The LangString or string to compare with.
      :type other: object
      :return: True if this LangString's text is less than the other text, otherwise False.
      :rtype: bool
      :raises TypeError: If the objects are not compatible for comparison.
      :raises ValueError: If the language tags are incompatible.

      :Example:

      >>> lang_str1 = LangString("apple", "en")
      >>> lang_str2 = LangString("banana", "en")
      >>> print(lang_str1 < lang_str2)  # Output: True
      >>> print(lang_str1 < "banana")  # Output: True



   .. py:method:: __mul__(other)

      Multiply the LangString's text a specified number of times.

      This method repeats the LangString's text a specified number of times and returns a new LangString.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString
      :raises TypeError: If the operand is not an integer.

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> multiplied_lang_str = lang_str * 3
      >>> print(multiplied_lang_str)  # Output: "hellohellohello"@en



   .. py:method:: __radd__(other)

      Handle concatenation when LangString is on the right side of the '+' operator.

      This method is only defined for 'other' of type string because the __add__ method is used when 'other' is a LangString.
      It concatenates the other's text to the LangString's text (in this order) and returns a string, which loses its language tag.

      :param other: The string to concatenate with.
      :type other: str
      :return: A new string with the concatenated text.
      :rtype: str
      :raises TypeError: If 'other' is not a string.

      :Example:

      >>> lang_str = LangString("world", "en")
      >>> result = "hello " + lang_str
      >>> print(result)  # Output: 'hello world'



   .. py:method:: __repr__()

      Return an unambiguous string representation of the LangString.

      :return: The unambiguous string representation of the LangString.
      :rtype: str

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> print(repr(lang_str))  # Output: 'LangString(text="hello", lang="en")'



   .. py:method:: __rmul__(other)

      Implement right multiplication.

      This method is called for the reversed operation of multiplication, i.e., when LangString is on the right side.
      It is typically used for repeating the LangString's text a specified number of times.

      :param other: The number of times the LangString's text should be repeated.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString
      :raises TypeError: If 'other' is not an integer.

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> multiplied_lang_str = 3 * lang_str
      >>> print(multiplied_lang_str)  # Output: "hellohellohello"@en



   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> print(lang_str)  # Output: '"hello"@en'



   .. py:method:: merge_langstrings(langstrings)
      :staticmethod:


      Merge duplicated LangStrings in a list based on content and language tags.

      This method processes a list of LangString instances, identifying and merging duplicates
      based on their text and language tags. If there are multiple LangStrings with the same text
      but different language tag casings, the resulting LangString will use a casefolded version
      of the language tag.

      :param langstrings: List of LangString instances to be merged.
      :type langstrings: list[LangString]
      :return: A list of merged LangString instances without duplicates.
      :rtype: list[LangString]

      :Example:

      >>> lang_str1 = LangString("Hello", "en")
      >>> lang_str2 = LangString("Hello", "EN")
      >>> lang_str3 = LangString("Bonjour", "fr")
      >>> merged_list = LangString.merge_langstrings([lang_str1, lang_str2, lang_str3])
      >>> for ls in merged_list:
      ...     print(ls)
      ...
      >>> # Output: '"Hello"@en'
      >>> #         '"Bonjour"@fr'



   .. py:method:: print_list(langstring_list, print_quotes = None, separator = '@', print_lang = None)
      :staticmethod:


      Print a string representation of a list of LangString instances using the to_string method
      with specified formatting options.

      :param langstring_list: The list of LangString instances.
      :type langstring_list: list[LangString]
      :param print_quotes: If True, wrap the text in quotes. If None, use the default setting from the Controller.
      :type print_quotes: Optional[bool]
      :param separator: The separator to use between the text and language tag.
      :type separator: str
      :param print_lang: If True, include the language tag. If None, use the default setting from the Controller.
      :type print_lang: Optional[bool]

      :Example:

      >>> lang_str1 = LangString("a", "b")
      >>> lang_str2 = LangString("c", "d")
      >>> ls_list = [lang_str1, lang_str2]
      >>> LangString.print_list(ls_list)  # Output: ['"a"@b', '"c"@d']



   .. py:method:: _validate_match_types(other, overwrite_strict = False)

      Validate that the type of the other operand matches the expected type.

      This method checks if the operand type is valid based on the control flag for type matching.
      If strict type matching is enabled, only LangString type is allowed. The strict mode can be
      overridden by passing the `overwrite_strict` parameter.

      :param other: The operand to be validated.
      :type other: Union[object, str, LangString]
      :param overwrite_strict: If True, enforces strict type matching regardless of the control flag.
      :type overwrite_strict: bool
      :raises TypeError: If strict mode is enabled and the operand is not of type LangString.

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> lang_str._validate_match_types(lang_str, False)  # No exception
      >>> lang_str._validate_match_types(lang_str, True)  # Raises TypeError



   .. py:method:: _validate_match_langs(other)

      Validate that the language of the other LangString operand matches the current LangString's language.

      This method checks if the language tags of both LangString objects are compatible. If the languages
      do not match, a ValueError is raised.

      :param other: The operand to be validated.
      :type other: object
      :raises ValueError: If the languages of both LangString objects do not match.

      :Example:

      >>> lang_str1 = LangString("Hello", "en")
      >>> lang_str2 = LangString("Bonjour", "fr")
      >>> lang_str1._validate_match_langs(LangString("world", "en"))  # No exception
      >>> lang_str1._validate_match_langs(lang_str2)  # Raises ValueError due to incompatible languages



.. py:class:: MultiLangString(mls_dict = None, pref_lang = 'en')

   A class for managing multilingual text strings with various language tags.

   Utilizes a global control strategy set in Controller to handle duplicate language tags. Supports
   operations like adding, removing, and retrieving language strings in multiple languages.

   :cvar mls_dict: A dictionary representing the internal structure of the MultiLangString.
   :vartype mls_dict: Optional[dict[str, set[str]]]
   :ivar pref_lang: The preferred language for this MultiLangString. Defaults to "en".
   :vartype pref_lang: str


   .. py:property:: mls_dict
      :type: dict[str, set[str]]

      Getter for texts.



   .. py:property:: pref_lang
      :type: str

      Get the preferred language for this MultiLangString.

      :return: The preferred language as a string.



   .. py:method:: add(arg)


   .. py:method:: add_entry(text, lang)

      Add a text entry to the MultiLangString under a specified language.

      Validates the provided text and language against the current flag settings before adding. If the specified
      language does not exist in the mls_dict, a new set for that language is created. The text is then added to
      this set. If the language already exists, the text is added to the existing set for that language.

      :param text: The text to be added to the MultiLangString.
      :type text: str
      :param lang: The language under which the text should be added. If not specified, defaults to an empty string.
      :type lang: str



   .. py:method:: add_text_in_pref_lang(text)

      Add a text entry to the preferred language.



   .. py:method:: add_langstring(langstring)

      Add a LangString to the MultiLangString.

      :param langstring: The LangString object to be added, representing a text in a specific language.
      :type langstring: LangString



   .. py:method:: add_setlangstring(setlangstring)

      Add a SetLangString to the MultiLangString.

      :param setlangstring: The SetLangString object to be added, representing a text in a specific language.
      :type setlangstring: SetLangString



   .. py:method:: add_multilangstring(multilangstring)


   .. py:method:: add_empty_lang(lang)


   .. py:method:: discard(arg, clean_empty = False)


   .. py:method:: discard_entry(text, lang, clean_empty = False)


   .. py:method:: discard_text_in_pref_lang(text, clean_empty = False)

      Discard a text entry from the preferred language.



   .. py:method:: discard_langstring(langstring, clean_empty = False)


   .. py:method:: discard_setlangstring(setlangstring, clean_empty = False)


   .. py:method:: discard_multilangstring(multilangstring, clean_empty = False)


   .. py:method:: discard_lang(lang)


   .. py:method:: remove(arg, clean_empty = False)


   .. py:method:: remove_entry(text, lang, clean_empty = False)

      Remove a single entry from the set of a given language key in the dictionary.

      If the specified language key exists and the text is in its set, the text is removed. If this results in an
      empty set for the language, the language key is also removed from the dictionary.

      :param text: The text to be removed.
      :type text: str
      :param lang: The language key from which the text should be removed.
      :type lang: str



   .. py:method:: remove_text_in_pref_lang(text, clean_empty = False)

      Remove a text entry from the preferred language.



   .. py:method:: remove_langstring(langstring, clean_empty = False)


   .. py:method:: remove_setlangstring(setlangstring, clean_empty = False)


   .. py:method:: remove_multilangstring(multilangstring, clean_empty = False)


   .. py:method:: remove_lang(lang)

      Remove all entries of a given language from the dictionary.

      If the specified language key exists, it and all its associated texts are removed from the dictionary.

      :param lang: The language key to be removed along with all its texts.
      :type lang: str



   .. py:method:: remove_empty_langs()


   .. py:method:: to_strings(langs = None, print_quotes = None, separator = '@', print_lang = None)


   .. py:method:: to_langstrings(langs = None)


   .. py:method:: to_setlangstrings(langs = None)


   .. py:method:: count_entries_by_lang(lang)


   .. py:method:: count_entries_per_lang()

      Return the number of text entries for each language.

      :return: A dictionary with language codes as keys and counts of text entries as values.



   .. py:method:: count_entries_total()

      Return the total number of text entries across all languages.



   .. py:method:: count_langs_total()


   .. py:method:: contains(arg)


   .. py:method:: contains_entry(text, lang)


   .. py:method:: contains_lang(lang)


   .. py:method:: contains_text_in_pref_lang(text)

      Check if a specific text exists in the preferred language.



   .. py:method:: contains_text_in_any_lang(text)

      Check if a specific text exists in the preferred language.



   .. py:method:: contains_langstring(langstring)

      Check if the given LangString's text and lang are part of this MultiLangString.

      :param langstring: A LangString object to check.
      :return: True if the LangString's text is found within the specified language's set; otherwise, False.



   .. py:method:: contains_setlangstring(setlangstring)

      Check if all texts and the language of a SetLangString are part of this MultiLangString.

      :param setlangstring: A SetLangString object to check.
      :return: True if the SetLangString's language exists and all its texts are found within the specified
      language's set; otherwise, False.



   .. py:method:: contains_multilangstring(multilangstring)

      Check if the current instance contains all languages and texts of another MultiLangString instance.

      :param multilangstring: The MultiLangString instance to check against.
      :return: True if all languages and their respective texts in `multilangstring` are contained in this instance,
      False otherwise.



   .. py:method:: get_langs(casefold = False)

      Return a list with all languages in the MultiLangString.



   .. py:method:: get_texts()

      Return a sorted list with all texts in the MultiLangString.



   .. py:method:: get_langstring(text, lang)


   .. py:method:: get_setlangstring(lang)


   .. py:method:: get_multilangstring(langs)


   .. py:method:: pop_langstring(text, lang)


   .. py:method:: pop_setlangstring(lang)


   .. py:method:: pop_multilangstring(langs)


   .. py:method:: has_pref_lang_entries()


   .. py:method:: __contains__(lang)

      Check if a language is in the MultiLangString.



   .. py:method:: __delitem__(lang)

      Allow deletion of language entries.



   .. py:method:: __eq__(other)

      Check equality of this MultiLangString with another MultiLangString.

      Equality is determined based on the mls_dict attribute. The pref_lang attribute is not considered in the
      equality check.

      :param other: Another object to compare with.
      :type other: object
      :return: True if both MultiLangString objects have the same mls_dict, False otherwise.
      :rtype: bool



   .. py:method:: __getitem__(lang)

      Allow retrieval of entries by language.



   .. py:method:: __hash__()

      Generate a hash new_text for a MultiLangString object.

      The hash is computed based on the 'mls_dict' attribute of the MultiLangString. This approach ensures that
      MultiLangString objects with the same content will have the same hash new_text.

      :return: The hash new_text of the MultiLangString object.
      :rtype: int



   .. py:method:: __iter__()

      Allow iteration over the dictionary keys (language codes).



   .. py:method:: __len__()

      Return the number of languages in the dictionary.



   .. py:method:: __repr__()

      Return a detailed string representation of the MultiLangString object.

      This method provides a more verbose string representation of the MultiLangString, which includes the full
      dictionary of language strings and the preferred language, making it useful for debugging.

      :return: A detailed string representation of the MultiLangString.
      :rtype: str



   .. py:method:: __reversed__()

      Return a reverse iterator over the dictionary keys.



   .. py:method:: __setitem__(lang, texts)

      Allow setting entries by language.



   .. py:method:: __str__()

      Return a string representation of the MultiLangString, including language tags.

      This method provides a concise string representation of the MultiLangString, listing each text entry with its
      associated language tag.

      :return: A string representation of the MultiLangString with language tags.
      :rtype: str



   .. py:method:: merge_multilangstrings(multilangstrings)
      :staticmethod:



   .. py:method:: _get_registered_lang(lang)


   .. py:method:: _merge_language_entries(mls_dict)
      :staticmethod:


      Merge entries in the provided dict where the lang codes match case-insensitively. For duplicates,
      the entries are merged under their casefolded version. Original language codes are preserved
      if no case-insensitive duplicates are found.

      :param mls_dict: Dictionary with language codes as keys and sets of strings as values.
      :return: A dictionary with merged entries for case-insensitive duplicates, preserving original case otherwise.



.. py:class:: SetLangString(texts = None, lang = '')

   .. py:property:: texts
      :type: set[str]

      Getter for texts.



   .. py:property:: lang
      :type: str

      Getter for lang.



   .. py:method:: add_langstring(langstring)


   .. py:method:: add_text(text)


   .. py:method:: discard_text(text)


   .. py:method:: discard_langstring(langstring)


   .. py:method:: remove_langstring(langstring)


   .. py:method:: remove_text(text)


   .. py:method:: to_langstrings()


   .. py:method:: to_strings(print_quotes = None, separator = '@', print_lang = None)


   .. py:method:: add(new_element)


   .. py:method:: clear()


   .. py:method:: copy()


   .. py:method:: discard(element)


   .. py:method:: pop()


   .. py:method:: remove(element)


   .. py:method:: difference(*others)


   .. py:method:: difference_update(*others)


   .. py:method:: isdisjoint(other)


   .. py:method:: issubset(other)


   .. py:method:: issuperset(other)


   .. py:method:: intersection(*others)


   .. py:method:: intersection_update(*others)


   .. py:method:: symmetric_difference(other)


   .. py:method:: symmetric_difference_update(other)


   .. py:method:: union(*others)


   .. py:method:: update(*others)


   .. py:method:: __and__(other)


   .. py:method:: __contains__(element)


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __ge__(other)

      Check if self is a superset of another.



   .. py:method:: __gt__(other)

      Check if self is a proper superset of other.



   .. py:method:: __hash__()

      Generate a hash for a SetLangString object.



   .. py:method:: __iand__(other)


   .. py:method:: __ior__(other)


   .. py:method:: __isub__(other)


   .. py:method:: __iter__()


   .. py:method:: __ixor__(other)


   .. py:method:: __le__(other)

      Check if self is a subset of other.



   .. py:method:: __len__()


   .. py:method:: __lt__(other)

      Check if self is a proper subset of other.



   .. py:method:: __or__(other)


   .. py:method:: __repr__()

      Return the official string representation of the SetLangString object.



   .. py:method:: __str__()

      Define the string representation of the LangString object.

      This method provides a concise string representation of the LangString, listing each text entry with its
      associated language tag if the corresponding flags are set.

      :return: The string representation of the LangString object.
      :rtype: str



   .. py:method:: __sub__(other)


   .. py:method:: __xor__(other)


   .. py:method:: merge_setlangstrings(setlangstrings)
      :staticmethod:


      Merges duplicated SetLangStrings based on their language tags using the union method.

      If there's no case variation in the language tags among duplicates, the original casing is preserved.
      If case variations are found, the casefolded version of the language tag is used in the merged SetLangString.

      :param setlangstrings: The list of SetLangString instances.
      :return: A list of merged SetLangString instances without duplicates.



   .. py:method:: _validate_match_types_and_langs(other, overwrite_strict = False)


   .. py:method:: _extract_texts(other)


