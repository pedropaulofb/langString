:py:mod:`langstring`
====================

.. py:module:: langstring

.. autoapi-nested-parse::

   This package contains modules related to handling language-specific strings using the LangString and MultiLangString classes.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   utils/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   langstring/index.rst
   langstring_control/index.rst
   multilangstring/index.rst
   multilangstring_control/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.LangString
   langstring.LangStringControl
   langstring.LangStringFlag
   langstring.MultiLangStringControl
   langstring.MultiLangStringFlag




.. py:class:: LangString(text = '', lang = None)


   Bases: :py:obj:`langstring.utils.validation_base.ValidationBase`

   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the LangStringControl class, which can enforce non-empty text, valid language tags, and other constraints.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text, or None if not specified.
   :vartype lang: Optional[str]

   .. py:method:: _get_control_and_flags_type()

      Retrieve the control class and its corresponding flags enumeration used in the LangString class.

      This method provides the specific control class (LangStringControl) and the flags enumeration (LangStringFlag)
      that are used for configuring and validating the LangString instances. It is essential for the functioning of
      the ValidationBase methods, which rely on these control settings.

      :return: A tuple containing the LangStringControl class and the LangStringFlag enumeration.
      :rtype: tuple[type[LangStringControl], type[LangStringFlag]]


   .. py:method:: to_string()

      Convert the LangString object to a string representation.

      This method is a convenience wrapper for the __str__ method.

      :return: The string representation of the LangString object, including the language tag if present.
      :rtype: str


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object. Format: '"text"@lang' or '"text"' if lang is None.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return: True if 'other' is a LangString object with the same text and language tag, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a LangString object.

      :return: The hash value of the LangString object, based on its text and language tag.
      :rtype: int



.. py:class:: LangStringControl


   Bases: :py:obj:`utils.controls_base.ControlBase`

   Control class for managing LangString configuration flags, designed to be non-instantiable.

   This class uses class methods to set and retrieve configuration flags for LangString behavior, ensuring a
   consistent global configuration state. It is made non-instantiable by using the NonInstantiable metaclass,
   emphasizing its role as a static configuration manager rather than an object to be instantiated.

   :cvar _flags: Stores the state of each LangStringFlag.
   :vartype _flags: dict[LangStringFlag, bool]

   .. py:attribute:: _flags

      

   .. py:method:: _get_flags_type()
      :classmethod:

      Retrieve the control class and its corresponding flags enumeration used in the LangString class.

      This method provides the specific control class (LangStringControl) and the flags enumeration (LangStringFlag)
      that are used for configuring and validating the LangString instances. It is essential for the functioning of
      the ValidationBase methods, which rely on these control settings.

      :return: The LangStringFlag enumeration.
      :rtype: type[LangStringFlag]



.. py:class:: LangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class.

   :cvar ENSURE_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a LangString.
   :vartype ENSURE_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a LangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar ENSURE_VALID_LANG: Makes mandatory the use of a valid language code string for the LangString's field 'lang'.
   :vartype ENSURE_VALID_LANG: Enum
   :cvar VERBOSE_MODE: Enables verbose mode for additional information during operations.
   :vartype VERBOSE_MODE: Enum

   .. py:attribute:: ENSURE_TEXT

      

   .. py:attribute:: ENSURE_ANY_LANG

      

   .. py:attribute:: ENSURE_VALID_LANG

      


.. py:class:: MultiLangStringControl


   Bases: :py:obj:`utils.controls_base.ControlBase`

   Base class for LangStringControl and MultiLangStringControl, providing common flag management functionalities.

   This class serves as a base for both LangStringControl and MultiLangStringControl, offering methods to manage
   configuration flags that affect the behavior of LangString and MultiLangString instances. It is designed to be
   non-instantiable, acting as a utility class for flag management.

   The class uses an abstract class variable `_flags` to store the state of each configuration flag. Subclasses are
   expected to initialize this variable with a dictionary mapping flag types to their boolean states. This design
   allows for a flexible yet consistent approach to managing configuration flags across different classes.

   :cvar _flags: An abstract class variable that stores the state of each configuration flag. It should be initialized
                by subclasses with a dictionary mapping flag types (LangStringFlag or MultiLangStringFlag) to their
                boolean states. This variable plays a crucial role in managing the behavior of LangString and
                MultiLangString instances based on the set flags.
   :vartype _flags: dict[Union[type[LangStringFlag], type[MultiLangStringFlag]], bool]

   .. py:attribute:: _flags

      

   .. py:method:: _get_flags_type()
      :classmethod:

      Retrieve the control class and its corresponding flags enumeration used in the LangString class.

      This method provides the specific control class (LangStringControl) and the flags enumeration (LangStringFlag)
      that are used for configuring and validating the LangString instances. It is essential for the functioning of
      the ValidationBase methods, which rely on these control settings.

      :return: The LangStringFlag enumeration.
      :rtype: type[MultiLangStringFlag]



.. py:class:: MultiLangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class.

   :cvar ENSURE_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a LangString.
   :vartype ENSURE_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a LangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar ENSURE_VALID_LANG: Makes mandatory the use of a valid language code string for the LangString's field 'lang'.
   :vartype ENSURE_VALID_LANG: Enum
   :cvar VERBOSE_MODE: Enables verbose mode for additional information during operations.
   :vartype VERBOSE_MODE: Enum

   .. py:attribute:: ENSURE_TEXT

      

   .. py:attribute:: ENSURE_ANY_LANG

      

   .. py:attribute:: ENSURE_VALID_LANG

      


