:py:mod:`langstring`
====================

.. py:module:: langstring

.. autoapi-nested-parse::

   This package contains modules related to handling language-specific strings using the LangString and MultiLangString classes.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   langstring/index.rst
   multilangstring/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.LangString
   langstring.MultiLangString




.. py:class:: LangString(text, lang = None)


   A class to encapsulate a string with its language information.

   :ivar text: The actual text string.
   :vartype text: str
   :ivar lang: The language of the text, as a Language object or None if not specified.
   :vartype lang: Language

   .. py:method:: to_string()

      Convert the LangString object to a string. Syntactical sugar for calling self.__str__().

      :return: The string representation of the LangString object.
      :rtype: str


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this LangString with another LangString.

      :param other: Another LangString object to compare with.
      :type other: LangString
      :return: True if both LangString objects are equal, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a LangString object.

      :return: The hash value of the LangString object.
      :rtype: int



.. py:class:: MultiLangString(*args, control = 'ALLOW', preferred_lang = 'en')


   MultiLangString class for handling multilingual text strings.

   This class allows the management of multilingual text strings with different language tags.
   Depending on the specified control strategy, the behavior when encountering duplicate language tags can differ.
   The default behavior (using "ALLOW") prevents the addition of duplicate texts for the same language.
   That is, even if multiple identical `LangString` objects with the same text and language are added to
   a `MultiLangString`, the text for that language will not be duplicated in the internal representation.

   :ivar control: The control strategy for handling duplicate language tags.
   :vartype control: str
   :ivar langstrings: A dictionary of LangStrings indexed by language tag.
   :vartype langstrings: dict
   :ivar preferred_lang: The preferred language for this MultiLangString.
   :vartype preferred_lang: str

   Valid control strategies are:
       OVERWRITE: Overwrite existing entries with the same language tag.
       ALLOW: Allow multiple entries with the same language tag but prevent duplication of identical texts.
       BLOCK_WARN: Block and log a warning for duplicate language tags.
       BLOCK_ERROR: Block and raise an error for duplicate language tags.

   Example:
       If you have a `MultiLangString` initialized with control="ALLOW" and add two identical
       `LangString` objects (e.g., LangString("Hello", "en") twice), the internal representation
       will only have one "'Hello'@en".

   .. py:property:: control
      :type: str

      Get the control strategy for handling duplicate language tags.

      :return: The control strategy as a string.


   .. py:property:: preferred_lang
      :type: str

      Get the preferred language for this MultiLangString.

      :return: The preferred language as a string.


   .. py:attribute:: MULTIPLE_ENTRIES_CONTROLS
      :value: ('OVERWRITE', 'ALLOW', 'BLOCK_WARN', 'BLOCK_ERROR')

      Valid values are:
      OVERWRITE: Overwrite existing entries with the same language tag.
      ALLOW: Allow multiple entries with the same language tag.
      BLOCK_WARN: Block and log a warning for duplicate language tags.
      BLOCK_ERROR: Block and raise an error for duplicate language tags.


   .. py:method:: _validate_langstring_arg(arg)

      Private helper method to validate if the argument is a LangString.

      :param arg: Argument to be checked.
      :raises TypeError: If the passed argument is not an instance of LangString.


   .. py:method:: add(langstring)

      Add a LangString to the MultiLangString.

      :param langstring: The LangString to add.
      :type langstring: LangString


   .. py:method:: get_langstring(lang)

      Get LangStrings for a specific language tag.

      :param lang: The language tag to retrieve LangStrings for.
      :type lang: str
      :return: List of LangStrings for the specified language tag.
      :rtype: list


   .. py:method:: get_pref_langstring()

      Get the preferred language's LangString.

      :return: The LangString for the preferred language.
      :rtype: str


   .. py:method:: remove_langstring(langstring)

      Remove a LangString from the MultiLangString.

      :param langstring: The LangString to remove.
      :type langstring: LangString
      :return: True if the LangString was removed, False otherwise.
      :rtype: bool


   .. py:method:: remove_language(language_code)

      Remove all LangStrings associated with a specific language code.

      This method attempts to remove all LangStrings that match the given language code. If the
      language code is found and entries are removed, the method returns `True`. If the language
      code isn't found, the method returns `False`. For invalid language_code formats, a
      `ValueError` is raised.

      :param str language_code: The language code (e.g., "en", "fr") for which to remove LangStrings.
      :return: True if the language entries were removed, False otherwise.
      :rtype: bool
      :raises ValueError: If the provided language_code isn't valid or contains non-alphabetical chars.


   .. py:method:: to_string()

      Convert the MultiLangString to a string. Syntactical sugar for self.__str()__.

      :return: The string representation of the MultiLangString.
      :rtype: str


   .. py:method:: to_string_list()

      Convert the MultiLangString to a list of strings.

      :return: List of strings representing the MultiLangString.
      :rtype: list


   .. py:method:: __repr__()

      Return a string representation of the MultiLangString object.

      :return: A string representation of the MultiLangString.
      :rtype: str


   .. py:method:: __len__()

      Return the total number of LangStrings stored in the MultiLangString.

      :return: The total number of LangStrings.
      :rtype: int


   .. py:method:: __str__()

      Return a string representation of the MultiLangString, including language tags.

      :return: A string representation of the MultiLangString with language tags.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this MultiLangString with another MultiLangString.

      This method compares only the 'langstrings' attribute of the two MultiLangString objects.
      The 'control' and 'preferred_lang' attributes, which dictate the behavior for handling duplicate language tags
      and the preferred language, are not considered in this comparison. This design decision is based on the premise
      that two MultiLangString objects are considered equal if they contain the same multilingual content,
      irrespective of their internal handling of duplicates and preferred language.

      :param other: Another MultiLangString object to compare with.
      :type other: MultiLangString
      :return: True if both MultiLangString objects have the same content, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a MultiLangString object.

      The hash is computed based on the 'langstrings' attribute of the MultiLangString.
      The 'control' and 'preferred_lang' attributes are not included in the hash calculation. This ensures
      that the hash value reflects only the content of the MultiLangString, aligning with the
      equality comparison logic. This approach guarantees that MultiLangString objects with the same content
      will have the same hash value, even if they differ in their duplicate handling strategy and preferred language.

      :return: The hash value of the MultiLangString object.
      :rtype: int



