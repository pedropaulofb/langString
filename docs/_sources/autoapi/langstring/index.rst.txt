:py:mod:`langstring`
====================

.. py:module:: langstring

.. autoapi-nested-parse::

   The langstring package provides classes and utilities for handling multilingual text.

   It includes classes for single and multiple language strings, along with their control and validation mechanisms.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   utils/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   langstring/index.rst
   langstring_control/index.rst
   multilangstring/index.rst
   multilangstring_control/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.LangString
   langstring.LangStringControl
   langstring.LangStringFlag
   langstring.MultiLangString
   langstring.MultiLangStringControl
   langstring.MultiLangStringFlag




.. py:class:: LangString(text = '', lang = None)


   Bases: :py:obj:`langstring.utils.validation_base.ValidationBase`

   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the LangStringControl class, which can enforce non-empty text, valid language tags, and other constraints.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text, or None if not specified.
   :vartype lang: Optional[str]

   .. py:method:: _get_control_and_flags_type()

      Retrieve the control class and its corresponding flags enumeration used in the LangString class.

      This method provides the specific control class (LangStringControl) and the flags enumeration (LangStringFlag)
      that are used for configuring and validating the LangString instances. It is essential for the functioning of
      the ValidationBase methods, which rely on these control settings.

      :return: A tuple containing the LangStringControl class and the LangStringFlag enumeration.
      :rtype: tuple[type[LangStringControl], type[LangStringFlag]]


   .. py:method:: to_string()

      Convert the LangString object to a string representation.

      This method is a convenience wrapper for the __str__ method.

      :return: The string representation of the LangString object, including the language tag if present.
      :rtype: str


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object. Format: '"text"@lang' or '"text"' if lang is None.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return: True if 'other' is a LangString object with the same text and language tag, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a LangString object.

      :return: The hash value of the LangString object, based on its text and language tag.
      :rtype: int



.. py:class:: LangStringControl


   Bases: :py:obj:`langstring.utils.controls_base.ControlBase`

   Control class for managing LangString configuration flags, designed to be non-instantiable.

   This class uses class methods to set and retrieve configuration flags for LangString behavior, ensuring a
   consistent global configuration state. It is made non-instantiable by using the NonInstantiable metaclass,
   emphasizing its role as a static configuration manager rather than an object to be instantiated.

   :cvar _flags: Stores the state of each LangStringFlag.
   :vartype _flags: dict[LangStringFlag, bool]

   .. py:attribute:: _flags
      :type: dict[LangStringFlag, bool]

      

   .. py:method:: _get_flags_type()
      :classmethod:

      Retrieve the control class and its corresponding flags enumeration used in the LangString class.

      This method provides the specific control class (LangStringControl) and the flags enumeration (LangStringFlag)
      that are used for configuring and validating the LangString instances. It is essential for the functioning of
      the ValidationBase methods, which rely on these control settings.

      :return: The LangStringFlag enumeration.
      :rtype: type[LangStringFlag]



.. py:class:: LangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class.

   :cvar ENSURE_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a LangString.
   :vartype ENSURE_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a LangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar ENSURE_VALID_LANG: Makes mandatory the use of a valid language code string for the LangString's field 'lang'.
   :vartype ENSURE_VALID_LANG: Enum

   .. py:attribute:: ENSURE_TEXT

      

   .. py:attribute:: ENSURE_ANY_LANG

      

   .. py:attribute:: ENSURE_VALID_LANG

      


.. py:class:: MultiLangString(mls_dict = None, pref_lang = 'en')


   Bases: :py:obj:`langstring.utils.validation_base.ValidationBase`

   A class for managing multilingual text strings with various language tags.

   Utilizes a global control strategy set in MultiLangStringControl to handle duplicate language tags. Supports
   operations like adding, removing, and retrieving language strings in multiple languages.

   :cvar mls_dict: A dictionary representing the internal structure of the MultiLangString.
   :vartype mls_dict: Optional[dict[str, set[str]]]
   :ivar pref_lang: The preferred language for this MultiLangString. Defaults to "en".
   :vartype pref_lang: str

   .. py:property:: preferred_lang
      :type: str

      Get the preferred language for this MultiLangString.

      :return: The preferred language as a string.


   .. py:method:: _get_control_and_flags_type()

      Retrieve the control class and its corresponding flags enumeration used in the MultiLangString class.

      This method provides the specific control class (MultiLangStringControl) and the flags enumeration
      (MultiLangStringFlag) that are used for configuring and validating the MultiLangString instances.
      It is essential for the functioning of the ValidationBase methods, which rely on these control settings.

      :return: A tuple containing the MultiLangStringControl class and the MultiLangStringFlag enumeration.
      :rtype: tuple[type[MultiLangStringControl], type[MultiLangStringFlag]]


   .. py:method:: _validate_langstring_arg(arg)

      Private helper method to validate if the argument is a LangString.

      :param arg: Argument to be checked.
      :type arg: Any
      :raises TypeError: If the passed argument is not an instance of LangString.


   .. py:method:: add_entry(text, lang = '')

      Add a text entry to the MultiLangString under a specified language.

      Validates the provided text and language against the current flag settings before adding. If the specified
      language does not exist in the mls_dict, a new set for that language is created. The text is then added to
      this set. If the language already exists, the text is added to the existing set for that language.

      :param text: The text to be added to the MultiLangString.
      :type text: str
      :param lang: The language under which the text should be added. If not specified, defaults to an empty string.
      :type lang: str


   .. py:method:: add_langstring(langstring)

      Add a LangString to the MultiLangString.

      :param langstring: The LangString object to be added, representing a text in a specific language.
      :type langstring: LangString


   .. py:method:: remove_entry(text, lang)

      Remove a single entry from the set of a given language key in the dictionary.

      If the specified language key exists and the text is in its set, the text is removed. If this results in an
      empty set for the language, the language key is also removed from the dictionary.

      :param text: The text to be removed.
      :type text: str
      :param lang: The language key from which the text should be removed.
      :type lang: str


   .. py:method:: remove_lang(lang)

      Remove all entries of a given language from the dictionary.

      If the specified language key exists, it and all its associated texts are removed from the dictionary.

      :param lang: The language key to be removed along with all its texts.
      :type lang: str


   .. py:method:: get_langstring(text, lang)

      Retrieve a LangString object for a specific text and language.

      :param text: The text of the LangString.
      :type text: str
      :param lang: The language of the LangString.
      :type lang: str
      :return: A LangString object with the specified text and language.
      :rtype: LangString
      :raises ValueError: If the text/lang combination is not in mls_dict.


   .. py:method:: get_langstrings_lang(lang)

      Retrieve a list of LangStrings for a given language.

      :param lang: The language for which to retrieve LangStrings.
      :type lang: str
      :return: A list of LangStrings, each containing a single entry for the specified language.
               Returns an empty list if the specified language is not in mls_dict.
      :rtype: list[LangString]


   .. py:method:: get_langstrings_all()

      Retrieve a list of all LangStrings in mls_dict.

      :return: A list of LangStrings, each representing a single entry from mls_dict.
      :rtype: list[LangString]


   .. py:method:: get_langstrings_pref_lang()

      Retrieve a list of LangStrings for the preferred language.

      This method returns LangStrings for the language specified in the pref_lang attribute. If pref_lang is not
      a key in mls_dict, an empty list is returned.

      :return: A list of LangStrings for the preferred language.
      :rtype: list[LangString]


   .. py:method:: get_strings_lang(lang)

      Retrieve all text entries for a specific language.

      :param lang: The language key to retrieve entries for.
      :type lang: str
      :return: A list of text entries for the specified language.
      :rtype: list[str]


   .. py:method:: get_strings_pref_lang()

      Retrieve all text entries for the preferred language.

      :return: A list of text entries for the specified language.
      :rtype: list[str]


   .. py:method:: get_strings_all()

      Retrieve all text entries across all languages.

      :return: A list of all text entries.
      :rtype: list[str]


   .. py:method:: get_strings_langstring_lang(lang)

      Retrieve all text entries for a specific language, formatted as '"text"@lang'.

      :param lang: The language key to retrieve entries for.
      :type lang: str
      :return: A list of formatted text entries for the specified language.
      :rtype: list[str]


   .. py:method:: get_strings_langstring_pref_lang()

      Retrieve all text entries for the preferred language, formatted as '"text"@lang'.

      :return: A list of formatted text entries for the specified language.
      :rtype: list[str]


   .. py:method:: get_strings_langstring_all()

      Retrieve all text entries across all languages, formatted as '"text"@lang'.

      :return: A list of formatted text entries for all languages.
      :rtype: list[str]


   .. py:method:: len_entries_all()

      Calculate the total number of elements across all sets in the dictionary.

      Iterates through each set in the dictionary values and sums their lengths to get the total number of elements.

      :return: The total number of elements across all sets.
      :rtype: int


   .. py:method:: len_entries_lang(lang)

      Calculate the number of entries of a given language in the dictionary.

      :return: The number of entries for a given language in a MultiLangString.
      :rtype: int


   .. py:method:: len_langs()

      Calculate the number of keys (languages) in the dictionary.

      This method returns the count of distinct keys in the dictionary, which represents the number of languages.

      :return: The number of keys in the dictionary.
      :rtype: int


   .. py:method:: __repr__()

      Return a detailed string representation of the MultiLangString object.

      This method provides a more verbose string representation of the MultiLangString, which includes the full
      dictionary of language strings and the preferred language, making it useful for debugging.

      :return: A detailed string representation of the MultiLangString.
      :rtype: str


   .. py:method:: __str__()

      Return a string representation of the MultiLangString, including language tags.

      This method provides a concise string representation of the MultiLangString, listing each LangString with its
      associated language tag.

      :return: A string representation of the MultiLangString with language tags.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this MultiLangString with another MultiLangString.

      Equality is determined based on the mls_dict attribute. The pref_lang attribute is not considered in the
      equality check.

      :param other: Another object to compare with.
      :type other: object
      :return: True if both MultiLangString objects have the same mls_dict, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a MultiLangString object.

      The hash is computed based on the 'mls_dict' attribute of the MultiLangString. This approach ensures that
      MultiLangString objects with the same content will have the same hash value.

      :return: The hash value of the MultiLangString object.
      :rtype: int


   .. py:method:: _validate_mls_dict(mls_dict)

      Validate all elements in the provided mls_dict against the current flags' values.

      Iterates through each language and its associated texts in the mls_dict, applying validation methods to
      ensure compliance with the current flag settings.

      :param mls_dict: A dictionary where keys are language codes and values are sets of text entries.
      :type mls_dict: dict[str, set[str]]
      :raises TypeError: If any text or language in mls_dict does not comply with the expected types.
      :raises ValueError: If any text or language in mls_dict violates the rules set by the control flags.



.. py:class:: MultiLangStringControl


   Bases: :py:obj:`langstring.utils.controls_base.ControlBase`

   A control class for managing the configuration flags of MultiLangString instances.

   Inherits from ControlBase and utilizes a static approach to manage global settings that influence the behavior
   of MultiLangString objects. This class is non-instantiable and operates through class methods to ensure a
   consistent configuration state across all MultiLangString instances.

   The class manages flags defined in the MultiLangStringFlag enumeration, allowing for dynamic control over
   various aspects of MultiLangString behavior, such as text validation and language code enforcement.

   Usage:
       MultiLangStringControl is used to configure global settings for MultiLangString instances. It affects how
       these instances validate and process multilingual text data based on the set flags.

   Example:
       MultiLangStringControl.set_flag(MultiLangStringFlag.ENSURE_VALID_LANG, True)
       is_valid_lang_enforced = MultiLangStringControl.get_flag(MultiLangStringFlag.ENSURE_VALID_LANG)
       print(f"ENSURE_VALID_LANG flag is set to {is_valid_lang_enforced}.")

   Note:
       As a static configuration manager, MultiLangStringControl should not be instantiated. It is designed to
       provide a centralized way to manage settings for all MultiLangString instances.

   :cvar _flags: A class-level dictionary storing the state of each configuration flag for MultiLangString instances.
   :vartype _flags: dict[MultiLangStringFlag, bool]

   .. py:attribute:: _flags
      :type: dict[MultiLangStringFlag, bool]

      

   .. py:method:: _get_flags_type()
      :classmethod:

      Retrieve the control class and its corresponding flags enumeration used in the LangString class.

      This method provides the specific control class (LangStringControl) and the flags enumeration (LangStringFlag)
      that are used for configuring and validating the LangString instances. It is essential for the functioning of
      the ValidationBase methods, which rely on these control settings.

      :return: The LangStringFlag enumeration.
      :rtype: type[MultiLangStringFlag]



.. py:class:: MultiLangStringFlag(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Enumeration for LangString control flags.

   This enum defines various flags that can be used to configure the behavior of the LangString class.

   :cvar ENSURE_TEXT: Makes mandatory the use of a non-empty string for the field 'text' of a LangString.
   :vartype ENSURE_TEXT: Enum
   :cvar ENSURE_ANY_LANG: Makes mandatory the use of a non-empty string for the field 'lang' of a LangString.
   :vartype ENSURE_ANY_LANG: Enum
   :cvar ENSURE_VALID_LANG: Makes mandatory the use of a valid language code string for the LangString's field 'lang'.
   :vartype ENSURE_VALID_LANG: Enum

   .. py:attribute:: ENSURE_TEXT

      

   .. py:attribute:: ENSURE_ANY_LANG

      

   .. py:attribute:: ENSURE_VALID_LANG

      


