langstring.utils.validator
==========================

.. py:module:: langstring.utils.validator

.. autoapi-nested-parse::

   This module defines the Validator class.



Attributes
----------

.. autoapisummary::

   langstring.utils.validator.T


Classes
-------

.. autoapisummary::

   langstring.utils.validator.Validator


Functions
---------

.. autoapisummary::

   langstring.utils.validator.validate_multiple_type


Module Contents
---------------

.. py:data:: T

.. py:class:: Validator

   A mixin class that provides validation methods for classes handling language strings.

   It ensures that the text and language arguments meet specific criteria, such as type correctness, non-emptiness,
   and language tag validity. The validation rules are determined by control flags from a control class.


   .. py:method:: validate_flags_text(flag_type, text)
      :classmethod:



   .. py:method:: validate_flags_lang(flag_type, lang)
      :staticmethod:



   .. py:method:: validate_type_decorator(func)
      :classmethod:


      Validate the types of arguments passed to a function or method based on their type hints. Used as decorator.

      This method checks if each argument's type matches its corresponding type hint. It is intended for use with
      functions or class methods where explicit type hints are provided for all arguments.

      Note:
          This decorator is designed for use with functions, instance methods, and static methods where explicit
          type hints are provided for all arguments. It automatically adjusts for the 'self' parameter in instance
          methods. However, it is not suitable for class methods or setters in classes, as it does not handle
          the 'cls' parameter in class methods and may lead to incorrect behavior with setters. For class methods
          and setters, manual type validation is recommended.

          The decorator should not be used with methods that have parameters of generic types, such as `list`, `set`,
          or other collections that are parameterized with type variables (e.g., `list[str]` or `set[MyClass]`).
          This limitation stems from the dynamic nature of generic types in Python, which can lead to runtime errors
          when attempting to check against a parameterized type. Therefore, it is recommended to avoid applying this
          decorator to methods where the parameters or return types involve generic collections directly.

      :param func: The function or method to be decorated.
      :type func: Callable[..., T]
      :return: The decorated function or method with type validation applied.
      :rtype: Callable[..., T]
      :raises TypeError: If an argument's type does not match its type hint.



   .. py:method:: _get_origin(tp)
      :staticmethod:



   .. py:method:: _get_args(tp)
      :staticmethod:



   .. py:method:: validate_type_single(arg, arg_exp_type, optional = False)
      :staticmethod:



   .. py:method:: validate_type_iterable(arg, arg_exp_type, arg_content_exp_type, optional = False)
      :classmethod:



.. py:function:: validate_multiple_type(arg, arg_exp_type, optional = False)

