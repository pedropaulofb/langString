langstring.utils.validator
==========================

.. py:module:: langstring.utils.validator

.. autoapi-nested-parse::

   This module defines the Validator class.



Attributes
----------

.. autoapisummary::

   langstring.utils.validator.T


Classes
-------

.. autoapisummary::

   langstring.utils.validator.Validator


Module Contents
---------------

.. py:data:: T

.. py:class:: Validator

   A mixin class that provides validation methods for classes handling language strings.

   It ensures that the text and language arguments meet specific criteria, such as type correctness, non-emptiness,
   and language tag validity. The validation rules are determined by control flags from a control class.


   .. py:method:: validate_flags_text(flag_type, text)
      :classmethod:



   .. py:method:: validate_flags_lang(flag_type, lang)
      :staticmethod:



   .. py:method:: _check_arg(arg, hint)
      :staticmethod:


      Check if the argument matches the type hint.



   .. py:method:: validate_type_decorator(func)
      :classmethod:


      Decorator to validate the types of arguments passed to a function or method based on their type hints.

      This method checks if each argument's type matches its corresponding type hint. It is intended for use with
      functions or instance methods where explicit type hints are provided for all arguments.

      Usage:
          - Apply this decorator to functions or instance methods that require type validation based on type hints.

      When to Use:
          - Use this decorator for functions or methods where argument types need to be strictly validated.
          - Suitable for validating primitive types (int, str, float, bool, etc.), Optional types, and Union types.
          - Useful for parameterized generics like List[int], Set[str], etc., to ensure both the container and
            its contents match the specified types.
          - Appropriate for instance methods, adjusting for the 'self' parameter automatically.
          - Suitable for static methods but requires manual validation for class methods and setters.

      When Not to Use:
          - Do not use this decorator for class methods with the 'cls' parameter,
          as it does not handle 'cls' explicitly.
          - Avoid using this decorator for property setters.
          - This decorator is not suitable for methods with parameters involving generic collections parameterized
            with type variables (e.g., List[T] where T is a type variable).
          - Complex nested generics (e.g., List[Dict[str, Union[int, List[str]]]]) might not be fully validated.
          - Specifically, cases like `(["test", 1], list, False)` (List with mixed types) and nested `Union` within
          parameterized generics (e.g., `list[Union[int, str]]`) are out of scope and will not be correctly validated
          by this decorator.


      :param func: The function or method to be decorated.
      :type func: Callable[..., T]
      :return: The decorated function or method with type validation applied.
      :rtype: Callable[..., T]
      :raises TypeError: If an argument's type does not match its type hint.



   .. py:method:: validate_type_single(arg, arg_exp_type, optional = False)
      :staticmethod:



   .. py:method:: validate_type_iterable(arg, arg_exp_type, arg_content_exp_type, optional = False)
      :classmethod:



