:py:mod:`langstring.converter`
==============================

.. py:module:: langstring.converter

.. autoapi-nested-parse::

   This module provides a Converter class for converting between different string types used in language processing.

   The Converter class is designed as a utility class to facilitate the conversion between `LangString`, `SetLangString`,
   and `MultiLangString` objects. These objects represent different ways of handling language-tagged strings, which are
   common in applications dealing with multilingual data. The class methods in Converter allow for seamless and efficient
   transformation of these string types, ensuring compatibility and ease of use in various language processing tasks.

   Classes:
       Converter: Provides methods for converting between `LangString`, `SetLangString`, and `MultiLangString`.

   Usage:
       The Converter class is used as a utility and should not be instantiated. Instead, its class methods are called
       directly to perform conversions. For example, `Converter.to_langstring(arg_obj)` where `arg_obj` could
       be an instance of `SetLangString` or `MultiLangString`.

   Note:
       The module is designed with the assumption that the arg objects are well-formed instances of their respective
       classes. Error handling is provided for type mismatches, but not for malformed objects.

   This module is part of a larger package dealing with language processing and RDF data manipulation, providing
   foundational tools for handling multilingual text data in various formats.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.converter.Converter




.. py:class:: Converter


   A utility class for converting between different string types used in language processing.

   This class provides methods to convert between `LangString`, `SetLangString`, and `MultiLangString` types.
   It is designed to be non-instantiable as it serves as a utility class with class methods only.

   .. py:method:: to_string(arg)
      :classmethod:


   .. py:method:: to_strings(arg)
      :classmethod:


   .. py:method:: to_langstring(arg)
      :classmethod:

      Convert a SetLangString or MultiLangString to a list of LangStrings.

      :param arg: The SetLangString or MultiLangString to be converted.
      :type arg: Union[SetLangString, MultiLangString]
      :return: A list of LangStrings.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type SetLangString or MultiLangString.


   .. py:method:: to_setlangstring(arg)
      :classmethod:

      Convert a LangString or MultiLangString to a SetLangString or a list of SetLangStrings.

      :param arg: The LangString or MultiLangString to be converted.
      :type arg: Union[LangString, MultiLangString]
      :return: A SetLangString or a list of SetLangStrings.
      :rtype: Union[SetLangString, list[SetLangString]]
      :raises TypeError: If the arg is not of type LangString or MultiLangString.


   .. py:method:: to_multilangstring(arg)
      :classmethod:

      Convert a LangString or SetLangString to a MultiLangString.

      :param arg: The LangString or SetLangString to be converted.
      :type arg: Union[LangString, SetLangString]
      :return: A MultiLangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type LangString or SetLangString.


   .. py:method:: from_string_to_langstring(arg_string, ignore_at_sign = False)
      :staticmethod:

      Convert a string into a LangString.

      If the string contains '@', it splits the string into text (left part) and lang (right part).
      If there is no '@', the entire string is set as text and lang is set to an empty string.

      :param arg_string: The arg string to be converted.
      :return: A LangString


   .. py:method:: from_strings_to_langstrings(arg, lang)
      :staticmethod:


   .. py:method:: from_strings_to_setlangstring(arg, lang)
      :staticmethod:


   .. py:method:: from_strings_to_multilangstring(arg)
      :classmethod:


   .. py:method:: from_langstring_to_string(arg)
      :staticmethod:


   .. py:method:: from_langstring_to_setlangstring(arg)
      :staticmethod:

      Convert a LangString to a SetLangString.

      This method creates a SetLangString from a LangString. The resulting SetLangString contains the text of the
      LangString in a set and retains its language.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :return: A SetLangString containing the text from the arg LangString.
      :rtype: SetLangString
      :raises TypeError: If the arg is not of type LangString.


   .. py:method:: from_langstrings_to_setlangstring(arg)
      :staticmethod:


   .. py:method:: from_langstring_to_multilangstring(arg)
      :staticmethod:

      Convert a LangString to a MultiLangString.

      This method takes a single LangString and converts it into a MultiLangString. The resulting MultiLangString
      contains the text and language of the arg LangString.

      :param arg: The LangString to be converted.
      :type arg: LangString
      :return: A MultiLangString containing the text and language from the arg LangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type LangString.


   .. py:method:: from_langstrings_to_multilangstring(arg)
      :staticmethod:


   .. py:method:: from_setlangstring_to_string(arg)
      :staticmethod:


   .. py:method:: from_setlangstring_to_strings(arg, print_quotes = True, separator = '@', print_lang = True)
      :staticmethod:


   .. py:method:: from_setlangstring_to_langstrings(arg)
      :staticmethod:

      Convert a SetLangString to a list of LangStrings.

      This method takes a SetLangString and converts it into a list of LangStrings, each containing one of the texts
      from the SetLangString and its associated language.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: A list of LangStrings, each corresponding to a text in the arg SetLangString.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type SetLangString.


   .. py:method:: from_setlangstring_to_multilangstring(arg)
      :staticmethod:

      Convert a SetLangString to a MultiLangString.

      This method creates a MultiLangString from a SetLangString. The resulting MultiLangString contains all texts
      from the SetLangString, associated with its language.

      :param arg: The SetLangString to be converted.
      :type arg: SetLangString
      :return: A MultiLangString containing all texts from the arg SetLangString.
      :rtype: MultiLangString
      :raises TypeError: If the arg is not of type SetLangString.


   .. py:method:: from_setlangstrings_to_multilangstring(arg)
      :staticmethod:


   .. py:method:: from_multilangstring_to_langstrings(arg, languages = None)
      :staticmethod:

      Convert a MultiLangString to a list of LangStrings.

      This method takes a MultiLangString and converts it into a list of LangStrings, each representing one of the
      texts in the MultiLangString along with its associated language.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :return: A list of LangStrings, each corresponding to a text in the arg MultiLangString.
      :rtype: list[LangString]
      :raises TypeError: If the arg is not of type MultiLangString.


   .. py:method:: from_multilangstring_to_setlangstrings(arg, languages = None)
      :staticmethod:

      Convert a MultiLangString to a list of SetLangStrings.

      This method creates a list of SetLangStrings from a MultiLangString. Each SetLangString in the list contains
      texts of a single language from the MultiLangString.

      :param arg: The MultiLangString to be converted.
      :type arg: MultiLangString
      :return: A list of SetLangStrings, each containing texts of a single language from the arg MultiLangString.
      :rtype: list[SetLangString]
      :raises TypeError: If the arg is not of type MultiLangString.


   .. py:method:: from_multilangstring_to_string(arg)
      :staticmethod:


   .. py:method:: from_multilangstring_to_strings(arg, languages = None, print_quotes = True, separator = '@', print_lang = True)
      :staticmethod:



