langstring.langstring
=====================

.. py:module:: langstring.langstring

.. autoapi-nested-parse::

   The langstring module provides the LangString class to encapsulate a string with its language information.

   This module is designed to work with text strings and their associated language tags, offering functionalities
   such as validation of language tags, handling of empty strings and language tags based on control flags. It optionally
   utilizes the langcodes library for validating language tags, enhancing the robustness of the language tag validation
   process.

   Control flags from the controller module are used to enforce certain behaviors like ensuring non-empty text and valid
   language tags. These flags can be set externally to alter the behavior of the LangString class.

   The LangString class aims to make user interaction as similar as possible to working with regular strings. To achieve
   this, many of the standard string methods have been overridden to return LangString objects, allowing seamless
   integration and extended functionality. Additionally, the class provides mechanisms for validating input types,
   matching language tags, and merging LangString objects.

   :Example:

       # Create a LangString object
       lang_str = LangString("Hello, World!", "en")

       # Print the string representation
       print(lang_str.to_string())  # Output: '"Hello, World!"@en'

       # Convert to uppercase
       upper_lang_str = lang_str.upper()
       print(upper_lang_str.to_string())  # Output: '"HELLO, WORLD!"@en'

       # Check if the text contains a substring
       contains_substring = "World" in lang_str
       print(contains_substring)  # Output: True

       # Concatenate two LangString objects
       lang_str2 = LangString(" How are you?", "en")
       combined_lang_str = lang_str + lang_str2
       print(combined_lang_str.to_string())  # Output: '"Hello, World! How are you?"@en'

   Modules:
       controller: Provides control flags that influence the behavior of the LangString class.
       flags: Defines the LangStringFlag class with various control flags for the LangString class.
       utils.validator: Provides validation methods used within the LangString class.



Classes
-------

.. autoapisummary::

   langstring.langstring.LangString


Module Contents
---------------

.. py:class:: LangString(text = '', lang = '')

   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the Controller class, which can enforce non-empty text, valid language tags, and other constraints.

   Many standard string methods are overridden to return LangString objects, allowing seamless integration and
   extended functionality. This design ensures that users can work with LangString instances similarly to regular
   strings.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text.
   :vartype lang: str
   :raises ValueError: If control flags enforce non-empty text and the text is empty.
   :raises TypeError: If the types of parameters are incorrect based on validation.


   .. py:property:: text
      :type: str

      Get the text string.

      :return: The text string.
      :rtype: str



   .. py:property:: lang
      :type: str

      Get the language tag.

      :return: The language tag.
      :rtype: str



   .. py:method:: capitalize()

      Return a copy of the LangString with its first character capitalized and the rest lowercased.

      This method mimics the behavior of the standard string's capitalize method but returns a LangString object.

      :return: A new LangString with the first character capitalized.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello, world!", "en")
      >>> capitalized_lang_str = lang_str.capitalize()
      >>> print(capitalized_lang_str.to_string())  # Output: "Hello, world!"@en



   .. py:method:: casefold()

      Return a casefolded copy of the LangString. Casefolding is a more aggressive version of lowercasing.

      This method mimics the behavior of the standard string's casefold method but returns a LangString object.

      :return: A new LangString that is casefolded.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, WORLD!", "en")
      >>> casefolded_lang_str = lang_str.casefold()
      >>> print(casefolded_lang_str.to_string())  # Output: "hello, world!"@en



   .. py:method:: center(width, fillchar = ' ')

      Return a centered LangString of length width.

      Padding is done using the specified fill character (default is a space).

      This method mimics the behavior of the standard string's center method but returns a LangString object.

      :param width: The total width of the resulting LangString.
      :type width: int
      :param fillchar: The character to fill the padding with.
      :type fillchar: str
      :return: A new LangString centered with padding.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> centered_lang_str = lang_str.center(11, "*")
      >>> print(centered_lang_str.to_string())  # Output: "***hello***"@en



   .. py:method:: count(sub, start = 0, end = None)

      Return the number of non-overlapping occurrences of substring sub in the LangString.

      This method mimics the behavior of the standard string's count method.

      :param sub: The substring to count.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The number of occurrences of the substring.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello, hello, hello!", "en")
      >>> count_hello = lang_str.count("hello")
      >>> print(count_hello)  # Output: 3



   .. py:method:: endswith(suffix, start = 0, end = None)

      Return True if the LangString ends with the specified suffix, otherwise return False.

      This method mimics the behavior of the standard string's endswith method.

      :param suffix: The suffix to check.
      :type suffix: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: True if the LangString ends with the suffix, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("hello, world!", "en")
      >>> ends_with_world = lang_str.endswith("world!")
      >>> print(ends_with_world)  # Output: True



   .. py:method:: expandtabs(tabsize = 8)

      Return a copy of the LangString where all tab characters are expanded using spaces.

      This method mimics the behavior of the standard string's expandtabs method but returns a LangString object.

      :param tabsize: The number of spaces to use for each tab character.
      :type tabsize: int
      :return: A new LangString with tabs expanded.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("hello        world", "en")
      >>> expanded_lang_str = lang_str.expandtabs(4)
      >>> print(expanded_lang_str.to_string())  # Output: "hello   world"@en



   .. py:method:: find(sub, start = 0, end = None)

      Return the lowest index in the LangString where substring sub is found.

      This method mimics the behavior of the standard string's find method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The lowest index where the substring is found, or -1 if not found.
      :rtype: int

      :Example:

      >>> lang_str = LangString("hello, world", "en")
      >>> index = lang_str.find("world")
      >>> print(index)  # Output: 7



   .. py:method:: format(*args, **kwargs)

      Perform a string formatting operation on the LangString.

      This method mimics the behavior of the standard string's format method but returns a LangString object.

      :param args: Positional arguments for formatting.
      :type args: Any
      :param kwargs: Keyword arguments for formatting.
      :type kwargs: Any
      :return: A new LangString with the formatted text.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, {}!", "en")
      >>> formatted_lang_str = lang_str.format("world")
      >>> print(formatted_lang_str.to_string())  # Output: "Hello, world!"@en



   .. py:method:: format_map(mapping)

      Perform a string formatting operation using a dictionary.

      This method mimics the behavior of the standard string's format_map method but returns a LangString object.

      :param mapping: A dictionary for formatting.
      :type mapping: dict
      :return: A new LangString with the formatted text.
      :rtype: LangString

      :Example:

      >>> lang_str = LangString("Hello, {name}!", "en")
      >>> formatted_lang_str = lang_str.format_map({"name": "world"})
      >>> print(formatted_lang_str.to_string())  # Output: "Hello, world!"@en



   .. py:method:: index(sub, start = 0, end = None)

      Return the lowest index in the LangString where substring sub is found.

      This method mimics the behavior of the standard string's index method.

      :param sub: The substring to find.
      :type sub: str
      :param start: The starting position (default is 0).
      :type start: int, optional
      :param end: The ending position (default is the end of the string).
      :type end: int, optional
      :return: The lowest index where the substring is found.
      :rtype: int
      :raises ValueError: If the substring is not found.

      :Example:

      >>> lang_str = LangString("hello, world", "en")
      >>> index = lang_str.index("world")
      >>> print(index)  # Output: 7



   .. py:method:: isalnum()

      Return True if all characters in the LangString are alphanumeric and there is at least one character.

      This method mimics the behavior of the standard string's isalnum method.

      :return: True if the LangString is alphanumeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello123", "en")
      >>> is_alnum = lang_str.isalnum()
      >>> print(is_alnum)  # Output: True

      >>> lang_str = LangString("Hello 123", "en")
      >>> is_alnum = lang_str.isalnum()
      >>> print(is_alnum)  # Output: False



   .. py:method:: isalpha()

      Return True if all characters in the LangString are alphabetic and there is at least one character.

      This method mimics the behavior of the standard string's isalpha method.

      :return: True if the LangString is alphabetic, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> is_alpha = lang_str.isalpha()
      >>> print(is_alpha)  # Output: True

      >>> lang_str = LangString("Hello123", "en")
      >>> is_alpha = lang_str.isalpha()
      >>> print(is_alpha)  # Output: False



   .. py:method:: isascii()

      Return True if all characters in the LangString are ASCII characters.

      This method mimics the behavior of the standard string's isascii method.

      :return: True if the LangString is ASCII, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello", "en")
      >>> is_ascii = lang_str.isascii()
      >>> print(is_ascii)  # Output: True

      >>> lang_str = LangString("Héllo", "en")
      >>> is_ascii = lang_str.isascii()
      >>> print(is_ascii)  # Output: False



   .. py:method:: isdecimal()

      Return True if all characters in the LangString are decimal characters and there is at least one character.

      This method mimics the behavior of the standard string's isdecimal method.

      :return: True if the LangString is decimal, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_decimal = lang_str.isdecimal()
      >>> print(is_decimal)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_decimal = lang_str.isdecimal()
      >>> print(is_decimal)  # Output: False



   .. py:method:: isdigit()

      Return True if all characters in the LangString are digits and there is at least one character.

      This method mimics the behavior of the standard string's isdigit method.

      :return: True if the LangString is numeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_digit = lang_str.isdigit()
      >>> print(is_digit)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_digit = lang_str.isdigit()
      >>> print(is_digit)  # Output: False



   .. py:method:: isidentifier()

      Return True if the LangString is a valid identifier according to Python language definition.

      This method mimics the behavior of the standard string's isidentifier method.

      :return: True if the LangString is a valid identifier, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("variable_name", "en")
      >>> is_identifier = lang_str.isidentifier()
      >>> print(is_identifier)  # Output: True

      >>> lang_str = LangString("123variable", "en")
      >>> is_identifier = lang_str.isidentifier()
      >>> print(is_identifier)  # Output: False



   .. py:method:: islower()

      Return True if all cased characters in the LangString are lowercase and there is at least one cased character.

      This method mimics the behavior of the standard string's islower method.

      :return: True if the LangString is in lowercase, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("hello", "en")
      >>> is_lower = lang_str.islower()
      >>> print(is_lower)  # Output: True

      >>> lang_str = LangString("Hello", "en")
      >>> is_lower = lang_str.islower()
      >>> print(is_lower)  # Output: False



   .. py:method:: isnumeric()

      Return True if all characters in the LangString are numeric characters and there is at least one character.

      This method mimics the behavior of the standard string's isnumeric method.

      :return: True if the LangString is numeric, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("12345", "en")
      >>> is_numeric = lang_str.isnumeric()
      >>> print(is_numeric)  # Output: True

      >>> lang_str = LangString("123.45", "en")
      >>> is_numeric = lang_str.isnumeric()
      >>> print(is_numeric)  # Output: False



   .. py:method:: isprintable()

      Return True if all characters in the LangString are printable or the LangString is empty.

      This method mimics the behavior of the standard string's isprintable method.

      :return: True if the LangString is printable, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, world!", "en")
      >>> is_printable = lang_str.isprintable()
      >>> print(is_printable)  # Output: True

      >>> lang_str = LangString("Hello,       world!", "en")
      >>> is_printable = lang_str.isprintable()
      >>> print(is_printable)  # Output: False



   .. py:method:: isspace()

      Return True if there are only whitespace characters in the LangString and there is at least one character.

      This method mimics the behavior of the standard string's isspace method.

      :return: True if the LangString is whitespace, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("   ", "en")
      >>> is_space = lang_str.isspace()
      >>> print(is_space)  # Output: True

      >>> lang_str = LangString("Hello, world!", "en")
      >>> is_space = lang_str.isspace()
      >>> print(is_space)  # Output: False



   .. py:method:: istitle()

      Return True if the LangString is a titlecased string and there is at least one character.

      This method mimics the behavior of the standard string's istitle method.

      :return: True if the LangString is titlecased, otherwise False.
      :rtype: bool

      :Example:

      >>> lang_str = LangString("Hello, World!", "en")
      >>> is_title = lang_str.istitle()
      >>> print(is_title)  # Output: True

      >>> lang_str = LangString("hello, world!", "en")
      >>> is_title = lang_str.istitle()
      >>> print(is_title)  # Output: False



   .. py:method:: isupper()


   .. py:method:: join(iterable)

      Join an iterable with the text of the LangString.



   .. py:method:: ljust(width, fillchar = ' ')

      Left justify the text.



   .. py:method:: lower()


   .. py:method:: lstrip(chars = None)


   .. py:method:: partition(sep)

      Partition the text.



   .. py:method:: replace(old, new, count = -1)


   .. py:method:: removeprefix(prefix)

      Remove the specified prefix from the LangString's text.

      If the text starts with the prefix string, return a new LangString with the prefix string removed.
      Otherwise, return a copy of the original LangString.

      :param prefix: The prefix to remove from the text.
      :return: A new LangString with the prefix removed.



   .. py:method:: removesuffix(suffix)

      Remove the specified suffix from the LangString's text.

      If the text ends with the suffix string, return a new LangString with the suffix string removed.
      Otherwise, return a copy of the original LangString.

      :param suffix: The suffix to remove from the text.
      :return: A new LangString with the suffix removed.



   .. py:method:: rfind(sub, start = 0, end = None)


   .. py:method:: rindex(sub, start = 0, end = None)


   .. py:method:: rjust(width, fillchar = ' ')

      Right justify the text.



   .. py:method:: rpartition(sep)

      Partition the text from the right.



   .. py:method:: rsplit(sep = None, maxsplit = -1)

      Split the text from the right.



   .. py:method:: rstrip(chars = None)


   .. py:method:: split(sep = None, maxsplit = -1)

      Split the text.



   .. py:method:: splitlines(keepends = False)

      Split the text into lines.



   .. py:method:: startswith(prefix, start = 0, end = None)


   .. py:method:: strip(chars = None)


   .. py:method:: swapcase()


   .. py:method:: title()


   .. py:method:: translate(table)

      Translate the text using a translation table.



   .. py:method:: upper()


   .. py:method:: zfill(width)


   .. py:method:: to_string(print_quotes = None, separator = '@', print_lang = None)


   .. py:method:: equals_str(other)


   .. py:method:: equals_langstring(other)


   .. py:method:: __add__(other)

      Add another LangString or a string to this LangString.

      The operation can only be performed if:
      - Both are LangString objects with the same language tag.
      - The other is a string, which will be concatenated to the text of this LangString.

      :param other: The LangString or string to add.
      :return: A new LangString with the concatenated text.
      :raises TypeError: If the objects are not compatible for addition.



   .. py:method:: __contains__(item)

      Check if a substring exists within the LangString's text.



   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return:
      :rtype: bool



   .. py:method:: __ge__(other)

      Check if this LangString is greater than or equal to another str or LangString object.



   .. py:method:: __getitem__(key)

      Retrieve a substring or a reversed string from the LangString's text.



   .. py:method:: __gt__(other)

      Check if this LangString is greater than another LangString object.



   .. py:method:: __hash__()

      Generate a hash new_text for a LangString object.

      :return: The hash new_text of the LangString object, based on its text and language tag.
      :rtype: int



   .. py:method:: __iadd__(other)

      Implement in-place addition.



   .. py:method:: __imul__(other)

      In-place multiplication of the LangString's text.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: The same LangString instance with the text repeated.
      :rtype: LangString



   .. py:method:: __iter__()

      Enable iteration over the text part of the LangString.



   .. py:method:: __le__(other)

      Check if this LangString is less than or equal to another LangString object.



   .. py:method:: __len__()

      Return the length of the LangString's text.



   .. py:method:: __lt__(other)

      Check if this LangString is less than another LangString object.



   .. py:method:: __mul__(other)

      Multiply the LangString's text a specified number of times.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString



   .. py:method:: __radd__(other)

      Handle concatenation when LangString is on the right side of the '+' operator.

      Only defined to 'other' of type string because the __add__ method is used when 'other' is a LangString.

      As it concatenates other's text to the LangString's text (in this order), it returns a string and, consequently,
      the result looses its language tag.



   .. py:method:: __repr__()

      Return an unambiguous string representation of the LangString.



   .. py:method:: __rmul__(other)

      Implement right multiplication.

      This method is called for the reversed operation of multiplication, i.e., when LangString is on the right side.
      It is typically used for repeating the LangString's text a specified number of times.

      :param other: The number of times the LangString's text should be repeated.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString
      :raises TypeError: If 'other' is not an integer.



   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str



   .. py:method:: merge_langstrings(langstrings)
      :staticmethod:


      Merges duplicated LangStrings in a list based on content and language tags.

      If there's a single casing used for LangStrings with the same content, that casing is used.
      If there are LangStrings with the same content but different casings, the resulting LangString uses
      a casefolded version of the language tag.

      :param langstrings: List of LangString instances to be merged.
      :type langstrings: List[LangString]
      :return: A list of merged LangString instances without duplicates.
      :rtype: list



   .. py:method:: _validate_match_types(other, overwrite_strict = False)


   .. py:method:: _validate_match_langs(other)


