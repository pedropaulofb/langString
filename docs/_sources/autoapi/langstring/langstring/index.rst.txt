:py:mod:`langstring.langstring`
===============================

.. py:module:: langstring.langstring

.. autoapi-nested-parse::

   The langstring module provides the LangString class to encapsulate a string with its language information.

   This module is designed to work with text strings and their associated language tags, offering functionalities
   such as validation of language tags, handling of empty strings and language tags based on control flags, and
   logging of warnings for invalid language tags. It utilizes the langcodes library for validating language tags and
   the loguru library for logging warnings in case of invalid language tags.

   Control flags from the langstring_control module are used to enforce certain behaviors like ensuring non-empty
   text and valid language tags. These flags can be set externally to alter the behavior of the LangString class.

   :Example:

       # Create a LangString object
       lang_str = LangString("Hello, World!", "en")

       # Print the string representation
       print(lang_str.to_string())  # Output: '"Hello, World!"@en'



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.langstring.LangString




.. py:class:: LangString(text = '', lang = '')


   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the Controller class, which can enforce non-empty text, valid language tags, and other constraints.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text.
   :vartype lang: str

   .. py:property:: text
      :type: str

      Getter for text.


   .. py:property:: lang
      :type: str

      Getter for lang.


   .. py:method:: capitalize()


   .. py:method:: casefold()


   .. py:method:: center(width, fillchar = ' ')


   .. py:method:: count(sub, start = 0, end = None)


   .. py:method:: endswith(suffix, start = 0, end = None)


   .. py:method:: expandtabs(tabsize = 8)


   .. py:method:: find(sub, start = 0, end = None)


   .. py:method:: format(*args, **kwargs)


   .. py:method:: format_map(mapping)


   .. py:method:: index(sub, start = 0, end = None)


   .. py:method:: isalnum()


   .. py:method:: isalpha()


   .. py:method:: isascii()


   .. py:method:: isdecimal()


   .. py:method:: isdigit()


   .. py:method:: isidentifier()


   .. py:method:: islower()


   .. py:method:: isnumeric()


   .. py:method:: isprintable()


   .. py:method:: isspace()


   .. py:method:: istitle()


   .. py:method:: isupper()


   .. py:method:: join(iterable)

      Join an iterable with the text of the LangString.


   .. py:method:: ljust(width, fillchar = ' ')

      Left justify the text.


   .. py:method:: lower()


   .. py:method:: lstrip(chars = None)


   .. py:method:: partition(sep)

      Partition the text.


   .. py:method:: replace(old, new, count = -1)


   .. py:method:: removeprefix(prefix)

      Remove the specified prefix from the LangString's text.

      If the text starts with the prefix string, return a new LangString with the prefix string removed.
      Otherwise, return a copy of the original LangString.

      :param prefix: The prefix to remove from the text.
      :return: A new LangString with the prefix removed.


   .. py:method:: removesuffix(suffix)

      Remove the specified suffix from the LangString's text.

      If the text ends with the suffix string, return a new LangString with the suffix string removed.
      Otherwise, return a copy of the original LangString.

      :param suffix: The suffix to remove from the text.
      :return: A new LangString with the suffix removed.


   .. py:method:: rfind(sub, start = 0, end = None)


   .. py:method:: rindex(sub, start = 0, end = None)


   .. py:method:: rjust(width, fillchar = ' ')

      Right justify the text.


   .. py:method:: rpartition(sep)

      Partition the text from the right.


   .. py:method:: rsplit(sep = None, maxsplit = -1)

      Split the text from the right.


   .. py:method:: rstrip(chars = None)


   .. py:method:: split(sep = None, maxsplit = -1)

      Split the text.


   .. py:method:: splitlines(keepends = False)

      Split the text into lines.


   .. py:method:: startswith(prefix, start = 0, end = None)


   .. py:method:: strip(chars = None)


   .. py:method:: swapcase()


   .. py:method:: title()


   .. py:method:: translate(table)

      Translate the text using a translation table.


   .. py:method:: upper()


   .. py:method:: zfill(width)


   .. py:method:: to_string(print_quotes = True, separator = '@', print_lang = True)


   .. py:method:: equals_str(other)


   .. py:method:: equals_langstring(other)


   .. py:method:: __add__(other)

      Add another LangString or a string to this LangString.

      The operation can only be performed if:
      - Both are LangString objects with the same language tag.
      - The other is a string, which will be concatenated to the text of this LangString.

      :param other: The LangString or string to add.
      :return: A new LangString with the concatenated text.
      :raises TypeError: If the objects are not compatible for addition.


   .. py:method:: __contains__(item)

      Check if a substring exists within the LangString's text.


   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return:
      :rtype: bool


   .. py:method:: __ge__(other)

      Check if this LangString is greater than or equal to another str or LangString object.


   .. py:method:: __getitem__(key)

      Retrieve a substring or a reversed string from the LangString's text.


   .. py:method:: __gt__(other)

      Check if this LangString is greater than another LangString object.


   .. py:method:: __hash__()

      Generate a hash new_text for a LangString object.

      :return: The hash new_text of the LangString object, based on its text and language tag.
      :rtype: int


   .. py:method:: __iadd__(other)

      Implement in-place addition.


   .. py:method:: __imul__(other)

      In-place multiplication of the LangString's text.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: The same LangString instance with the text repeated.
      :rtype: LangString


   .. py:method:: __iter__()

      Enable iteration over the text part of the LangString.


   .. py:method:: __le__(other)

      Check if this LangString is less than or equal to another LangString object.


   .. py:method:: __len__()

      Return the length of the LangString's text.


   .. py:method:: __lt__(other)

      Check if this LangString is less than another LangString object.


   .. py:method:: __mul__(other)

      Multiply the LangString's text a specified number of times.

      :param other: The number of times to repeat the text.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString


   .. py:method:: __ne__(other)

      Check inequality of this LangString with another object.


   .. py:method:: __radd__(other)

      Handle concatenation when LangString is on the right side of the '+' operator.

      Only defined to 'other' of type string because the __add__ method is used when 'other' is a LangString.

      As it concatenates other's text to the LangString's text (in this order), it returns a string and, consequently,
      the result looses its language tag.


   .. py:method:: __repr__()

      Return an unambiguous string representation of the LangString.


   .. py:method:: __rmul__(other)

      Implement right multiplication.

      This method is called for the reversed operation of multiplication, i.e., when LangString is on the right side.
      It is typically used for repeating the LangString's text a specified number of times.

      :param other: The number of times the LangString's text should be repeated.
      :type other: int
      :return: A new LangString with the text repeated.
      :rtype: LangString
      :raises TypeError: If 'other' is not an integer.


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object.
      :rtype: str


   .. py:method:: _validate_match_types(other, overwrite_strict = False)


   .. py:method:: _validate_match_langs(other)



