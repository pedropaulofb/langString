:py:mod:`langstring.langstring`
===============================

.. py:module:: langstring.langstring

.. autoapi-nested-parse::

   The langstring module provides the LangString class to encapsulate a string with its language information.

   This module is designed to work with text strings and their associated language tags, offering functionalities
   such as validation of language tags, handling of empty strings and language tags based on control flags, and
   logging of warnings for invalid language tags. It utilizes the langcodes library for validating language tags and
   the loguru library for logging warnings in case of invalid language tags.

   Control flags from the langstring_control module are used to enforce certain behaviors like ensuring non-empty
   text and valid language tags. These flags can be set externally to alter the behavior of the LangString class.

   :Example:

       # Create a LangString object
       lang_str = LangString("Hello, World!", "en")

       # Print the string representation
       print(lang_str.to_string())  # Output: '"Hello, World!"@en'



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.langstring.LangString




.. py:class:: LangString(text = '', lang = None)


   Bases: :py:obj:`langstring.utils.validation_base.Validator`

   A class to encapsulate a string with its language information.

   This class provides functionality to associate a text string with a language tag, offering methods for string
   representation, equality comparison, and hashing. The behavior of this class is influenced by control flags
   from the Controller class, which can enforce non-empty text, valid language tags, and other constraints.

   :ivar text: The text string.
   :vartype text: Optional[str]
   :ivar lang: The language tag of the text, or None if not specified.
   :vartype lang: Optional[str]

   .. py:method:: _get_control_and_flags_type()

      Retrieve the control class and its corresponding flags enumeration used in the LangString class.

      This method provides the specific control class (Controller) and the flags enumeration (LangStringFlag)
      that are used for configuring and validating the LangString instances. It is essential for the functioning of
      the Validator methods, which rely on these control settings.

      :return: A tuple containing the Controller class and the LangStringFlag enumeration.
      :rtype: tuple[type[Controller], type[LangStringFlag]]


   .. py:method:: to_string()

      Convert the LangString object to a string representation.

      This method is a convenience wrapper for the __str__ method.

      :return: The string representation of the LangString object, including the language tag if present.
      :rtype: str


   .. py:method:: __str__()

      Define the string representation of the LangString object.

      :return: The string representation of the LangString object. Format: '"text"@lang' or 'text' if lang is None.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this LangString with another object.

      :param other: Another object to compare with.
      :type other: object
      :return: True if 'other' is a LangString object with the same text and language tag, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a LangString object.

      :return: The hash value of the LangString object, based on its text and language tag.
      :rtype: int



