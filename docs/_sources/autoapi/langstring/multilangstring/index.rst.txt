:py:mod:`langstring.multilangstring`
====================================

.. py:module:: langstring.multilangstring

.. autoapi-nested-parse::

   The MultiLangString module provides a class for managing and manipulating multilingual text strings.

   It allows for the storage, retrieval, and manipulation of text strings in multiple languages, offering a flexible and
   efficient way to handle multilingual content in applications.

   The MultiLangString class utilizes a dictionary to store text entries associated with language tags, enabling the
   representation and handling of text in various languages. It supports adding new entries, removing entries, and
   retrieving entries in specific languages or across all languages. The class also allows setting a preferred language,
   which can be used as a default for operations that involve retrieving text entries.

   Key Features:
   - Store and manage text entries in multiple languages using language tags.
   - Add and remove text entries for specific languages.
   - Retrieve text entries for a specific language or all languages.
   - Set and get a preferred language for default text retrieval.
   - Support for equality comparison and hashing based on the content of the multilingual text entries.
   - Validation and control strategies for handling duplicate language tags and ensuring the integrity of text entries.

   This module is designed to be used in applications that require handling of text in multiple languages, providing a
   convenient and standardized way to store and manipulate multilingual text data.

   Usage:
   The MultiLangString class can be used to create multilingual text containers, add text entries in various languages,
   retrieve entries based on language, and perform other operations related to multilingual text management. It is
   particularly useful in applications where content needs to be presented in multiple languages, such as websites,
   applications with internationalization support, and data processing tools that handle multilingual data.

   By providing a comprehensive set of methods for managing multilingual text, the MultiLangString class aims to simplify
   the development of multilingual applications and facilitate the handling of text in multiple languages.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.multilangstring.MultiLangString




.. py:class:: MultiLangString(mls_dict = None, pref_lang = 'en')


   A class for managing multilingual text strings with various language tags.

   Utilizes a global control strategy set in Controller to handle duplicate language tags. Supports
   operations like adding, removing, and retrieving language strings in multiple languages.

   :cvar mls_dict: A dictionary representing the internal structure of the MultiLangString.
   :vartype mls_dict: Optional[dict[str, set[str]]]
   :ivar pref_lang: The preferred language for this MultiLangString. Defaults to "en".
   :vartype pref_lang: str

   .. py:property:: mls_dict
      :type: dict[str, set[str]]

      Getter for texts.


   .. py:property:: pref_lang
      :type: str

      Get the preferred language for this MultiLangString.

      :return: The preferred language as a string.


   .. py:method:: add(input)


   .. py:method:: add_entry(text, lang = '')

      Add a text entry to the MultiLangString under a specified language.

      Validates the provided text and language against the current flag settings before adding. If the specified
      language does not exist in the mls_dict, a new set for that language is created. The text is then added to
      this set. If the language already exists, the text is added to the existing set for that language.

      :param text: The text to be added to the MultiLangString.
      :type text: str
      :param lang: The language under which the text should be added. If not specified, defaults to an empty string.
      :type lang: str


   .. py:method:: add_langstring(langstring)

      Add a LangString to the MultiLangString.

      :param langstring: The LangString object to be added, representing a text in a specific language.
      :type langstring: LangString


   .. py:method:: add_setlangstring(setlangstring)

      Add a SetLangString to the MultiLangString.

      :param setlangstring: The SetLangString object to be added, representing a text in a specific language.
      :type setlangstring: SetLangString


   .. py:method:: remove_entry(text, lang, clear_empty = False)

      Remove a single entry from the set of a given language key in the dictionary.

      If the specified language key exists and the text is in its set, the text is removed. If this results in an
      empty set for the language, the language key is also removed from the dictionary.

      :param text: The text to be removed.
      :type text: str
      :param lang: The language key from which the text should be removed.
      :type lang: str


   .. py:method:: remove_langstring(langstring)


   .. py:method:: remove_lang(lang)

      Remove all entries of a given language from the dictionary.

      If the specified language key exists, it and all its associated texts are removed from the dictionary.

      :param lang: The language key to be removed along with all its texts.
      :type lang: str


   .. py:method:: clear_empty()


   .. py:method:: get_strings_lang(lang)

      Retrieve all text entries for a specific language.

      :param lang: The language key to retrieve entries for.
      :type lang: str
      :return: A list of text entries for the specified language.
      :rtype: list[str]


   .. py:method:: get_strings_pref_lang()

      Retrieve all text entries for the preferred language.

      :return: A list of text entries for the specified language.
      :rtype: list[str]


   .. py:method:: get_strings_all()

      Retrieve all text entries across all languages.

      :return: A list of all text entries.
      :rtype: list[str]


   .. py:method:: get_strings_langstring_lang(lang)

      Retrieve all text entries for a specific language, formatted as '"text"@lang'.

      :param lang: The language key to retrieve entries for.
      :type lang: str
      :return: A list of formatted text entries for the specified language.
      :rtype: list[str]


   .. py:method:: get_strings_langstring_pref_lang()

      Retrieve all text entries for the preferred language, formatted as '"text"@lang'.

      :return: A list of formatted text entries for the specified language.
      :rtype: list[str]


   .. py:method:: get_strings_langstring_all()

      Retrieve all text entries across all languages, formatted as '"text"@lang'.

      :return: A list of formatted text entries for all languages.
      :rtype: list[str]


   .. py:method:: len_entries_all()

      Calculate the total number of elements across all sets in the dictionary.

      Iterates through each set in the dictionary values and sums their lengths to get the total number of elements.

      :return: The total number of elements across all sets.
      :rtype: int


   .. py:method:: len_entries_lang(lang)

      Calculate the number of entries of a given language in the dictionary.

      :return: The number of entries for a given language in a MultiLangString.
      :rtype: int


   .. py:method:: len_langs()

      Calculate the number of keys (languages) in the dictionary.

      This method returns the count of distinct keys in the dictionary, which represents the number of languages.

      :return: The number of keys in the dictionary.
      :rtype: int


   .. py:method:: is_entry(text, lang)


   .. py:method:: to_langstrings()


   .. py:method:: to_setlangstrings()


   .. py:method:: __eq__(other)

      Check equality of this MultiLangString with another MultiLangString.

      Equality is determined based on the mls_dict attribute. The pref_lang attribute is not considered in the
      equality check.

      :param other: Another object to compare with.
      :type other: object
      :return: True if both MultiLangString objects have the same mls_dict, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash new_text for a MultiLangString object.

      The hash is computed based on the 'mls_dict' attribute of the MultiLangString. This approach ensures that
      MultiLangString objects with the same content will have the same hash new_text.

      :return: The hash new_text of the MultiLangString object.
      :rtype: int


   .. py:method:: __repr__()

      Return a detailed string representation of the MultiLangString object.

      This method provides a more verbose string representation of the MultiLangString, which includes the full
      dictionary of language strings and the preferred language, making it useful for debugging.

      :return: A detailed string representation of the MultiLangString.
      :rtype: str


   .. py:method:: __str__()

      Return a string representation of the MultiLangString, including language tags.

      This method provides a concise string representation of the MultiLangString, listing each text entry with its
      associated language tag.

      :return: A string representation of the MultiLangString with language tags.
      :rtype: str



