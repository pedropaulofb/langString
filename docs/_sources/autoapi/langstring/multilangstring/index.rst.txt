:py:mod:`langstring.multilangstring`
====================================

.. py:module:: langstring.multilangstring

.. autoapi-nested-parse::

   This module defines the `MultiLangString` class for handling multilingual text strings.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   langstring.multilangstring.MultiLangString




.. py:class:: MultiLangString(mls_dict = None, preferred_lang = 'en')


   Bases: :py:obj:`utils.validation_base.ValidationBase`

   A class for managing multilingual text strings with various language tags.

   Utilizes a global control strategy set in MultiLangStringControl to handle duplicate language tags. Supports
   operations like adding, removing, and retrieving language strings in multiple languages.

   :ivar langstrings: A dictionary of LangStrings indexed by language tag.
   :vartype mls_dict: dict[str, list[str]]
   :ivar preferred_lang: The preferred language for this MultiLangString. Defaults to "en".
   :vartype preferred_lang: str

   .. py:property:: preferred_lang
      :type: str

      Get the preferred language for this MultiLangString.

      :return: The preferred language as a string.


   .. py:method:: _get_control_and_flags_type()

      Retrieve the control class and its corresponding flags enumeration used in the MultiLangString class.

      This method provides the specific control class (MultiLangStringControl) and the flags enumeration
      (MultiLangStringFlag) that are used for configuring and validating the MultiLangString instances.
      It is essential for the functioning of the ValidationBase methods, which rely on these control settings.

      :return: A tuple containing the MultiLangStringControl class and the MultiLangStringFlag enumeration.
      :rtype: tuple[type[MultiLangStringControl], type[MultiLangStringFlag]]


   .. py:method:: _validate_langstring_arg(arg)

      Private helper method to validate if the argument is a LangString.

      :param arg: Argument to be checked.
      :type arg: Any
      :raises TypeError: If the passed argument is not an instance of LangString.


   .. py:method:: add_entry(text, lang = '')


   .. py:method:: add_langstring(langstring)

      Add a LangString to the MultiLangString.

      Depending on the current global control strategy (e.g., ALLOW, OVERWRITE, BLOCK_WARN, BLOCK_ERROR), the behavior
      for handling duplicate language tags varies. For example, BLOCK_ERROR will prevent adding a LangString with a
      duplicate language tag. For ALLOW, it adds the LangString unless an identical one exists for the same language tag.

      :param langstring: The LangString object to be added, representing a text in a specific language.
      :type langstring: LangString


   .. py:method:: get_langstring(lang)

      Get LangStrings for a specific language tag.

      Returns a list of LangStrings for the specified language tag. If the specified language tag is not present
      in the MultiLangString, an empty list is returned.

      Example:
          mls = MultiLangString()
          mls.add_langstring(LangString("Hello", "en"))
          print(mls.get_langstring("en"))  # Output: ["Hello"]

      :param lang: The language tag to retrieve LangStrings for.
      :type lang: str
      :return: List of LangStrings for the specified language tag. Returns an empty list if not found.
      :rtype: list[str]


   .. py:method:: get_pref_langstring()

      Get the preferred language's LangString.

      :return: The LangString for the preferred language.
      :rtype: str


   .. py:method:: remove_langstring(langstring)

      Remove a specified LangString from the MultiLangString.

      Attempts to remove a LangString from the MultiLangString. If the LangString is found and successfully removed,
      the method returns True. If the LangString is not found, it returns False.

      :param langstring: The LangString to be removed.
      :type langstring: LangString
      :return: True if the LangString was successfully removed, False otherwise.
      :rtype: bool
      :raises TypeError: If the provided argument is not an instance of LangString.


   .. py:method:: remove_language(language_code)

      Remove all LangStrings associated with a specific language code from the MultiLangString.

      Attempts to remove all LangStrings that match a given language code. Returns True if the language code is found
      and the entries are successfully removed. Returns False if the language code is not found. Raises a ValueError
      for invalid language_code formats.

      :param language_code: The language code (e.g., "en", "fr") for which to remove LangStrings.
      :type language_code: str
      :return: True if language entries were removed, False otherwise.
      :rtype: bool
      :raises TypeError: If the provided language_code is not a string or is invalid.
      :raises ValueError: If the provided language_code contains non-alphabetical characters.


   .. py:method:: to_string()

      Convert the MultiLangString to a string. Syntactical sugar for self.__str()__.

      :return: The string representation of the MultiLangString.
      :rtype: str


   .. py:method:: to_string_list()

      Convert the MultiLangString to a list of strings.

      :return: List of strings representing the MultiLangString.
      :rtype: list


   .. py:method:: to_langstrings_all()


   .. py:method:: to_langstrings_lang(lang)


   .. py:method:: __repr__()

      Return a detailed string representation of the MultiLangString object.

      This method provides a more verbose string representation of the MultiLangString, which includes the full
      dictionary of language strings and the preferred language, making it useful for debugging.

      :return: A detailed string representation of the MultiLangString.
      :rtype: str


   .. py:method:: __len__()

      Return the total number of LangStrings stored in the MultiLangString.

      :return: The total number of LangStrings.
      :rtype: int


   .. py:method:: __str__()

      Return a string representation of the MultiLangString, including language tags.

      This method provides a concise string representation of the MultiLangString, listing each LangString with its
      associated language tag.

      Example:
          mls = MultiLangString(LangString("Hello", "en"), LangString("Hola", "es"))
          print(str(mls))  # Output: "'Hello'@en, 'Hola'@es"

      :return: A string representation of the MultiLangString with language tags.
      :rtype: str


   .. py:method:: __eq__(other)

      Check equality of this MultiLangString with another MultiLangString.

      This method compares the 'mls_dict' attribute of the two MultiLangString objects. The comparison is based on
      the content of the MultiLangString objects, irrespective of their internal handling of duplicates and preferred language.

      :param other: Another MultiLangString object to compare with.
      :type other: MultiLangString
      :return: True if both MultiLangString objects have the same content, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Generate a hash value for a MultiLangString object.

      The hash is computed based on the 'mls_dict' attribute of the MultiLangString. This approach ensures that
      MultiLangString objects with the same content will have the same hash value.

      :return: The hash value of the MultiLangString object.
      :rtype: int


   .. py:method:: _exist_in_mls_dict(text_searched, lang_searched)

      Check if a given text is associated with a specified language in the dictionary.

      :param text_searched: The text to search for in the dictionary.
      :type text_searched: str
      :param lang_searched: The language key to search under in the dictionary.
      :type lang_searched: str
      :return: True if the text is found under the specified language, False otherwise.
      :rtype: bool



