:py:mod:`multilangstring`
=========================

.. py:module:: multilangstring


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   multilangstring.ControlMultipleEntries
   multilangstring.MultiLangString




.. py:class:: ControlMultipleEntries(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: OVERWRITE
      :value: 'OVERWRITE'

      

   .. py:attribute:: ALLOW
      :value: 'ALLOW'

      

   .. py:attribute:: BLOCK_WARN
      :value: 'BLOCK_WARN'

      

   .. py:attribute:: BLOCK_ERROR
      :value: 'BLOCK_ERROR'

      


.. py:class:: MultiLangString(*args, control = 'ALLOW', preferred_lang = 'en')


   .. py:method:: add(lang_string)


   .. py:method:: get_lang_string(lang)


   .. py:method:: get_preferred_lang_string()


   .. py:method:: remove_lang_string(lang_string)


   .. py:method:: remove_lang(lang)


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __len__()


   .. py:method:: to_string()


   .. py:method:: to_string_list()


   .. py:method:: __str__()

      Return str(self).



